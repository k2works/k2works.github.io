<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Ruby環境のセットアップ(Windows版)</title>
<date>2021-04-06</date>
</info>
<section xml:id="_ruby環境のセットアップ_windows版">
<title>Ruby環境のセットアップ(Windows版)</title>

</section>
<section xml:id="_インストール">
<title>インストール</title>
<simpara>スタートメニューから <literal>Windows PowerShell</literal> を選択します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/pkg-001.png"/>
</imageobject>
<textobject><phrase>pkg 001</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>以下のコマンドを入力します。</simpara>
<programlisting language="powershell" linenumbering="unnumbered">scoop install ruby</programlisting>
<simpara>インストール完了後に MSYS2 のインストールを促されるのでインストールします。</simpara>
<programlisting language="powershell" linenumbering="unnumbered">scoop install msys2</programlisting>
<simpara>続いて、以下のコマンドを入力して <literal>3</literal> を指定して実行します。</simpara>
<programlisting language="powershell" linenumbering="unnumbered">ridk install</programlisting>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-install-001.png"/>
</imageobject>
<textobject><phrase>ruby win install 001</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_追加パッケージのインストール">
<title>追加パッケージのインストール</title>
<simpara>続いて、VSCodeにRuby開発用のパッケージを追加します。</simpara>
<simpara><link xl:href="https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby">Ruby for Visual Studio Code</link></simpara>
<simpara><link xl:href="https://marketplace.visualstudio.com/items?itemName=castwide.solargraph">Ruby Solargraph</link></simpara>
<simpara><link xl:href="https://marketplace.visualstudio.com/items?itemName=kaiwood.endwise">vscode-endwise</link></simpara>
<simpara><link xl:href="https://marketplace.visualstudio.com/items?itemName=misogi.ruby-rubocop">ruby-rubocop</link></simpara>
<simpara><link xl:href="https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-test-explorer">Test Explorer UI</link></simpara>
<simpara><link xl:href="https://marketplace.visualstudio.com/items?itemName=connorshea.vscode-ruby-test-adapter">Ruby Test Explorer</link></simpara>
</section>
<section xml:id="_設定">
<title>設定</title>
<simpara>新しいターミナルを開いて以下のコマンドを入力します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">gem install rubocop
gem install ruby-debug-ide
gem install solargraph
gem install minitest</programlisting>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-vscode-003.png"/>
</imageobject>
<textobject><phrase>ruby win vscode 003</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-vscode-004.png"/>
</imageobject>
<textobject><phrase>ruby win vscode 004</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_hello_world">
<title>Hello world</title>
<section xml:id="_プログラムを作成する">
<title>プログラムを作成する</title>
<simpara><literal>Projects</literal> フォルダ内に <literal>Ruby</literal> フォルダを作成してエディタからフォルダを開きます。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-001.png"/>
</imageobject>
<textobject><phrase>ruby win hello 001</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-002.png"/>
</imageobject>
<textobject><phrase>ruby win hello 002</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-003.png"/>
</imageobject>
<textobject><phrase>ruby win hello 003</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><literal>新しいファイル</literal> 作成アイコンを押します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-004.png"/>
</imageobject>
<textobject><phrase>ruby win hello 004</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>ファイル名は <literal>main.rb</literal> とします。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-005.png"/>
</imageobject>
<textobject><phrase>ruby win hello 005</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>ファイルに以下のコードを入力したらRunアイコンを選択して <literal>create a launch.json file</literal> を押してメニューからRubyを選択します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/autorun'

class TestHelloWorld &lt; Minitest::Test
  def test_何か便利なもの
    assert_equal(true, false)
  end
end</programlisting>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-006.png"/>
</imageobject>
<textobject><phrase>ruby win hello 006</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><literal>Debug Local File</literal> を選択します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-007.png"/>
</imageobject>
<textobject><phrase>ruby win hello 007</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><literal>launch.json</literal> ファイルが作成されたら <literal>main.rb</literal> タブに戻ってF5キーを押します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-008.png"/>
</imageobject>
<textobject><phrase>ruby win hello 008</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>デバッグコンソールに実行結果が表示されれば準備完了です。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-009.png"/>
</imageobject>
<textobject><phrase>ruby win hello 009</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>テストをパスするようにコードを修正してF5キーを押します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/autorun'

class TestHelloWorld &lt; Minitest::Test
  def test_何か便利なもの
    assert_equal(true, true)
  end

end</programlisting>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-010.png"/>
</imageobject>
<textobject><phrase>ruby win hello 010</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>テスティングフレームワークの動作が確認できたので <literal>hello_world</literal> 関数の作成に入ります。まず以下のコードを追加してF5キーを押してテストが失敗することを確認します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/autorun'

class TestHelloWorld &lt; Minitest::Test
  def test_何か便利なもの
    assert_equal(true, true)
  end

  def test_簡単な挨拶を返す
    assert_equal('Hello from Ruby', hello_world)
  end
end</programlisting>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-011.png"/>
</imageobject>
<textobject><phrase>ruby win hello 011</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><literal>hello_world</literal> 関数を追加してテストをパスさせます。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/autorun'

class TestHelloWorld &lt; Minitest::Test
  def test_何か便利なもの
    assert_equal(true, true)
  end

  def test_簡単な挨拶を返す
    assert_equal('Hello from Ruby', hello_world)
  end
end

def hello_world
  'Hello from Ruby'
end</programlisting>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-012.png"/>
</imageobject>
<textobject><phrase>ruby win hello 012</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>指定された名前で挨拶を返すようにします。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/autorun'

class TestHelloWorld &lt; Minitest::Test
  def test_何か便利なもの
    assert_equal(true, true)
  end

  def test_簡単な挨拶を返す
    assert_equal('Hello from Ruby', hello_world)
  end

  def test_指定された名前で挨拶を返す
    assert_equal('Hello from VSCode', hello_world('VSCode'))
  end
end

def hello_world
  "Hello from Ruby"
end</programlisting>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-013.png"/>
</imageobject>
<textobject><phrase>ruby win hello 013</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>関数に引数を追加します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/autorun'

class TestHelloWorld &lt; Minitest::Test
  def test_何か便利なもの
    assert_equal(true, true)
  end

  def test_簡単な挨拶を返す
    assert_equal('Hello from Ruby', hello_world)
  end

  def test_指定された名前で挨拶を返す
    assert_equal('Hello from VSCode', hello_world('VSCode'))
  end
end

def hello_world(name)
  "Hello from #{name}"
end</programlisting>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-014.png"/>
</imageobject>
<textobject><phrase>ruby win hello 014</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><literal>指定された名前で挨拶を返す</literal> テストはパスしましたが今度は <literal>簡単な挨拶を返す</literal> テストが失敗するようになりましたのでデフォルト引数を設定してテストをパスするようにします。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/autorun'

class TestHelloWorld &lt; Minitest::Test
  def test_何か便利なもの
    assert_equal(true, true)
  end

  def test_簡単な挨拶を返す
    assert_equal('Hello from Ruby', hello_world)
  end

  def test_指定された名前で挨拶を返す
    assert_equal('Hello from VSCode', hello_world('VSCode'))
  end
end

def hello_world(name = 'Ruby')
  "Hello from #{name}"
end</programlisting>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-015.png"/>
</imageobject>
<textobject><phrase>ruby win hello 015</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>仕上げに不要なテストを削除してテストケースの文言をわかりやすくしておきます。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/autorun'

class TestHelloWorld &lt; Minitest::Test
  def test_何も指定されていない場合は既定の挨拶を返す
    assert_equal('Hello from Ruby', hello_world)
  end

  def test_指定された名前で挨拶を返す
    assert_equal('Hello from VSCode', hello_world('VSCode'))
  end
end

def hello_world(name = 'Ruby')
  "Hello from #{name}"
end</programlisting>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-hello-016.png"/>
</imageobject>
<textobject><phrase>ruby win hello 016</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_プログラムをデバッグする">
<title>プログラムをデバッグする</title>
<simpara>まず確認したいプログラムの行を左部分を押してブレークポイント（赤丸）を設定します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-debug-001.png"/>
</imageobject>
<textobject><phrase>ruby win debug 001</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>ブレークポイントを設定したらF5を押してプログラムの実行します。そうするとブレークポイント部分でプログラムが停止して変数などの情報が確認できるようになります。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-debug-002.png"/>
</imageobject>
<textobject><phrase>ruby win debug 002</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>画面上の実行ボタンを押すと次のブレークポイントに移動します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-debug-003.png"/>
</imageobject>
<textobject><phrase>ruby win debug 003</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>デバッガを終了するには終了ボタンを押します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-debug-004.png"/>
</imageobject>
<textobject><phrase>ruby win debug 004</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>ブレークポイントを再度押すことで解除ができます。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-debug-005.png"/>
</imageobject>
<textobject><phrase>ruby win debug 005</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_プログラムをレポジトリに保存する">
<title>プログラムをレポジトリに保存する</title>
<simpara>ソース管理を選択して <literal>リポジトリを初期化する</literal> を押します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-git-001.png"/>
</imageobject>
<textobject><phrase>ruby win git 001</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><literal>全ての変更をステージ</literal> を選択します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-git-002.png"/>
</imageobject>
<textobject><phrase>ruby win git 002</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>変更内容に <literal>feat: HelloWorld</literal> と入力して <literal>コミット</literal> を押します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-git-003.png"/>
</imageobject>
<textobject><phrase>ruby win git 003</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>変更内容は <literal>ソース管理</literal> から確認できます。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-git-004.png"/>
</imageobject>
<textobject><phrase>ruby win git 004</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
</section>
<section xml:id="_githubに公開する">
<title>GitHubに公開する</title>
<simpara>続いて、GitHubを使ってレポジトリを外部に公開できるようにしてみましょう。</simpara>
<simpara>まず、GitHubでレポジトリを作成します。</simpara>
<simpara>画面右上の+マークから <literal>New repository</literal> を選択します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-001.png"/>
</imageobject>
<textobject><phrase>ruby win github 001</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>レポジトリ名は <literal>hello-ruby</literal> として <literal>Public</literal> で公開します。 公開したくない場合は <literal>Private</literal> を選択します。 <literal>Add a README file</literal> にもチェックを入れておきます。</simpara>
<simpara>最後に <literal>Create repository</literal> を押して公開レポジトリを作成します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-002.png"/>
</imageobject>
<textobject><phrase>ruby win github 002</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>公開レポジトリが作成されたらVSCodeから読み込めるようにするためリンク先の情報を取得します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-003.png"/>
</imageobject>
<textobject><phrase>ruby win github 003</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>クリップボードのアイコンをクリックするとレポジトリのURLがコピーできます。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-004.png"/>
</imageobject>
<textobject><phrase>ruby win github 004</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>続いてVSCodeに戻り、<literal>表示</literal> メニューから <literal>コマンドパレット</literal> を選択します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-005.png"/>
</imageobject>
<textobject><phrase>ruby win github 005</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><literal>clone</literal> と入力して <literal>Git クローン</literal> を選択します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-006.png"/>
</imageobject>
<textobject><phrase>ruby win github 006</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>リポジトリのURLへ先ほどコピーした公開レポジトリのURLを貼り付けます。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-007.png"/>
</imageobject>
<textobject><phrase>ruby win github 007</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>公開レポジトリの保存場所を指定する必要があるのでここでは <literal>Projects</literal> フォルダに <literal>GitHub</literal> フォルダを追加してそこに保存することにします。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-008.png"/>
</imageobject>
<textobject><phrase>ruby win github 008</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>チェックアウトが終わると画面左下に通知が出ますので <literal>開く</literal> を押します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-009.png"/>
</imageobject>
<textobject><phrase>ruby win github 009</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>準備ができましたので先ほどやった <literal>HelloWorld</literal> プログラムをもう一度作成して先ほどと同様にローカルレポジトリに保存します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-010.png"/>
</imageobject>
<textobject><phrase>ruby win github 010</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>ローカルレポジトリの内容をGitHubの公開レポジトリに登録します。<literal>表示</literal> メニューから <literal>コマンドパレット</literal> を選択します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-011.png"/>
</imageobject>
<textobject><phrase>ruby win github 011</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><literal>push</literal> と入力して <literal>Git プッシュ</literal> を選択します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-012.png"/>
</imageobject>
<textobject><phrase>ruby win github 012</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>以下のGitHub認証画面が表示された場合は <literal>Sign in with your browser</literal> を押します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-013.png"/>
</imageobject>
<textobject><phrase>ruby win github 013</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><literal>Authorize GitCrendtialManager</literal> を押します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-014.png"/>
</imageobject>
<textobject><phrase>ruby win github 014</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>GitHubアカウントのパスワードを入力します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-015.png"/>
</imageobject>
<textobject><phrase>ruby win github 015</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-016.png"/>
</imageobject>
<textobject><phrase>ruby win github 016</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>認証が完了してローカルレポジトリの内容が公開レポジトリに登録されました。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-017.png"/>
</imageobject>
<textobject><phrase>ruby win github 017</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>内容が反映されているかをブラウザ画面から確認します。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_env/ruby-win-github-018.png"/>
</imageobject>
<textobject><phrase>ruby win github 018</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
</article>