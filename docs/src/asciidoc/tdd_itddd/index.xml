<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="5"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>テスト駆動開発から始めるドメイン駆動設計入門</title>
<date>2020-05-22</date>
</info>
<section xml:id="_はじめに">
<title>はじめに</title>

</section>
<section xml:id="_値オブジェクト">
<title>値オブジェクト</title>
<section xml:id="_ユーザーストーリー">
<title>ユーザーストーリー</title>
<simpara>まず <emphasis role="strong">ユーザーストーリー</emphasis> をもとに仕様を整理します。</simpara>
<blockquote>
<attribution>
Martin Fowler's Bliki (ja)
<citetitle><link xl:href="https://bliki-ja.github.io/UserStory">https://bliki-ja.github.io/UserStory</link></citetitle>
</attribution>
<simpara>ユーザーストーリーとは、ソフトウェアシステムに求められるふるまいをまとめたものだ。アジャイルソフトウェア開発の世界で広く使われており、大量の機能を細かく分解して計画作りに生かせるようにしている。 同じような概念を表す用語としてフィーチャーという言い方もあるが、 最近のアジャイル界隈では「ストーリー」とか「ユーザーストーリー」とかいう用語のほうが広まっている。</simpara>
</blockquote>
<simpara>SNS(ソーシャルネットワークサービス)のユーザー機能ということなので以下の <emphasis role="strong">ユーザーストーリー</emphasis> を作成しました。</simpara>
<literallayout class="monospaced">利用者として
ユーザーを管理できるようにしたい
なぜならユーザーはシステムを利用するために必要だから</literallayout>
</section>
<section xml:id="_todoリスト">
<title>TODOリスト</title>
<simpara><emphasis role="strong">ユーザーストーリー</emphasis> を作成したらそれをもとに <emphasis role="strong">TODOリスト</emphasis> を作成します。<?asciidoc-br?>
<emphasis role="strong">TODOリスト</emphasis> はプログラムとして実行できる粒度で具体的に記述します。</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="_仮実装">
<title>仮実装</title>
<section xml:id="_ユーザーを登録する">
<title>ユーザーを登録する</title>
<simpara>さっそく <emphasis role="strong">TODOリスト</emphasis> の１つ目を片付けましょう。<?asciidoc-br?>
まずは <emphasis role="strong">テストファースト</emphasis> で最初に失敗するコードを書きます。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class HelloTest &lt; Minitest::Test
  def test_greeting
    assert_equal 'hello world', greeting
  end
end

def greeting
  'hello world'
end</programlisting>
<simpara>サンプルコードを以下のコードに書き換えてテストを実行します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def test_IDと名前を持ったユーザーを作成する
    user = User.new
    assert_equal '1', user.id
    assert_equal 'Bob', user.name
  end
end</programlisting>
<simpara>テストは失敗しました。 <literal>NameError: uninitialized constant UserTest::User</literal> クラスが定義されていないからですね。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/hello_test.rb
Started with run options --seed 44125

UserTest
  test_IDと名前を持ったユーザーを作成する                                        ERROR (0.00s)
Minitest::UnexpectedError:         NameError: uninitialized constant UserTest::User
            test/hello_test.rb:7:in test_IDと名前を持ったユーザーを作成する


Finished in 0.00135s
1 tests, 0 assertions, 0 failures, 1 errors, 0 skips</programlisting>
<simpara>テストをパスさせるためにUserクラスを追加します。<?asciidoc-br?>
まずはテストをパスさせるために <emphasis role="strong">仮実装</emphasis> でベタ書きのコードを実装します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def test_IDと名前を持ったユーザーを作成する
    user = User.new
    assert_equal '1', user.id
    assert_equal 'Bob', user.name
  end
end

class User
  attr_accessor :id, :name

  def initialize
    @id = '1'
    @name = 'Bob'
  end
end</programlisting>
<simpara>テストをパスさせてレッドからグリーンになりました。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/hello_test.rb
Started with run options --seed 55832

UserTest
  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)

Finished in 0.00072s
1 tests, 2 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
</section>
<section xml:id="_仮実装から実装へ">
<title>仮実装から実装へ</title>
<section xml:id="_ユーザーを登録する_2">
<title>ユーザーを登録する</title>
<simpara>テストは通りましたがコードはベタ書きのままです。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def test_IDと名前を持ったユーザーを作成する
    user = User.new
    assert_equal '1', user.id
    assert_equal 'Bob', user.name
  end
end

class User
  attr_accessor :id, :name

  def initialize
    @id = '1'
    @name = 'Bob'
  end
end</programlisting>
<simpara><emphasis role="strong">仮実装</emphasis> のままでは別のユーザーを作ることが出来ないので、コンストラクタ経由で作成できるようにします。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def test_IDと名前を持ったユーザーを作成する
    user = User.new('1', 'Bob')
    assert_equal '1', user.id
    assert_equal 'Bob', user.name
  end
end

class User
  attr_accessor :id, :name

  def initialize(id, name)
    @id = id
    @name = name
  end
end</programlisting>
<simpara>テストが通りました。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/hello_test.rb
Started with run options --seed 6402

UserTest
  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)

Finished in 0.00089s
1 tests, 2 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara><emphasis role="strong">仮実装から実装へ</emphasis> を経て一つ目の <emphasis role="strong">TODOリスト</emphasis> を片付けたのでここでバージョン管理システムを使ってコミットしておきます。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add .
$ git commit -m 'test: ユーザーを登録する'</programlisting>
<simpara>以下、 <emphasis role="strong">TODOリスト</emphasis> を片付けるたびにコミットしていきます。</simpara>
</section>
</section>
<section xml:id="_リファクタリング">
<title>リファクタリング</title>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>レッド・グリーンときたので続いて <emphasis role="strong">リファクタリング</emphasis> を実施します。</simpara>
<section xml:id="_メソッドの抽出">
<title>メソッドの抽出</title>
<simpara>本来はコードの重複が発生してからやるのですが今回は予め <emphasis role="strong">メソッドの抽出</emphasis> を適用してフィクスチャーを抽出しておきます。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def test_IDと名前を持ったユーザーを作成する
    user = User.new('1', 'Bob')
    assert_equal '1', user.id
    assert_equal 'Bob', user.name
  end
end</programlisting>
<simpara>Rubyのテスティングフレームワークminitestではフィクスチャーはsetupメソッドです。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def setup
    @user = User.new('1', 'Bob')
  end

  def test_IDと名前を持ったユーザーを作成する
    assert_equal '1', @user.id
    assert_equal 'Bob', @user.name
  end
end</programlisting>
<simpara>テストが壊れていないことを確認したらコミットします。</simpara>
</section>
</section>
<section xml:id="_明白な実装">
<title>明白な実装</title>
<simpara>続いて <emphasis role="strong">TODOリスト</emphasis> を追加します。</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
<listitem>
<simpara>&#10063; <emphasis role="strong">ユーザー名が３文字未満の場合はエラー</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<section xml:id="_ユーザーを登録する_3">
<title>ユーザーを登録する</title>
<simpara>追加した <emphasis role="strong">TODOリスト</emphasis> に取り掛かります。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def setup
    @user = User.new('1', 'Bob')
  end

  def test_IDと名前を持ったユーザーを作成する
    assert_equal '1', @user.id
    assert_equal 'Bob', @user.name
  end
end

class User
  attr_accessor :id, :name

  def initialize(id, name)
    @id = id
    @name = name
  end
end</programlisting>
<simpara>まず、失敗するテストを書いて <emphasis role="strong">明白な実装</emphasis> でテストをパスするようにします。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def setup
    @user = User.new('1', 'Bob')
  end

  def test_IDと名前を持ったユーザーを作成する
    assert_equal '1', @user.id
    assert_equal 'Bob', @user.name
  end

  def test_ユーザー名が３文字未満の場合はエラー
    e = assert_raises RuntimeError do
      User.new('1', 'a')
    end

    assert_equal 'ユーザー名は3文字以上です。', e.message
  end
end

class User
  attr_accessor :id, :name

  def initialize(id, name)
    raise 'ユーザー名は3文字以上です。' if name.length &lt; 3

    @id = id
    @name = name
  end
end</programlisting>
<simpara>レッドからグリーンになったことを確認したらコミットします。</simpara>
</section>
</section>
<section xml:id="_リファクタリング_2">
<title>リファクタリング</title>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が３文字未満の場合はエラー</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>レッド・グリーン・リファクタリングです。</simpara>
<section xml:id="_クラスの抽出">
<title>クラスの抽出</title>
<simpara><emphasis role="strong">クラスの抽出</emphasis> を適用して Userクラスから <emphasis role="strong">値オブジェクト</emphasis> を抽出する <emphasis role="strong">リファクタリング</emphasis> を適用します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def setup
    @user = User.new('1', 'Bob')
  end

  def test_IDと名前を持ったユーザーを作成する
    assert_equal '1', @user.id
    assert_equal 'Bob', @user.name
  end

  def test_ユーザー名が３文字未満で新規登録する場合はエラー
    e = assert_raises RuntimeError do
      User.new(1, 'a')
    end

    assert_equal 'ユーザー名は3文字以上です。', e.message
  end
end

class User
  attr_accessor :id, :name

  def initialize(id, name)
    raise 'ユーザー名は3文字以上です。' if name.length &lt; 3

    @id = id
    @name = name
  end
end</programlisting>
<simpara>まずはUserIdクラスを抽出します。テストコードをUserIdクラスを使って呼び出すように変更したらエラーを修正してグリーンの状態を維持します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def setup
    id = UserId.new('1')
    @user = User.new(id, 'Bob')
  end

  def test_IDと名前を持ったユーザーを作成する
    assert_equal '1', @user.id.value
    assert_equal 'Bob', @user.name
  end
...
end

class UserId
  attr_accessor :value

  def initialize(value)
    @value = value
  end
end

...</programlisting>
<simpara>続いてUserNameクラスを抽出します。テストコードも同様に変更します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def setup
    id = UserId.new('1')
    name = UserName.new('Bob')
    @user = User.new(id, name)
  end

  def test_IDと名前を持ったユーザーを作成する
    assert_equal '1', @user.id.value
    assert_equal 'Bob', @user.name.value
  end
...
end

...

class UserName
  attr_accessor :value

  def initialize(value)
    raise 'ユーザー名は3文字以上です。' if value.length &lt; 3

    @value = value
  end
end

...</programlisting>
<simpara>テストコードを修正してグリーンになったらコミットして <emphasis role="strong">クラスの抽出</emphasis> の <emphasis role="strong">リファクタリング</emphasis> 完了です。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ruby test/hello_test.rb
Started with run options --seed 59746

UserTest
  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)
  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)

Finished in 0.00071s
2 tests, 4 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
<section xml:id="_setメソッドの削除">
<title>setメソッドの削除</title>
<simpara><emphasis role="strong">クラスの抽出</emphasis> により <emphasis role="strong">値オブジェクト</emphasis> を抽出することは出来ましたがインスタンスの値が変更可能な状態です。<?asciidoc-br?>
<emphasis role="strong">setメソッドの削除</emphasis> を適用して <emphasis role="strong">値オブジェクト</emphasis> の要求を満たす不変オブジェクトに <emphasis role="strong">リファクタリング</emphasis> しましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def setup
    id = UserId.new('1')
    name = UserName.new('Bob')
    @user = User.new(id, name)
  end

  def test_IDと名前を持ったユーザーを作成する
    assert_equal '1', @user.id.value
    assert_equal 'Bob', @user.name.value
  end

  def test_ユーザー名が３文字未満の場合はエラー
    e = assert_raises RuntimeError do
      UserName.new('a')
    end

    assert_equal 'ユーザー名は3文字以上です。', e.message
  end
end

class UserId
  attr_accessor :value

  def initialize(value)
    @value = value
  end
end

class UserName
  attr_accessor :value

  def initialize(value)
    raise 'ユーザー名は3文字以上です。' if value.length &lt; 3

    @value = value
  end
end

class User
  attr_accessor :id, :name

  def initialize(id, name)
    @id = id
    @name = name
  end
end</programlisting>
<simpara>アックセッサメソッドを読み取り専用に変更します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...

class UserId
  attr_reader :value

...
end

class UserName
  attr_reader :value

...
end

class User
  attr_reader :id, :name

...
end</programlisting>
<simpara>テストが壊れていないことを確認したらコミットします。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/hello_test.rb
Started with run options --seed 62273

UserTest
  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)
  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)

Finished in 0.00075s
2 tests, 4 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
</section>
<section xml:id="_例外ケース">
<title>例外ケース</title>
<simpara>正常系の実装が出来たので続いて例外系の実装に入りたいと思います。<?asciidoc-br?>
まず <emphasis role="strong">TODOリスト</emphasis> を追加します。</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が３文字未満の場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10063; <emphasis role="strong">ユーザー名が４文字の場合は登録される</emphasis></simpara>
</listitem>
<listitem>
<simpara>&#10063; <emphasis role="strong">ユーザー名を指定しない場合はエラー</emphasis></simpara>
</listitem>
<listitem>
<simpara>&#10063; <emphasis role="strong">IDを指定しない場合はエラー</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<section xml:id="_ユーザーを登録する_4">
<title>ユーザーを登録する</title>
<simpara>追加した <emphasis role="strong">TODOリスト</emphasis> をテストを壊さないように１つづつ片付けていくとしましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def setup
    id = UserId.new('1')
    name = UserName.new('Bob')
    @user = User.new(id, name)
  end

  def test_IDと名前を持ったユーザーを作成する
    assert_equal '1', @user.id.value
    assert_equal 'Bob', @user.name.value
  end

  def test_ユーザー名が３文字未満の場合はエラー
    e = assert_raises RuntimeError do
      UserName.new('a')
    end

    assert_equal 'ユーザー名は3文字以上です。', e.message
  end
end

class UserId
  attr_reader :value

  def initialize(value)
    @value = value
  end
end

class UserName
  attr_reader :value

  def initialize(value)
    raise 'ユーザー名は3文字以上です。' if value.length &lt; 3

    @value = value
  end
end

class User
  attr_reader :id, :name

  def initialize(id, name)
    @id = id
    @name = name
  end
end</programlisting>
<simpara>実装後のコードです。<?asciidoc-br?>
実際は１つテストコードを追加したらプロダクトコードを実装してレッド・グリーンのサイクルを回しています。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def setup
    id = UserId.new('1')
    name = UserName.new('Bob')
    @user = User.new(id, name)
  end

  def test_IDと名前を持ったユーザーを作成する
    assert_equal '1', @user.id.value
    assert_equal 'Bob', @user.name.value
  end

  def test_ユーザー名が３文字未満の場合はエラー
    e = assert_raises RuntimeError do
      UserName.new('a')
    end

    assert_equal 'ユーザー名は3文字以上です。', e.message
  end

  def test_ユーザー名が4文字の場合は登録される
    user = User.new(UserId.new('1'), UserName.new('abcd'))
    assert_equal 'abcd', user.name.value
  end

  def test_ユーザー名を指定しない場合はエラー
    assert_raises RuntimeError do
      UserName.new(nil)
    end
  end

  def test_IDを指定しない場合はエラー
    assert_raises RuntimeError do
      UserId.new(nil)
    end
  end
end

class UserId
  attr_reader :value

  def initialize(value)
    raise if value.nil?

    @value = value
  end
end

class UserName
  attr_reader :value

  def initialize(value)
    raise if value.nil?
    raise 'ユーザー名は3文字以上です。' if value.length &lt; 3

    @value = value
  end
end

class User
  attr_reader :id, :name

  def initialize(id, name)
    @id = id
    @name = name
  end
end</programlisting>
<simpara>例外系の機能を追加してテストもパスしたのでコミットします。</simpara>
</section>
</section>
<section xml:id="_リファクタリング_3">
<title>リファクタリング</title>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が３文字未満の場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名を指定しない場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が４文字の場合は登録される</simpara>
</listitem>
<listitem>
<simpara>&#10003; IDを指定しない場合はエラー</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>今回はコードの可読性を改善する観点で <emphasis role="strong">リファクタリング</emphasis> を実施してみたいと思います。</simpara>
<section xml:id="_メソッドのインライン化">
<title>メソッドのインライン化</title>
<simpara>テストコードが増えてきましたここでテストコードをグルーピングするため <emphasis role="strong">メソッドのインライン化</emphasis> を適用します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  def setup
    id = UserId.new('1')
    name = UserName.new('Bob')
    @user = User.new(id, name)
  end

  def test_IDと名前を持ったユーザーを作成する
    assert_equal '1', @user.id.value
    assert_equal 'Bob', @user.name.value
  end

  def test_ユーザー名が３文字未満の場合はエラー
    e = assert_raises RuntimeError do
      UserName.new('a')
    end

    assert_equal 'ユーザー名は3文字以上です。', e.message
  end

  def test_ユーザー名が４文字の場合は登録される
    user = User.new(UserId.new('1'), UserName.new('abcd'))
    assert_equal 'abcd', user.name.value
  end

  def test_ユーザー名を指定しない場合はエラー
    assert_raises RuntimeError do
      UserName.new(nil)
    end
  end

  def test_IDを指定しない場合はエラー
    assert_raises RuntimeError do
      UserId.new(nil)
    end
  end
end

class UserId
  attr_reader :value

  def initialize(value)
    raise if value.nil?

    @value = value
  end
end

class UserName
  attr_reader :value

  def initialize(value)
    raise if value.nil?
    raise 'ユーザー名は3文字以上です。' if value.length &lt; 3

    @value = value
  end
end

class User
  attr_reader :id, :name

  def initialize(id, name)
    @id = id
    @name = name
  end
end</programlisting>
<simpara>テストコードの構造を <emphasis role="strong">TODOリスト</emphasis> の構造に合わせることで可読性を改善します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  describe 'ユーザーを登録する' do
    def setup
      id = UserId.new('1')
      name = UserName.new('Bob')
      @user = User.new(id, name)
    end

    def test_IDと名前を持ったユーザーを作成する
      assert_equal '1', @user.id.value
      assert_equal 'Bob', @user.name.value
    end

    def test_ユーザー名が３文字未満の場合はエラー
      e = assert_raises RuntimeError do
        UserName.new('a')
      end

      assert_equal 'ユーザー名は3文字以上です。', e.message
    end

    def test_ユーザー名が４文字の場合は登録される
      user = User.new(UserId.new('1'), UserName.new('abcd'))
      assert_equal 'abcd', user.name.value
    end

    def test_ユーザー名を指定しない場合はエラー
      assert_raises RuntimeError do
        UserName.new(nil)
      end
    end

    def test_IDを指定しない場合はエラー
      assert_raises RuntimeError do
        UserId.new(nil)
      end
    end
  end
end

...</programlisting>
<simpara>実行結果もわかりやすいなりました。
テストは壊れていないのでコミットします。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/hello_test.rb
Started with run options --seed 39340

ユーザーを登録する
  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)
  test_IDを指定しない場合はエラー                                             PASS (0.00s)
  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)
  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)
  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)

Finished in 0.00217s
5 tests, 7 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
<section xml:id="_キーワード引数の導入">
<title>キーワード引数の導入</title>
<simpara>テストコードは読みやすくなりました。続いてプロダクトコードを改善しましょう。<?asciidoc-br?>
動的言語であるRubyでは型を明示しないため引数の値がリテラルなのか <emphasis role="strong">値オブジェクト</emphasis> なのかメソッドの定義だけでは把握できません。<emphasis role="strong">キーワード引数の導入</emphasis> をしてできるだけ引数の型を把握しやすいように <emphasis role="strong">リファクタリング</emphasis> しましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  describe 'ユーザーを登録する' do
    def setup
      id = UserId.new('1')
      name = UserName.new('Bob')
      @user = User.new(id, name)
    end

    def test_IDと名前を持ったユーザーを作成する
      assert_equal '1', @user.id.value
      assert_equal 'Bob', @user.name.value
    end

    def test_ユーザー名が３文字未満の場合はエラー
      e = assert_raises RuntimeError do
        UserName.new('a')
      end

      assert_equal 'ユーザー名は3文字以上です。', e.message
    end

    def test_ユーザー名が４文字の場合は登録される
      user = User.new(UserId.new('1'), UserName.new('abcd'))
      assert_equal 'abcd', user.name.value
    end

    def test_ユーザー名を指定しない場合はエラー
      assert_raises RuntimeError do
        UserName.new(nil)
      end
    end

    def test_IDを指定しない場合はエラー
      assert_raises RuntimeError do
        UserId.new(nil)
      end
    end
  end
end

class UserId
  attr_reader :value

  def initialize(value)
    raise if value.nil?

    @value = value
  end
end

class UserName
  attr_reader :value

  def initialize(value)
    raise if value.nil?
    raise 'ユーザー名は3文字以上です。' if value.length &lt; 3

    @value = value
  end
end

class User
  attr_reader :id, :name

  def initialize(id, name)
    @id = id
    @name = name
  end
end</programlisting>
<simpara><emphasis role="strong">キーワード引数</emphasis> を <emphasis role="strong">値オブジェクト</emphasis> と同じ名称にします。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  describe 'ユーザーを登録する' do
    def setup
      id = UserId.new('1')
      name = UserName.new('Bob')
      @user = User.new(user_id: id, user_name: name)
    end
...
end

...

class User
  attr_reader :id, :name

  def initialize(user_id:, user_name:)
    @id = user_id
    @name = user_name
  end
end</programlisting>
<simpara>テストを修正してグリーンになったらコミットします。<?asciidoc-br?>
ちなみに <emphasis role="strong">キーワード引数の導入</emphasis> という名称はリファクタリングのカタログにはない用語です。Ruby固有のパターンとして便宜上命名しています。</simpara>
</section>
</section>
<section xml:id="_モジュール分割">
<title>モジュール分割</title>
<simpara><emphasis role="strong">TODOリスト</emphasis> を全部片付けたのでここで単一ファイルから各クラスモジュールごとに <emphasis role="strong">モジュール分割</emphasis> を実施します。</simpara>
<section xml:id="_todoリスト_2">
<title>TODOリスト</title>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が３文字未満の場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名を指定しない場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が４文字の場合は登録される</simpara>
</listitem>
<listitem>
<simpara>&#10003; IDを指定しない場合はエラー</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="_クラス図">
<title>クラス図</title>
<screen>class User {
  UserId id
  UserName name
}
class UserId {
  String value
}
class UserName {
  String value
}

User *-l UserId
User *-r UserName</screen>
</section>
<section xml:id="_ファイル構成">
<title>ファイル構成</title>
<literallayout class="monospaced">/main.rb
  |--lib/
      |
       -- sns.rb
       -- user_id.rb
       -- user_name.rb
       -- user.rb
  |--test/
      |
       -- user_test.rb</literallayout>
<formalpara>
<title>/main.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered">require './test/user_test.rb'</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/sns.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require './lib/user_id.rb'
require './lib/user_name.rb'
require './lib/user.rb'</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/user_id.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

# User ID value object
class UserId
  attr_reader :value

  def initialize(value)
    raise if value.nil?

    @value = value
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/user_name.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

# User name value object
class UserName
  attr_reader :value

  def initialize(value)
    raise if value.nil?
    raise 'ユーザー名は3文字以上です。' if value.length &lt; 3

    @value = value
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/user.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

# User
class User
  attr_reader :id, :name

  def initialize(user_id:, user_name:)
    @id = user_id
    @name = user_name
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/test/user_test.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require 'minitest/reporters'
Minitest::Reporters.use! [Minitest::Reporters::SpecReporter.new(color: true)]
require 'minitest/autorun'
require './lib/sns.rb'

class UserTest &lt; Minitest::Test
  describe 'ユーザーを登録する' do
    def setup
      id = UserId.new('1')
      name = UserName.new('Bob')
      @user = User.new(user_id: id, user_name: name)
    end

    def test_IDと名前を持ったユーザーを作成する
      assert_equal '1', @user.id.value
      assert_equal 'Bob', @user.name.value
    end

    def test_ユーザー名が３文字未満の場合はエラー
      e = assert_raises RuntimeError do
        UserName.new('a')
      end

      assert_equal 'ユーザー名は3文字以上です。', e.message
    end

    def test_ユーザー名が４文字の場合は登録される
      user = User.new(user_id: UserId.new('1'),
                      user_name: UserName.new('abcd'))
      assert_equal 'abcd', user.name.value
    end

    def test_ユーザー名を指定しない場合はエラー
      assert_raises RuntimeError do
        UserName.new(nil)
      end
    end

    def test_IDを指定しない場合はエラー
      assert_raises RuntimeError do
        UserId.new(nil)
      end
    end
  end
end</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_リリース">
<title>リリース</title>
<simpara><emphasis role="strong">モジュール分割</emphasis> により最初のリリースの準備が出来ました。<?asciidoc-br?>
リリース前に <emphasis role="strong">静的コード解析</emphasis> と <emphasis role="strong">コードカバレッジ</emphasis> を実施してコードの品質を確認しておきましょう。<?asciidoc-br?>
手順の詳細は <link xl:href="https://qiita.com/k2works/items/385dc16333e065d69bd6">こちらの記事</link> をご参照ください。</simpara>
<section xml:id="_静的コード解析">
<title>静的コード解析</title>
<programlisting language="bash" linenumbering="unnumbered">$ rubocop
Inspecting 5 files
....C

Offenses:

test/user_test.rb:11:3: C: Metrics/BlockLength: Block has too many lines. [30/25]
  describe 'ユーザーを登録する' do ...
  ^^^^^^^^^^^^^^^^^^^^^^^
test/user_test.rb:18:9: C: Naming/MethodName: Use snake_case for method names.
    def test_IDと名前を持ったユーザーを作成する
        ^^^^^^^^^^^^^^^^^^^^^^^
test/user_test.rb:18:16: C: Naming/AsciiIdentifiers: Use only ascii symbols in identifiers.
    def test_IDと名前を持ったユーザーを作成する
               ^^^^^^^^^^^^^^^^
test/user_test.rb:23:9: C: Naming/MethodName: Use snake_case for method names.
    def test_ユーザー名が３文字未満の場合はエラー
        ^^^^^^^^^^^^^^^^^^^^^^^
test/user_test.rb:23:14: C: Naming/AsciiIdentifiers: Use only ascii symbols in identifiers.
    def test_ユーザー名が３文字未満の場合はエラー
             ^^^^^^^^^^^^^^^^^^
test/user_test.rb:31:9: C: Naming/MethodName: Use snake_case for method names.
    def test_ユーザー名が４文字の場合は登録される
        ^^^^^^^^^^^^^^^^^^^^^^^
test/user_test.rb:31:14: C: Naming/AsciiIdentifiers: Use only ascii symbols in identifiers.
    def test_ユーザー名が４文字の場合は登録される
             ^^^^^^^^^^^^^^^^^^
test/user_test.rb:37:9: C: Naming/MethodName: Use snake_case for method names.
    def test_ユーザー名を指定しない場合はエラー
        ^^^^^^^^^^^^^^^^^^^^^^
test/user_test.rb:37:14: C: Naming/AsciiIdentifiers: Use only ascii symbols in identifiers.
    def test_ユーザー名を指定しない場合はエラー
             ^^^^^^^^^^^^^^^^^
test/user_test.rb:43:9: C: Naming/MethodName: Use snake_case for method names.
    def test_IDを指定しない場合はエラー
        ^^^^^^^^^^^^^^^^^^^
test/user_test.rb:43:16: C: Naming/AsciiIdentifiers: Use only ascii symbols in identifiers.
    def test_IDを指定しない場合はエラー
               ^^^^^^^^^^^^

5 files inspected, 11 offenses detected</programlisting>
<simpara>いくつか警告が表示されていますがテストコードの日本語に関する内容なのでチェック対象から除外することにします。 `.</simpara>
<simpara>rubocop.yml` ファイルを以下に更新します。</simpara>
<programlisting language="yml" linenumbering="unnumbered">inherit_from: .rubocop_todo.yml

AllCops:
    Include:
      - 'lib/**/*.rb'
      - 'test/**/*_test.rb'
    Exclude:
      - 'docs'

Style/AsciiComments:
  Enabled: false

Naming/MethodName:
  Exclude:
    - 'test/**'

Naming/AsciiIdentifiers:
  Exclude:
    - 'test/**'

Metrics/BlockLength:
  Exclude:
    - 'test/**'</programlisting>
<simpara>警告は無くなりました。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ rubocop
Inspecting 5 files
.....

5 files inspected, no offenses detected</programlisting>
</section>
<section xml:id="_コードカバレッジ">
<title>コードカバレッジ</title>
<simpara>まず、テストコードからコードカバレッジを実行できるようにします。</simpara>
<simpara><literal>user_test.rb</literal> の先頭を以下に更新します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require 'simplecov'
SimpleCov.start
require 'minitest/reporters'
Minitest::Reporters.use! [Minitest::Reporters::SpecReporter.new(color: true)]
require 'minitest/autorun'
require './lib/sns.rb'

...</programlisting>
<simpara>テストを実行します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/user_test.rb
Started with run options --seed 24571

ユーザーを登録する
  test_IDを指定しない場合はエラー                                             PASS (0.00s)
  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)
  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)
  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)
  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)

Finished in 0.00106s
5 tests, 7 assertions, 0 failures, 0 errors, 0 skips
Coverage report generated for Unit Tests to /Users/k2works/Projects/sandbox/tdd_itddd/coverage. 19 / 19 LOC (100.0%) covered.</programlisting>
<simpara>テストカバレッジは100%です。</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_itddd/20200222.png"/>
</imageobject>
<textobject><phrase>20200222</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
</section>
<section xml:id="_ふりかえり">
<title>ふりかえり</title>
<simpara>最初のリリースが完了したのでここでやってきたことのふりかえりをしておきましょう。</simpara>
<simpara>まず、<emphasis role="strong">ユーザーストーリー</emphasis> から <emphasis role="strong">TODOリスト</emphasis> を作成しました。<?asciidoc-br?>
<emphasis role="strong">TODOリスト</emphasis> の１つめを <emphasis role="strong">仮実装</emphasis> でまずベタ書きのコードを書いてテストをパスするようにしました。<?asciidoc-br?>
テストをパスしてグリーンになったら <emphasis role="strong">仮実装から実装へ</emphasis> を経て最初の <emphasis role="strong">TODOリスト</emphasis> を完了させました。</simpara>
<simpara>次の <emphasis role="strong">TODOリスト</emphasis> を追加する前にテストコードに <emphasis role="strong">メソッドの抽出</emphasis> を適用して <emphasis role="strong">リファクタリング</emphasis> を実施しました。<?asciidoc-br?>
<emphasis role="strong">リファクタリング</emphasis> を実施してテストが壊れていないことを確認してから <emphasis role="strong">TODOリスト</emphasis> を追加して次の作業に入りました。<?asciidoc-br?>
次の作業ではまず <emphasis role="strong">TODOリスト</emphasis> を追加してその内容を <emphasis role="strong">明白な実装</emphasis> で片付けました。</simpara>
<simpara><emphasis role="strong">明白な実装</emphasis> により再びテストがレッドからグリーンになったので <emphasis role="strong">クラスの抽出</emphasis> と <emphasis role="strong">setメソッドの削除</emphasis> を適用して <emphasis role="strong">リファクタリング</emphasis> を実施することにより <emphasis role="strong">値オブジェクト</emphasis> を追加しました。<?asciidoc-br?>
<emphasis role="strong">リファクタリング</emphasis> を実施してテストが壊れていないことを確認したら 次は例外ケースの <emphasis role="strong">TODOリスト</emphasis> を追加しました。</simpara>
<simpara>追加した例外ケースを <emphasis role="strong">明白な実装</emphasis> で片付けたら、まずテストコードに <emphasis role="strong">メソッドのインライン化</emphasis> を適用して プロダクトコードに <emphasis role="strong">キーワード引数の導入</emphasis> を適用してコードの可読性を改善する <emphasis role="strong">リファクタリング</emphasis> を実施しました。</simpara>
<simpara>仕上げに <emphasis role="strong">モジュール分割</emphasis> を実施しました。<?asciidoc-br?>
続いて <emphasis role="strong">静的コード</emphasis> と <emphasis role="strong">コードカバレッジ</emphasis> を実施してコードの品質を確認して、最初のリリースを完了しました。</simpara>
<simpara>今回のテーマである <emphasis role="strong">値オブジェクト</emphasis> は書籍『テスト駆動開発』では <emphasis>第１部 他国通貨</emphasis> の中でMoneyクラスとして実装されていますし <emphasis role="strong">Value Objectパターン</emphasis> として紹介されています。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>Value Objectパターン</simpara>
<simpara>広く共有されるものの、同一インスタンスであることはさほど重要でないオブジェクトを設計するにはどうしたらよいだろうか-----オブジェクト作成時に状態を設定したら、その後決して変えないようにする。オブジェクトへの操作は必ず新しいオブジェクトを返すようにしよう。</simpara>
</blockquote>
<simpara>また、書籍『リファクタリング』では <emphasis>第３章　コードの不吉な臭い</emphasis> の中の <emphasis role="strong">基本データ型への執着</emphasis> で言及されています。</simpara>
<blockquote>
<attribution>
新装版 リファクタリング
</attribution>
<simpara>基本データ型への執着</simpara>
<simpara>オブジェクト指向を始めたばかりの人は、小さなオブジェクトを使ってちょっとしたことをさせるのを嫌がる傾向があります。金額と通貨単位を組み合わせたMoney(貨幣)クラス、上限と下限と持つRange(範囲)クラス、電話番号や郵便番号を表すための特殊な文字列クラスなどがこの例に該当します。</simpara>
</blockquote>
<simpara>アプリケーション開発の過程でどのように <emphasis role="strong">値オブジェクト</emphasis> を適用するかは <link xl:href="https://qiita.com/k2works/items/928d519a7afe99361ff2#%E5%80%A4%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88">こちらの記事</link>をご参照ください。</simpara>
<simpara>今回のリリースでユーザーは登録することは出来ましたがユーザー名を変更することが出来ません。</simpara>
<simpara>次回は <emphasis role="strong">エンティティ</emphasis> の実装に取り組んでみたいと思います。</simpara>
</section>
</section>
<section xml:id="_エンティティ">
<title>エンティティ</title>
<section xml:id="_ユーザーストーリー_2">
<title>ユーザーストーリー</title>
<simpara>前回の <emphasis role="strong">値オブジェクト</emphasis> に続いて今回は <emphasis role="strong">エンティティ</emphasis> を作成します。まず <emphasis role="strong">ユーザーストーリー</emphasis> から追加作業を <emphasis role="strong">TODOリスト</emphasis> に追加します。</simpara>
<literallayout class="monospaced">利用者として
ユーザーを管理できるようにしたい
なぜならユーザーはシステムを利用するために必要だから</literallayout>
</section>
<section xml:id="_todoリスト_3">
<title>TODOリスト</title>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が３文字未満の場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名を指定しない場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が４文字の場合は登録される</simpara>
</listitem>
<listitem>
<simpara>&#10003; IDを指定しない場合はエラー</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10063; ユーザー名を変更できるようにする</simpara>
</listitem>
<listitem>
<simpara>&#10063; ユーザーの同一性を判断できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; 識別子を追加する</simpara>
</listitem>
<listitem>
<simpara>&#10063; エンティティの比較のを行う</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="_明白な実装_2">
<title>明白な実装</title>
<section xml:id="_ユーザー名を変更する">
<title>ユーザー名を変更する</title>
<simpara>追加した <emphasis role="strong">TODOリスト</emphasis> を <emphasis role="strong">テストファースト</emphasis> で片づけるため最初にテストコードの追加から始めます。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  describe 'ユーザーを更新する' do
    def setup
      id = UserId.new('1')
      name = UserName.new('Bob')
      @user = User.new(user_id: id, user_name: name)
    end

    def test_ユーザー名を更新する
      @user.change_name('Alice')
      assert_equal 'Alice', @user.name
    end
  end
end</programlisting>
<simpara>テストを実行して失敗することを確認します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/user_test.rb
Started with run options --seed 16647

ユーザーを登録する
  test_IDを指定しない場合はエラー                                             PASS (0.00s)
  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)
  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)
  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)
  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)

ユーザーを更新する
  test_ユーザー名を更新する                                                ERROR (0.00s)
Minitest::UnexpectedError:         NoMethodError: undefined method change_name' for #&lt;User:0x00007fdc9101e850&gt;
            test/user_test.rb:61:in `test_ユーザー名を更新する'


Finished in 0.00382s
6 tests, 7 assertions, 0 failures, 1 errors, 0 skips</programlisting>
<simpara>続いて、メソッドの追加します。簡単な実装なので <emphasis role="strong">明白な実装</emphasis> で片づけるとします。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class User
  attr_reader :id, :name

  def initialize(user_id:, user_name:)
    @id = user_id
    @name = user_name
  end

  def change_name(name)
    raise if name.nil?

    @name = name
  end
end</programlisting>
<simpara>続いて、テストが通ることを確認します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/user_test.rb
Started with run options --seed 6624

ユーザーを登録する
  test_IDを指定しない場合はエラー                                             PASS (0.00s)
  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)
  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)
  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)
  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)

ユーザーを更新する
  test_ユーザー名を更新する                                                 PASS (0.00s)

Finished in 0.00127s
6 tests, 8 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
<section xml:id="_ユーザーの同一性を判断する">
<title>ユーザーの同一性を判断する</title>
<simpara><emphasis role="strong">エンティティ</emphasis> として同一性を判断するためのテストケースを追加します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  describe 'ユーザーの同一性を判断する' do
    def setup
      id = UserId.new('1')
      name = UserName.new('Bob')
      @user = User.new(user_id: id, user_name: name)
    end

    def test_同じ名前の異なるユーザー
      id = UserId.new('2')
      name = UserName.new('Bob')
      @user2 = User.new(user_id: id, user_name: name)

      refute @user.eql?(@user2)
    end

    def test_同じ名前の同じユーザー
      assert @user.eql?(@user)
    end

    def test_名前を変更した同じユーザー
      @user.change_name('Alice')

      assert @user.eql?(@user)
    end
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/user_test.rb
Started with run options --seed 20456

ユーザーの同一性を判断する
  test_同じ名前の同じユーザー                                                PASS (0.00s)
  test_同じ名前の異なるユーザー                                               PASS (0.00s)
  test_名前を変更した同じユーザー                                              PASS (0.00s)

ユーザーを更新する
  test_ユーザー名を更新する                                                 PASS (0.00s)

ユーザーを登録する
  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)
  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)
  test_IDを指定しない場合はエラー                                             PASS (0.00s)
  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)
  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)

Finished in 0.00166s
9 tests, 11 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>比較メソッドを識別子で判定するようにオーバーライドします。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class User
  attr_reader :id, :name

  def initialize(user_id:, user_name:)
    @id = user_id
    @name = user_name
  end

  def change_name(name)
    raise if name.nil?

    @name = name
  end

  def eql?(other)
    @id == other.id
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered"> $ ruby test/user_test.rb
Started with run options --seed 1326

ユーザーを登録する
  test_IDを指定しない場合はエラー                                             PASS (0.00s)
  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)
  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)
  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)
  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)

ユーザーの同一性を判断する
  test_同じ名前の同じユーザー                                                PASS (0.00s)
  test_同じ名前の異なるユーザー                                               PASS (0.00s)
  test_名前を変更した同じユーザー                                              PASS (0.00s)

ユーザーを更新する
  test_ユーザー名を更新する                                                 PASS (0.00s)

Finished in 0.00226s
9 tests, 11 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
</section>
<section xml:id="_リファクタリング_4">
<title>リファクタリング</title>
<section xml:id="_メソッドの委譲">
<title>メソッドの委譲</title>
<simpara><literal>eql?</literal> メソッドを <literal>==</literal> に委譲します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class User
  attr_reader :id, :name

  def initialize(user_id:, user_name:)
    @id = user_id
    @name = user_name
  end

  def change_name(name)
    raise if name.nil?

    @name = name
  end

  def eql?(other)
    self == other
  end

  def ==(other)
    other.equal?(self) || (other.instance_of?(self.class) &amp;&amp; other.id == id
  end

  def hash
    id.hash
  end
end</programlisting>
<simpara>変更によりコードが壊れていないことを確認します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/user_test.rb
Started with run options --seed 37624

ユーザーの同一性を判断する
  test_同じ名前の異なるユーザー                                               PASS (0.00s)
  test_名前を変更した同じユーザー                                              PASS (0.00s)
  test_同じ名前の同じユーザー                                                PASS (0.00s)

ユーザーを更新する
  test_ユーザー名を更新する                                                 PASS (0.00s)

ユーザーを登録する
  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)
  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)
  test_IDを指定しない場合はエラー                                             PASS (0.00s)
  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)
  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)

Finished in 0.00164s
9 tests, 11 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
<section xml:id="_モジュール分割_2">
<title>モジュール分割</title>
<simpara>テストコードの基本部分をヘルパーとして分割して共通利用できるようにしておきます。</simpara>
<simpara><literal>test_helper.rb</literal> を作成します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'simplecov'
SimpleCov.start
require 'minitest/reporters'
Minitest::Reporters.use! [Minitest::Reporters::SpecReporter.new(color: true)]
require 'minitest/autorun'</programlisting>
<simpara><literal>user_test.rb</literal> の先頭部部を変更します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require './test/test_helper'
require './lib/sns.rb'

class UserTest &lt; Minitest::Test
...</programlisting>
</section>
</section>
<section xml:id="_リリース_2">
<title>リリース</title>
<section xml:id="_静的コード解析_2">
<title>静的コード解析</title>
<programlisting language="bash" linenumbering="unnumbered">$ rubocop
The following cops were added to RuboCop, but are not configured. Please set Enabled to either `true` or `false` in your `.rubocop.yml` file:
 - Lint/RaiseException (0.81)
 - Lint/StructNewOverride (0.81)
 - Style/HashEachMethods (0.80)
 - Style/HashTransformKeys (0.80)
 - Style/HashTransformValues (0.80)
For more information: https://docs.rubocop.org/en/latest/versioning/
The following cops were added to RuboCop, but are not configured. Please set Enabled to either `true` or `false` in your `.rubocop.yml` file:
 - Lint/RaiseException (0.81)
 - Lint/StructNewOverride (0.81)
 - Style/HashEachMethods (0.80)
 - Style/HashTransformKeys (0.80)
 - Style/HashTransformValues (0.80)
For more information: https://docs.rubocop.org/en/latest/versioning/
Inspecting 5 files
.....

5 files inspected, no offenses detected</programlisting>
</section>
<section xml:id="_コードカバレッジ_2">
<title>コードカバレッジ</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_itddd/2020042201.png"/>
</imageobject>
<textobject><phrase>2020042201</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_itddd/2020042202.png"/>
</imageobject>
<textobject><phrase>2020042202</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_todoリスト_4">
<title>TODOリスト</title>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が３文字未満の場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名を指定しない場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が４文字の場合は登録される</simpara>
</listitem>
<listitem>
<simpara>&#10003; IDを指定しない場合はエラー</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名を変更できるようにする</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザーの同一性を判断できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; 識別子を追加する</simpara>
</listitem>
<listitem>
<simpara>&#10003; エンティティの比較のを行う</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="_ファイル構成_2">
<title>ファイル構成</title>
<literallayout class="monospaced">/main.rb
  |--lib/
      |
       -- sns.rb
       -- user_id.rb
       -- user_name.rb
       -- user.rb
  |--test/
      |
       -- test_helper.rb
       -- user_test.rb</literallayout>
<formalpara>
<title>/main.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered">require './test/user_test.rb'</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/sns.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require './lib/user_id.rb'
require './lib/user_name.rb'
require './lib/user.rb'</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/user_id.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

# User ID value object
class UserId
  attr_reader :value

  def initialize(value)
    raise if value.nil?

    @value = value
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/user_name.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

# User name value object
class UserName
  attr_reader :value

  def initialize(value)
    raise if value.nil?
    raise 'ユーザー名は3文字以上です。' if value.length &lt; 3

    @value = value
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/user.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

# User
class User
  attr_reader :id, :name

  def initialize(user_id:, user_name:)
    @id = user_id
    @name = user_name
  end

  def change_name(name)
    raise if name.nil?

    @name = name
  end

  def eql?(other)
    @id == other.id
  end

  def ==(other)
    other.equal?(self) || other.instance_of?(self.class) &amp;&amp; other.id == id
  end

  def hash
    id.hash
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/test/test_helper.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require 'simplecov'
SimpleCov.start
require 'minitest/reporters'
Minitest::Reporters.use! [Minitest::Reporters::SpecReporter.new(color: true)]
require 'minitest/autorun'</programlisting>
</para>
</formalpara>
<formalpara>
<title>/test/user_test.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require './test/test_helper'
require './lib/sns.rb'

class UserTest &lt; Minitest::Test
  describe 'ユーザーを登録する' do
    def setup
      id = UserId.new('1')
      name = UserName.new('Bob')
      @user = User.new(user_id: id, user_name: name)
    end

    def test_IDと名前を持ったユーザーを作成する
      assert_equal '1', @user.id.value
      assert_equal 'Bob', @user.name.value
    end

    def test_ユーザー名が３文字未満の場合はエラー
      e = assert_raises RuntimeError do
        UserName.new('a')
      end

      assert_equal 'ユーザー名は3文字以上です。', e.message
    end

    def test_ユーザー名が４文字の場合は登録される
      user = User.new(user_id: UserId.new('1'),
                      user_name: UserName.new('abcd'))
      assert_equal 'abcd', user.name.value
    end

    def test_ユーザー名を指定しない場合はエラー
      assert_raises RuntimeError do
        UserName.new(nil)
      end
    end

    def test_IDを指定しない場合はエラー
      assert_raises RuntimeError do
        UserId.new(nil)
      end
    end
  end

  describe 'ユーザーを更新する' do
    def setup
      id = UserId.new('1')
      name = UserName.new('Bob')
      @user = User.new(user_id: id, user_name: name)
    end

    def test_ユーザー名を更新する
      @user.change_name('Alice')
      assert_equal 'Alice', @user.name
    end
  end

  describe 'ユーザーの同一性を判断する' do
    def setup
      id = UserId.new('1')
      name = UserName.new('Bob')
      @user = User.new(user_id: id, user_name: name)
    end

    def test_同じ名前の異なるユーザー
      id = UserId.new('2')
      name = UserName.new('Bob')
      @user2 = User.new(user_id: id, user_name: name)

      refute @user.eql?(@user2)
    end

    def test_同じ名前の同じユーザー
      assert @user.eql?(@user)
    end

    def test_名前を変更した同じユーザー
      @user.change_name('Alice')

      assert @user.eql?(@user)
    end
  end
end</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_ふりかえり_2">
<title>ふりかえり</title>
<simpara>まず、<emphasis role="strong">ユーザーストーリー</emphasis> から追加の <emphasis role="strong">TODOリスト</emphasis> を作成しました。<?asciidoc-br?>
<emphasis role="strong">テストファースト</emphasis> で最初に失敗するテストから始めて <emphasis role="strong">明白な実装</emphasis> によりユーザ名を更新するメソッドを追加しました。</simpara>
<simpara>続いて、<emphasis role="strong">値オブジェクト</emphasis> であるユーザーオブジェクトを <emphasis role="strong">エンティティ</emphasis> として扱えるようにするためユーザーの同一性を判断するためのメソッドを追加しました。<?asciidoc-br?>
そして、メソッドの委譲のリファクタリングを実施後、テストを実行してコードが壊れていないことを確認しました。</simpara>
<simpara>仕上げに、ヘルパーファイルを抽出してテストファイルで共有できるようにしました。</simpara>
<simpara>今回のテーマである <emphasis role="strong">エンティティ</emphasis> に関しては、書籍『リファクタリング』第８章　データの再編成　値から参照への変更で言及されています。</simpara>
<blockquote>
<attribution>
新装版 リファクタリング
</attribution>
<simpara>多くのシステムにおいて、参照オブジェクトと値オブジェクトを分けて考えることが役立ちます。「参照オブジェクト」とは、顧客とか勘定といったもので、実世界における１個のオブジェクトを表しており、それらが同じものかどうかを調べるには、オブジェクト識別が用いられます。「値オブジェクト」とは、日付やお金のようなもので、もっぱら、それ自体のデータ値によって定義されます。それらのコピーはいくつあってもかまいません。</simpara>
</blockquote>
<simpara><emphasis role="strong">値オブジェクト</emphasis> と <emphasis role="strong">エンティティ</emphasis> に関してはリファクタリングカタログで <emphasis role="strong">値から参照への変更</emphasis> と <emphasis role="strong">参照から値への変更</emphasis> として解説されています。</simpara>
<blockquote>
<attribution>
新装版 リファクタリング
</attribution>
<simpara>値から参照への変更</simpara>
<simpara>同じインスタンスが多数存在するクラスがある。それらを１つのオブジェクトに置き換えたい。</simpara>
<simpara>そのオブジェクトを参照オブジェクトに変える。</simpara>
</blockquote>
<blockquote>
<attribution>
新装版 リファクタリング
</attribution>
<simpara>参照から値への変更</simpara>
<simpara>小さくて、不変で、コントロールが煩わしい参照オブジェクトがある。</simpara>
<simpara>値オブジェクトに変える。</simpara>
</blockquote>
<simpara>次回は <emphasis role="strong">ドメインサービス</emphasis> の実装に取り組んでみたいと思います。</simpara>
</section>
</section>
<section xml:id="_ドメインサービス">
<title>ドメインサービス</title>
<section xml:id="_ユーザーストーリー_3">
<title>ユーザーストーリー</title>
<simpara>前回の <emphasis role="strong">エンティティ</emphasis> に続いて今回は <emphasis role="strong">ドメインサービス</emphasis> を作成します。
まず <emphasis role="strong">ユーザーストーリー</emphasis> をもとに追加作業を <emphasis role="strong">TODOリスト</emphasis> に追加します。</simpara>
<literallayout class="monospaced">利用者として
ユーザーを管理できるようにしたい
なぜならユーザーはシステムを利用するために必要だから</literallayout>
</section>
<section xml:id="_todoリスト_5">
<title>TODOリスト</title>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が３文字未満の場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名を指定しない場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が４文字の場合は登録される</simpara>
</listitem>
<listitem>
<simpara>&#10003; IDを指定しない場合はエラー</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名を変更できるようにする</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザーの同一性を判断できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; 識別子を追加する</simpara>
</listitem>
<listitem>
<simpara>&#10003; エンティティの比較のを行う</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10063; ユーザーを重複して登録できないようにする</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="_仮実装を経て本実装へ">
<title>仮実装を経て本実装へ</title>
<section xml:id="_セットアップ">
<title>セットアップ</title>
<simpara>ユーザーデータを永続化するため今回はSQLiteを使用します。Rubyでのセットアップ方法はまず <literal>Gemfile</literal> にsqlite3ライブラリを追加します。</simpara>
<simpara><literal>Gemfile</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

source "https://rubygems.org"

git_source(:github) {|repo_name| "https://github.com/#{repo_name}" }

...
gem 'sqlite3'</programlisting>
<simpara>続いてライブラリを読み込んで利用できるようにします。</simpara>
<simpara><literal>lib/sns.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require './lib/user_id.rb'
require './lib/user_name.rb'
require './lib/user.rb'
require 'sqlite3'</programlisting>
<simpara>追加する機能のテストコードの準備をします。テスト実行の最初にユーザーテーブルを作成してテスト終了時にテーブルを削除するようにします。</simpara>
<simpara><literal>test/user_test.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  describe 'ユーザーの重複を判定する' do
    def setup
      @db = SQLite3::Database.new('sns.db')
      sql = 'CREATE TABLE USERS(id string, name string)'
      @db.execute(sql)
    end

    def teardown
      sql = 'DROP TABLE USERS'
      @db.execute(sql)
      @db.close
    end
  end
end</programlisting>
<simpara>準備が出来たら追加ライブラリをインストールします。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ bundle install</programlisting>
</section>
<section xml:id="_仮実装_2">
<title>仮実装</title>
<simpara>ユーザーの重複を判定する機能を実装したいのですがまだ具体的なコードの実装イメージが湧きません。こんな時は <emphasis role="strong">仮実装</emphasis>
でまず失敗するテストから始めるとしましょう。</simpara>
<simpara><literal>test_user_test.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    def test_登録するユーザーがすでに存在している
      id = UserId.new('1')
      name = UserName.new('Bob')
      user = User.new(user_id: id, user_name: name)

      sql = 'INSERT INTO USERS(id, name) VALUES(:id, :name)'
      @db.execute(sql, id: user.id.value, name: user.name.value)

      assert user.exist?(user)
    end
...</programlisting>
<simpara><literal>User#exist?</literal> メソッドが存在しないためテストは失敗しました。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/user_test.rb
Started with run options --seed 19263

ユーザーの重複を判定する
  test_登録するユーザーがすでに存在している                                        ERROR (0.04s)
Minitest::UnexpectedError:         NoMethodError: undefined method exist? for #&lt;User:0x000055f6172730e0&gt;
            test/user_test.rb:103:in test_登録するユーザーがすでに存在している
...</programlisting>
<simpara>テストを通すために <literal>User#exist?</literal> メソッドを追加して最小限の実装をします。</simpara>
<simpara><literal>lib/user.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">class User
...
  def change_name(name)
    raise if name.nil?

    @name = name
  end

  def exist?(_user)
    true
  end

  def eql?(other)
    @id == other.id
  end
...
end</programlisting>
<simpara>テストが成功してグリーンの状態になりました。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/user_test.rb
Started with run options --seed 21516

ユーザーを更新する
  test_ユーザー名を更新する                                                 PASS (0.00s)

...

ユーザーの重複を判定する
  test_登録するユーザーがすでに存在している                                         PASS (0.07s)

Finished in 0.07418s
10 tests, 12 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
<section xml:id="_本実装">
<title>本実装</title>
<simpara><emphasis role="strong">仮実装</emphasis> でテストは通るようになりましたがこのままではユーザーが存在しない場合もTrueを返すのでデータベースから該当するユーザーが存在するかを確認するコードを実装します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def exist?(user)
    db = SQLite3::Database.new('sns.db')
    sql = 'SELECT * FROM USERS WHERE name = :name'
    result = db.execute(sql, name: user.name.value)
    !result.empty?
  end
...</programlisting>
<simpara>テストが通ることを確認します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/user_test.rb
Started with run options --seed 47320

ユーザーを更新する
  test_ユーザー名を更新する                                                 PASS (0.00s)

...

ユーザーの重複を判定する
  test_登録するユーザーがすでに存在している                                         PASS (0.05s)

Finished in 0.05795s
10 tests, 12 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
<section xml:id="_テスト">
<title>テスト</title>
<simpara>ユーザーが存在しない場合のテストも追加しておきます。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    def test_登録するユーザーが存在していない
      id = UserId.new('2')
      name = UserName.new('Alice')
      user = User.new(user_id: id, user_name: name)

      refute user.exist?(user)
    end
...</programlisting>
<simpara>テストが通ることを確認します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/user_test.rb
Started with run options --seed 2872

ユーザーの同一性を判断する
  test_同じ名前の同じユーザー                                                PASS (0.00s)
  test_同じ名前の異なるユーザー                                               PASS (0.00s)
  test_名前を変更した同じユーザー                                              PASS (0.00s)

ユーザーの重複を判定する
  test_登録するユーザーがすでに存在している                                         PASS (0.19s)
  test_登録するユーザーが存在していない                                           PASS (0.12s)
...

Finished in 0.32139s
11 tests, 13 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
</section>
<section xml:id="_リファクタリング_5">
<title>リファクタリング</title>
<simpara>レッド、グリーン、となったので次はリファクタです。</simpara>
<section xml:id="_クラスの抽出_2">
<title>クラスの抽出</title>
<simpara>まず、ユーザー <emphasis role="strong">エンティティ</emphasis> にユーザーが存在するかを確認するメソッドが存在するのは不自然なので <emphasis role="strong">クラスの抽出</emphasis> を適用して <emphasis role="strong">ドメインサービス</emphasis> クラスを抽出するとしましょう。まず、 <emphasis role="strong">ドメインサービス</emphasis> クラスとテストクラスを追加します。</simpara>
<simpara><literal>test/user_service_test.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">require './test/test_helper'
require './lib/sns.rb'

class UserServiceTest &lt; Minitest::Test
end</programlisting>
<simpara>続いて <emphasis role="strong">ドメインサービス</emphasis> クラスとなる <literal>UserService</literal> クラスを追加して読み込むようにします。</simpara>
<simpara><literal>lib/user_service.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserService
end</programlisting>
<simpara><literal>lib/sns.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">require './lib/user_id.rb'
require './lib/user_name.rb'
require './lib/user.rb'
require './lib/user_service.rb'
require 'sqlite3'</programlisting>
<simpara>テストが壊れていないことを確認します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ rake test
...
ユーザーの重複を判定する
  test_登録するユーザーがすでに存在している                                         PASS (0.16s)
  test_登録するユーザーが存在していない                                           PASS (0.12s)

Finished in 0.60710s
13 tests, 15 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
<section xml:id="_メソッドの移動">
<title>メソッドの移動</title>
<simpara><emphasis role="strong">ドメインサービス</emphasis> を <emphasis role="strong">クラスの抽出</emphasis> したので続いて <emphasis role="strong">エンティティ</emphasis> からユーザーの重複を確認する <emphasis role="strong">メソッドの移動</emphasis> を実施します。</simpara>
<simpara><literal>test/user_service_test.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserServiceTest &lt; Minitest::Test
  describe 'ユーザーの重複を判定する' do
    def setup
      @db = SQLite3::Database.new('sns.db')
      sql = 'CREATE TABLE USERS(id string, name string)'
      @db.execute(sql)
    end

    def test_登録するユーザーがすでに存在している
      id = UserId.new('1')
      name = UserName.new('Bob')
      user = User.new(user_id: id, user_name: name)

      sql = 'INSERT INTO USERS(id, name) VALUES(:id, :name)'
      @db.execute(sql, id: user.id.value, name: user.name.value)

      assert user.exist?(user)
    end

    def test_登録するユーザーが存在していない
      id = UserId.new('2')
      name = UserName.new('Alice')
      user = User.new(user_id: id, user_name: name)

      refute user.exist?(user)
    end

    def teardown
      sql = 'DROP TABLE USERS'
      @db.execute(sql)
      @db.close
    end
  end
end</programlisting>
<simpara><literal>test/user_service_test.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">rlass UserService
  def exist?(user)
    db = SQLite3::Database.new('sns.db')
    sql = 'SELECT * FROM USERS WHERE name = :name'
    result = db.execute(sql, name: user.name.value)
    !result.empty?
  end
end</programlisting>
<simpara>テストを <emphasis role="strong">ドメインサービス</emphasis> 経由から実行するように変更します。</simpara>
<simpara><literal>test/user_service_test.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">require './test/test_helper'
require './lib/sns'

class UserServiceT.rbest &lt; Minitest::Test
  describe 'ユーザーの重複を判定する' do
    def setup
      @db = SQLite3::Database.new('sns.db')
      sql = 'CREATE TABLE USERS(id string, name string)'
      @db.execute(sql)

      @service = UserService.new
    end

    def test_登録するユーザーがすでに存在している
      id = UserId.new('1')
      name = UserName.new('Bob')
      user = User.new(user_id: id, user_name: name)

      sql = 'INSERT INTO USERS(id, name) VALUES(:id, :name)'
      @db.execute(sql, id: user.id.value, name: user.name.value)

      assert @service.exist?(user)
    end

    def test_登録するユーザーが存在していない
      id = UserId.new('2')
      name = UserName.new('Alice')
      user = User.new(user_id: id, user_name: name)

      refute @service.exist?(user)
    end

    def teardown
      sql = 'DROP TABLE USERS'
      @db.execute(sql)
      @db.close
    end
  end
end</programlisting>
<simpara>テストが壊れていないことを確認したら <emphasis role="strong">ドメインサービス</emphasis> の <emphasis role="strong">クラスの抽出</emphasis> と <emphasis role="strong">メソッドの移動</emphasis> のリファクタリングは完了です。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ rake test
...
ユーザーの重複を判定する
  test_登録するユーザーがすでに存在している                                         PASS (0.12s)
  test_登録するユーザーが存在していない                                           PASS (0.06s)
...
ユーザーを更新する
  test_ユーザー名を更新する                                                 PASS (0.00s)

Finished in 0.18120s
11 tests, 13 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
</section>
<section xml:id="_todoリスト_6">
<title>TODOリスト</title>
<simpara>続いてユーザーIDを <emphasis role="strong">エンティティ</emphasis> の生成時に引数として受け取っていますが重複したIDで <emphasis role="strong">エンティティ</emphasis> を生成してしまう可能性があるので自動生成するようにリファクタリングしたいと思います。</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が３文字未満の場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名を指定しない場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が４文字の場合は登録される</simpara>
</listitem>
<listitem>
<simpara>&#10003; IDを指定しない場合はエラー</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名を変更できるようにする</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザーの同一性を判断できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; 識別子を追加する</simpara>
</listitem>
<listitem>
<simpara>&#10003; エンティティの比較のを行う</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10003; ユーザーを重複して登録できないようにする</simpara>
</listitem>
<listitem>
<simpara>&#10063; IDを自動生成する</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="_リファクタリング_6">
<title>リファクタリング</title>
<section xml:id="_パラメータの削除">
<title>パラメータの削除</title>
<simpara><link xl:href="https://ja.wikipedia.org/wiki/UUID">UUID</link> による識別子を導入するため <literal>securerandom</literal> ライブラリを追加します。なお <literal>securerandom</literal> は標準添付ライブラリなので <literal>gem</literal> によるインストールは必要ありません。</simpara>
<simpara><literal>lib/sns.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">require './lib/user_id.rb'
require './lib/user_name.rb'
require './lib/user.rb'
require './lib/user_service.rb'
require 'sqlite3'
require 'securerandom'</programlisting>
<simpara><emphasis role="strong">エンティティ</emphasis> のコンストラクタの引数からidを削除して、生成時にUUIDを自動生成するように変更します。</simpara>
<simpara><literal>lib/user.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">class User
  attr_reader :id, :name

  def initialize(user_name:)
    @id = UserId.new(SecureRandom.uuid.to_str)
    @name = user_name
  end
...</programlisting>
<simpara>プロダクトコードの変更に合わせてテストコードも修正します。</simpara>
<simpara><literal>test/user_service_test.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserServiceTest &lt; Minitest::Test
  describe 'ユーザーの重複を判定する' do
    def setup
      @db = SQLite3::Database.new('sns.db')
      sql = 'CREATE TABLE USERS(id string, name string)'
      @db.execute(sql)

      @service = UserService.new
    end

    def test_登録するユーザーがすでに存在している
      name = UserName.new('Bob')
      user = User.new(user_name: name)

      sql = 'INSERT INTO USERS(id, name) VALUES(:id, :name)'
      @db.execute(sql, id: user.id.value, name: user.name.value)

      assert @service.exist?(user)
    end

    def test_登録するユーザーが存在していない
      name = UserName.new('Alice')
      user = User.new(user_name: name)

      refute @service.exist?(user)
    end

    def teardown
      sql = 'DROP TABLE USERS'
      @db.execute(sql)
      @db.close
    end
  end
end</programlisting>
<simpara><literal>test/user_test.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserTest &lt; Minitest::Test
  describe 'ユーザーを登録する' do
    def setup
      name = UserName.new('Bob')
      @user = User.new(user_name: name)
    end

    def test_IDと名前を持ったユーザーを作成する
      assert_equal 'Bob', @user.name.value
    end

    def test_ユーザー名が３文字未満の場合はエラー
      e = assert_raises RuntimeError do
        UserName.new('a')
      end

      assert_equal 'ユーザー名は3文字以上です。', e.message
    end

    def test_ユーザー名が４文字の場合は登録される
      user = User.new(
        user_name: UserName.new('abcd')
      )
      assert_equal 'abcd', user.name.value
    end

    def test_ユーザー名を指定しない場合はエラー
      assert_raises RuntimeError do
        UserName.new(nil)
      end
    end

    def test_IDを指定しない場合はエラー
      assert_raises RuntimeError do
        UserId.new(nil)
      end
    end
  end

  describe 'ユーザーを更新する' do
    def setup
      name = UserName.new('Bob')
      @user = User.new(user_name: name)
    end

    def test_ユーザー名を更新する
      @user.change_name('Alice')
      assert_equal 'Alice', @user.name
    end
  end

  describe 'ユーザーの同一性を判断する' do
    def setup
      name = UserName.new('Bob')
      @user = User.new(user_name: name)
    end

    def test_同じ名前の異なるユーザー
      name = UserName.new('Bob')
      @user2 = User.new(user_name: name)

      refute @user.eql?(@user2)
    end

    def test_同じ名前の同じユーザー
      assert @user.eql?(@user)
    end

    def test_名前を変更した同じユーザー
      @user.change_name('Alice')

      assert @user.eql?(@user)
    end
  end
end</programlisting>
<simpara>テストが正しく動作することが確認出来たらリファクタリング完了です。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ rake test
...
ユーザーの重複を判定する
  test_登録するユーザーがすでに存在している                                         PASS (0.12s)
  test_登録するユーザーが存在していない                                           PASS (0.06s)
...
ユーザーを更新する
  test_ユーザー名を更新する                                                 PASS (0.00s)

Finished in 0.18120s
11 tests, 13 assertions, 0 failures, 0 errors, 0 skips</programlisting>
</section>
</section>
<section xml:id="_ドメインモデル貧血症">
<title>ドメインモデル貧血症</title>
<simpara>続いて <emphasis role="strong">エンティティ</emphasis> にある <literal>change_name</literal> メソッドに <emphasis role="strong">メソッドの移動</emphasis> を適用して <emphasis role="strong">ドメインサービス</emphasis> に移動するリファクタリング適用してみましょう。</simpara>
<simpara><literal>lib/user.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">class User
  attr_reader :id, :name
  attr_writer :name

  def initialize(user_name:)
    @id = UserId.new(SecureRandom.uuid.to_str)
    @name = user_name
  end

  def eql?(other)
    @id == other.id
  end

  def ==(other)
    other.equal?(self) || other.instance_of?(self.class) &amp;&amp; other.id == id
  end

  def hash
    id.hash
  end
end</programlisting>
<simpara><literal>lib/user_service.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">class UserService
  def exist?(user)
    db = SQLite3::Database.new('sns.db')
    sql = 'SELECT * FROM USERS WHERE name = :name'
    result = db.execute(sql, name: user.name.value)
    !result.empty?
  end

  def change_name(user, name)
    raise if name.nil?

    user.name = name
  end
end</programlisting>
<simpara><literal>test/user_test.rb</literal></simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    def test_ユーザー名を更新する
      service = UserService.new
      service.change_name(@user, UserName.new('Alice'))
      assert_equal 'Alice', @user.name.value
    end
...
    def test_名前を変更した同じユーザー
      service = UserService.new
      service.change_name(@user, UserName.new('Alice'))

      assert @user.eql?(@user)
    end
...</programlisting>
<simpara><emphasis role="strong">メソッドの移動</emphasis> の結果 <emphasis role="strong">エンティティ</emphasis> がスカスカになった上に <emphasis role="strong">値オブジェクト</emphasis> を外部から更新するためのセッターを追加する必要が発生してしまいカプセル化が破壊されてしまう結果となりました。このような <emphasis role="strong">エンティティ</emphasis> の実装は <emphasis role="strong">ドメインモデル貧血症</emphasis> と呼ばれます。このリファクタリングはやりすぎだったようなので変更前に戻しておきましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$git checkout .</programlisting>
</section>
<section xml:id="_リリース_3">
<title>リリース</title>
<section xml:id="_静的コード解析_3">
<title>静的コード解析</title>
<programlisting language="bash" linenumbering="unnumbered">$ rubocop
The following cops were added to RuboCop, but are not configured. Please set Enabled to either `true` or `false` in your `.rubocop.yml` file:
 - Layout/EmptyLinesAroundAttributeAccessor (0.83)
 - Layout/SpaceAroundMethodCallOperator (0.82)
 - Lint/RaiseException (0.81)
 - Lint/StructNewOverride (0.81)
 - Style/ExponentialNotation (0.82)
 - Style/HashEachMethods (0.80)
 - Style/HashTransformKeys (0.80)
 - Style/HashTransformValues (0.80)
 - Style/SlicingWithRange (0.83)
For more information: https://docs.rubocop.org/en/latest/versioning/
Inspecting 7 files
.......

7 files inspected, no offenses detected</programlisting>
</section>
<section xml:id="_コードカバレッジ_3">
<title>コードカバレッジ</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../../images/asciidoc/tdd_itddd/2020060501.png"/>
</imageobject>
<textobject><phrase>2020060501</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_todoリスト_7">
<title>TODOリスト</title>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; ユーザーを管理できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; ユーザーを登録する</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; IDと名前を持ったユーザーを作成する</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が３文字未満の場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名を指定しない場合はエラー</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名が４文字の場合は登録される</simpara>
</listitem>
<listitem>
<simpara>&#10003; IDを指定しない場合はエラー</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10003; ユーザー名を変更できるようにする</simpara>
</listitem>
<listitem>
<simpara>&#10003; ユーザーの同一性を判断できるようにする</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; 識別子を追加する</simpara>
</listitem>
<listitem>
<simpara>&#10003; エンティティの比較のを行う</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10003; ユーザーを重複して登録できないようにする</simpara>
</listitem>
<listitem>
<simpara>&#10003; IDを自動生成する</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="_ファイル構成_3">
<title>ファイル構成</title>
<literallayout class="monospaced">/main.rb
  |--lib/
      |
       -- sns.rb
       -- user.rb
       -- user_id.rb
       -- user_name.rb
       -- user_service.rb
  |--test/
      |
       -- test_helper.rb
       -- user_service_test.rb
       -- user_test.rb</literallayout>
<formalpara>
<title>/main.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered">require './test/user_test.rb'</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/sns.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require './lib/user_id.rb'
require './lib/user_name.rb'
require './lib/user.rb'
require './lib/user_service.rb'
require 'sqlite3'
require 'securerandom'</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/user.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

# User
class User
  attr_reader :id, :name

  def initialize(user_name:)
    @id = UserId.new(SecureRandom.uuid.to_str)
    @name = user_name
  end

  def change_name(name)
    raise if name.nil?

    @name = name
  end

  def eql?(other)
    @id == other.id
  end

  def ==(other)
    other.equal?(self) || other.instance_of?(self.class) &amp;&amp; other.id == id
  end

  def hash
    id.hash
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/user_id.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

# User ID value object
class UserId
  attr_reader :value

  def initialize(value)
    raise if value.nil?

    @value = value
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/user_name.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

# User name value object
class UserName
  attr_reader :value

  def initialize(value)
    raise if value.nil?
    raise 'ユーザー名は3文字以上です。' if value.length &lt; 3

    @value = value
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/user_service.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

# UserService
class UserService
  def exist?(user)
    db = SQLite3::Database.new('sns.db')
    sql = 'SELECT * FROM USERS WHERE name = :name'
    result = db.execute(sql, name: user.name.value)
    !result.empty?
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/test/test_helper.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require 'simplecov'
SimpleCov.start
require 'minitest/reporters'
Minitest::Reporters.use! [Minitest::Reporters::SpecReporter.new(color: true)]
require 'minitest/autorun'</programlisting>
</para>
</formalpara>
<formalpara>
<title>/test/user_service_test.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require './test/test_helper'
require './lib/sns.rb'

class UserServiceTest &lt; Minitest::Test
  describe 'ユーザーの重複を判定する' do
    def setup
      @db = SQLite3::Database.new('sns.db')
      sql = 'CREATE TABLE USERS(id string, name string)'
      @db.execute(sql)

      @service = UserService.new
    end

    def test_登録するユーザーがすでに存在している
      name = UserName.new('Bob')
      user = User.new(user_name: name)

      sql = 'INSERT INTO USERS(id, name) VALUES(:id, :name)'
      @db.execute(sql, id: user.id.value, name: user.name.value)

      assert @service.exist?(user)
    end

    def test_登録するユーザーが存在していない
      name = UserName.new('Alice')
      user = User.new(user_name: name)

      refute @service.exist?(user)
    end

    def teardown
      sql = 'DROP TABLE USERS'
      @db.execute(sql)
      @db.close
    end
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/test/user_test.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require './test/test_helper'
require './lib/sns.rb'


class UserTest &lt; Minitest::Test
  describe 'ユーザーを登録する' do
    def setup
      name = UserName.new('Bob')
      @user = User.new(user_name: name)
    end

    def test_IDと名前を持ったユーザーを作成する
      assert_equal 'Bob', @user.name.value
    end

    def test_ユーザー名が３文字未満の場合はエラー
      e = assert_raises RuntimeError do
        UserName.new('a')
      end

      assert_equal 'ユーザー名は3文字以上です。', e.message
    end

    def test_ユーザー名が４文字の場合は登録される
      user = User.new(user_name: UserName.new('abcd'))
      assert_equal 'abcd', user.name.value
    end

    def test_ユーザー名を指定しない場合はエラー
      assert_raises RuntimeError do
        UserName.new(nil)
      end
    end

    def test_IDを指定しない場合はエラー
      assert_raises RuntimeError do
        UserId.new(nil)
      end
    end
  end

  describe 'ユーザーを更新する' do
    def setup
      name = UserName.new('Bob')
      @user = User.new(user_name: name)
    end

    def test_ユーザー名を更新する
      @user.change_name('Alice')
      assert_equal 'Alice', @user.name
    end
  end

  describe 'ユーザーの同一性を判断する' do
    def setup
      name = UserName.new('Bob')
      @user = User.new(user_name: name)
    end

    def test_同じ名前の異なるユーザー
      name = UserName.new('Bob')
      @user2 = User.new(user_name: name)

      refute @user.eql?(@user2)
    end

    def test_同じ名前の同じユーザー
      assert @user.eql?(@user)
    end

    def test_名前を変更した同じユーザー
      @user.change_name('Alice')

      assert @user.eql?(@user)
    end
  end
end</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_ふりかえり_3">
<title>ふりかえり</title>
<simpara>まず、<emphasis role="strong">ユーザーストーリー</emphasis> から追加の <emphasis role="strong">TODOリスト</emphasis> を作成しました。<?asciidoc-br?>
<emphasis role="strong">TODOリスト</emphasis> の内容を実装するにあたって今回は <emphasis role="strong">仮実装を経て本実装へ</emphasis> のアプローチで作業を進めていきました。</simpara>
<simpara>続いて、 <emphasis role="strong">クラスの抽出</emphasis> で <emphasis role="strong">ドメインサービス</emphasis> を抽出して <emphasis role="strong">エンティティ</emphasis> から対象メソッドを <emphasis role="strong">メソッドの移動</emphasis> で <emphasis role="strong">ドメインサービス</emphasis> に移しました。</simpara>
<simpara>UUIDによる識別子を導入した後 <emphasis role="strong">エンティティ</emphasis> から <emphasis role="strong">メソッドの移動</emphasis> をさらに実施した結果 <emphasis role="strong">ドメインモデル貧血症</emphasis> を起こしてしまったので変更を取り消しました。</simpara>
<simpara>次回は <emphasis role="strong">リポジトリ</emphasis> の実装に取り組んでみたいと思います。</simpara>
</section>
</section>
<section xml:id="_リポジトリ">
<title>リポジトリ</title>

</section>
<section xml:id="_アプリケーションサービス">
<title>アプリケーションサービス</title>

</section>
<section xml:id="_依存関係のコントロール">
<title>依存関係のコントロール</title>

</section>
<section xml:id="_ソフトウェアシステムを組み立てる">
<title>ソフトウェアシステムを組み立てる</title>

</section>
<section xml:id="_ファクトリ">
<title>ファクトリ</title>

</section>
<section xml:id="_データの整合性">
<title>データの整合性</title>

</section>
<section xml:id="_アプリケーションを1から組み立てる">
<title>アプリケーションを1から組み立てる</title>

</section>
<section xml:id="_集約">
<title>集約</title>

</section>
<section xml:id="_仕様">
<title>仕様</title>

</section>
<section xml:id="_アーキテクチャ">
<title>アーキテクチャ</title>

</section>
<section xml:id="_参照">
<title>参照</title>
<section xml:id="_参考サイト">
<title>参考サイト</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://channel9.msdn.com/Events/de-code/2017/DO03?ocid=player">50 分でわかるテスト駆動開発</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_参考図書">
<title>参考図書</title>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&t=k2works0c-22&m=amazon&o=9&p=8&l=as1&IS1=1&detail=1&asins=4274217884&linkId=568f25b974af5645e862928a12c354e1&bc1=ffffff&lt1=_top&fc1=333333&lc1=0066c0&bg1=ffffff&f=ifr"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&t=k2works0c-22&m=amazon&o=9&p=8&l=as1&IS1=1&detail=1&asins=427405019X&linkId=08e705a5969e20f5129b4d3cefbcdb15&bc1=000000&lt1=_top&fc1=333333&lc1=0066c0&bg1=ffffff&f=ifr"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4274224546&linkId=5f857b58e988073ce92e0adcf1dd3ebb"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=479815072X&linkId=7ce522a40e7b96f30b414d57d10c98ee"></iframe>
</section>
</section>
<bibliography xml:id="_references">
<title>References</title>
<itemizedlist>
<listitem>
<simpara>[<anchor xml:id="tdd" xreflabel="1"/>] テスト駆動開発 Kent Beck (著), 和田 卓人 (翻訳):
オーム社; 新訳版 (2017/10/14)</simpara>
</listitem>
<listitem>
<simpara>[<anchor xml:id="rft" xreflabel="2"/>] 新装版 リファクタリング―既存のコードを安全に改善する― (OBJECT TECHNOLOGY SERIES) Martin Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章  (翻訳), その他:
オーム社; 新装版 (2014/7/26)</simpara>
</listitem>
<listitem>
<simpara>[<anchor xml:id="rft2" xreflabel="3"/>] リファクタリング(第2版): 既存のコードを安全に改善する (OBJECT TECHNOLOGY SERIES) Martin Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章 (翻訳), その他:
オーム社; 第2版 (2019/12/1)</simpara>
</listitem>
<listitem>
<simpara>[<anchor xml:id="itddd" xreflabel="4"/>] ドメイン駆動設計入門 ボトムアップでわかる! ドメイン駆動設計の基本 (日本語) 単行本（ソフトカバー） 成瀬 允宣  (著)
翔泳社 (2020/2/13)</simpara>
</listitem>
</itemizedlist>
</bibliography>
</article>