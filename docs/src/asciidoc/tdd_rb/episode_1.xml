<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="5"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>TODOリストから始めるテスト駆動開発</title>
<date>2021-04-01</date>
</info>
<section xml:id="_todoリストから始めるテスト駆動開発">
<title>TODOリストから始めるテスト駆動開発</title>
<section xml:id="_todoリスト">
<title>TODOリスト</title>
<simpara>プログラムを作成するにあたってまず何をすればよいだろうか？私は、まず仕様の確認をして <emphasis role="strong">TODOリスト</emphasis> を作るところから始めます。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>TODOリスト</simpara>
<simpara>何をテストすべきだろうか----着手する前に、必要になりそうなテストをリストに書き出しておこう。</simpara>
</blockquote>
<simpara>仕様</simpara>
<literallayout class="monospaced">1 から 100 までの数をプリントするプログラムを書け。
ただし 3 の倍数のときは数の代わりに｢Fizz｣と、5 の倍数のときは｢Buzz｣とプリントし、
3 と 5 両方の倍数の場合には｢FizzBuzz｣とプリントすること。</literallayout>
<simpara>仕様の内容をそのままプログラムに落とし込むには少しサイズが大きいようですね。なので最初の作業は仕様を <emphasis role="strong">TODOリスト</emphasis> に分解する作業から着手することにしましょう。仕様をどのようにTODOに分解していくかは <link xl:href="https://channel9.msdn.com/Events/de-code/2017/DO03?ocid=player">50 分でわかるテスト駆動開発</link> の26分あたりを参考にしてください。</simpara>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara>数を文字列にして返す</simpara>
</listitem>
<listitem>
<simpara>3 の倍数のときは数の代わりに｢Fizz｣と返す</simpara>
</listitem>
<listitem>
<simpara>5 の倍数のときは｢Buzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>1 から 100 までの数</simpara>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<simpara>まず <literal>数を文字列にして返す</literal> 作業に取り掛かりたいのですがまだプログラミング対象としてはサイズが大きいようですね。もう少し具体的に分割しましょう。</simpara>
<itemizedlist>
<listitem>
<simpara>数を文字列にして返す</simpara>
<itemizedlist>
<listitem>
<simpara>1を渡したら文字列"1"を返す</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>これならプログラムの対象として実装できそうですね。</simpara>
</section>
</section>
<section xml:id="_テストファーストから始めるテスト駆動開発">
<title>テストファーストから始めるテスト駆動開発</title>
<section xml:id="_テストファースト">
<title>テストファースト</title>
<simpara>最初にプログラムする対象を決めたので早速プロダクトコードを実装・・・ではなく <emphasis role="strong">テストファースト</emphasis> で作業を進めていきましょう。まずはプログラムを実行するための準備作業を進める必要がありますね。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>テストファースト</simpara>
<simpara>いつテストを書くべきだろうか----それはテスト対象のコードを書く前だ。</simpara>
</blockquote>
<simpara>では、どうやってテストすればいいでしょうか？テスティングフレームワークを使って自動テストを書きましょう。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>テスト（名詞）
どうやってソフトウェアをテストすればよいだろか----自動テストを書こう。</simpara>
</blockquote>
<simpara>今回Rubyのテスティングフレームワークには <link xl:href="http://docs.seattlerb.org/minitest/">Minitest</link> を利用します。Minitestの詳しい使い方に関しては <emphasis>Minitestの基本</emphasis> <xref linkend="pruby"/>を参照してください。
では、まず以下の内容のテキストファイルを作成して <literal>main.rb</literal> で保存します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/reporters'
Minitest::Reporters.use!
require 'minitest/autorun'

class HelloTest &lt; Minitest::Test
  def test_greeting
    assert_equal 'hello world', greeting
  end
end

def greeting
  'hello world'
end</programlisting>
<simpara>テストを実行します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Traceback (most recent call last):
        2: from main.rb:2:in `&lt;main&gt;'
        1: from /home/gitpod/.rvm/rubies/ruby-2.5.5/lib/ruby/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:54:in `require'
/home/gitpod/.rvm/rubies/ruby-2.5.5/lib/ruby/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:54:in `require': cannot load such file -- minitest/reporters (LoadError)</programlisting>
<simpara>おおっと！いきなりエラーが出てきましたね。でも落ち着いてください。まず最初にやることはエラーメッセージの内容を読むことです。ここでは <literal>require': cannot load such file&#8201;&#8212;&#8201;minitest/reporters (LoadError)</literal> と表示されています。取っ掛かりとしては <link xl:href="https://www.google.com/search?sxsrf=ACYBGNTd6_rVoXXOBo2CHgs5vysIRIJaCQ%3A1579765868950&amp;source=hp&amp;ei=bFApXrCCN4Pg-Aa8v6vABw&amp;q=%60require%27%3A+cannot+load+such+file&amp;oq=%60require%27%3A+cannot+load+such+file&amp;gs_l=psy-ab.3..0l2j0i30l6.1644.1644..2069&#8230;&#8203;2.0..0.116.116.0j1&#8230;&#8203;&#8230;&#8203;0&#8230;&#8203;.2j1..gws-wiz&#8230;&#8203;..10..35i362i39.-RXoHriCPZQ&amp;ved=0ahUKEwiw6Ma7npnnAhUDMN4KHbzfCngQ4dUDCAg&amp;uact=5">エラーメッセージをキーワードに検索をする</link> というのがあります。ちなみにここでは <link xl:href="https://github.com/kern/minitest-reporters">minitest/reporters</link> というGemがインストールされていなかったため読み込みエラーが発生していたようです。サイトのInstallationを参考にGemをインストールしておきましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ gem install minitest-reporters
Fetching minitest-reporters-1.4.2.gem
Fetching ansi-1.5.0.gem
Fetching builder-3.2.4.gem
Successfully installed ansi-1.5.0
Successfully installed builder-3.2.4
Successfully installed minitest-reporters-1.4.2
Parsing documentation for ansi-1.5.0
Installing ri documentation for ansi-1.5.0
Parsing documentation for builder-3.2.4
Installing ri documentation for builder-3.2.4
Parsing documentation for minitest-reporters-1.4.2
Installing ri documentation for minitest-reporters-1.4.2
Done installing documentation for ansi, builder, minitest-reporters after 3 seconds
3 gems installed</programlisting>
<simpara>Gemのインストールが完了したので再度実行してみましょう。今度はうまくいったようですね。Gemって何？と思ったかもしれませんがここではRubyの外部プログラム部品のようなものだと思っておいてください。<literal>minitest-reporters</literal> というのはテスト結果の見栄えを良くするための追加外部プログラムです。先程の作業ではそれを <literal>gem install</literal> コマンドでインストールしたのです。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 9701

  1/1: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00090s
1 tests, 1 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>テストは成功しましたね。では続いてテストを失敗させてみましょう。<literal>hello world</literal> を <literal>hello world!!!</literal> に書き換えてテストを実行してみるとどうなるでしょうか。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
class HelloTest &lt; Minitest::Test
  def test_greeting
    assert_equal 'hello world!!!', greeting
  end
end
...</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 18217

 FAIL["test_greeting", #&lt;Minitest::Reporters::Suite:0x00007f98a59194f8 @name="HelloTest"&gt;, 0.0007280000027094502]
 test_greeting#HelloTest (0.00s)
        Expected: "hello world!!!"
          Actual: "hello world"
        main.rb:11:in `test_greeting'

  1/1: [======================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00101s
1 tests, 1 assertions, 1 failures, 0 errors, 0 skips</programlisting>
<simpara>オッケー、テスティングフレームワークが正常に読み込まれて動作することが確認できました。テストが正常に通るように戻しておきましょう。続いてバージョン管理システムのセットアップをしておきましょう。バージョン管理システム何それ？だって！？君はセーブしないでロールプレイングゲームをクリアできるのか？できないならまず <link xl:href="https://backlog.com/ja/git-tutorial/intro/01/">ここ</link> でGitを使ったバージョン管理の基本を学んでおきましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git init
$ git add .
$ git commit -m 'test: セットアップ'</programlisting>
<simpara>これで <link xl:href="https://t-wada.hatenablog.jp/entry/clean-code-that-works">ソフトウェア開発の三種の神器</link>のうち <emphasis role="strong">バージョン管理</emphasis> と <emphasis role="strong">テスティング</emphasis> の準備が整いましたので <emphasis role="strong">TODOリスト</emphasis> の最初の作業に取り掛かかるとしましょう。</simpara>
</section>
<section xml:id="_仮実装">
<title>仮実装</title>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara>数を文字列にして返す</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">1を渡したら文字列"1"を返す</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>3 の倍数のときは数の代わりに｢Fizz｣と返す</simpara>
</listitem>
<listitem>
<simpara>5 の倍数のときは｢Buzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>1 から 100 までの数</simpara>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">1を渡したら文字列"1"を返す</emphasis> プログラムを <literal>main.rb</literal> に書きましょう。最初に何を書くのかって？ アサーションを最初に書きましょう。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>アサートファースト</simpara>
<simpara>いつアサーションを書くべきだろうか----最初に書こう</simpara>
<itemizedlist>
<listitem>
<simpara>システム構築はどこから始めるべきだろうか。システム構築が終わったらこうなる、というストーリーを語るところからだ。</simpara>
</listitem>
<listitem>
<simpara>機能はどこから書き始めるべきだろうか。コードが書き終わったらこのように動く、というテストを書くところからだ。</simpara>
</listitem>
<listitem>
<simpara>ではテストはどこから書き始めるべきだろうか。それはテストの終わりにパスすべきアサーションを書くところからだ。</simpara>
</listitem>
</itemizedlist>
</blockquote>
<simpara>まず、セットアッププログラムは不要なので削除しておきましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/reporters'
Minitest::Reporters.use!
require 'minitest/autorun'</programlisting>
<simpara>テストコードを書きます。え？日本語でテストケースを書くの？ですかって。開発体制にもよりますが日本人が開発するのであれば無理に英語で書くよりドキュメントとしての可読性が上がるのでテストコードであれば問題は無いと思います。</simpara>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>テストコードを読みやすくするのは、テスト以外のコードを読みやすくするのと同じくらい大切なことだ。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/reporters'
Minitest::Reporters.use!
require 'minitest/autorun'

class FizzBuzzTest &lt; Minitest::Test
  def test_1を渡したら文字列1を返す
    assert_equal '1', FizzBuzz.generate(1)
  end
end</programlisting>
<simpara>テストを実行します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 678

ERROR["test_1を渡したら文字列1を返す", #&lt;Minitest::Reporters::Suite:0x00007f956d8b6870 @name="FizzBuzzTest"&gt;, 0.0006979999998293351]
 test_1を渡したら文字列1を返す#FizzBuzzTest (0.00s)
NameError:         NameError: uninitialized constant FizzBuzzTest::FizzBuzz
        Did you mean?  FizzBuzzTest
            main.rb:10:in `test_1を渡したら文字列1を返す'

  1/1: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00201s
1 tests, 0 assertions, 0 failures, 1 errors, 0 skips</programlisting>
<simpara><literal>NameError:         NameError: uninitialized constant FizzBuzzTest::FizzBuzz</literal> &#8230;&#8203;FizzBuzzが定義されていない。そうですねまだ作ってないのだから当然ですよね。では <literal>FizzBuzz::generate</literal> メソッドを作りましょう。どんな振る舞いを書けばいいのでしょうか？とりあえず最初のテストを通すために <emphasis role="strong">仮実装</emphasis> から始めるとしましょう。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>仮実装を経て本実装へ</simpara>
<simpara>失敗するテストを書いてから、最初に行う実装はどのようなものだろうか----ベタ書きの値を返そう。</simpara>
</blockquote>
<simpara><literal>FizzBuzz</literal> <emphasis role="strong">クラス</emphasis> を定義して <emphasis role="strong">文字列リテラル</emphasis> を返す <literal>FizzBuzz::generate</literal> <emphasis role="strong">クラスメソッド</emphasis> を作成しましょう。ちょっと何言ってるかわからないかもしれませんがとりあえずそんなものだと思って書いてみてください。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
class FizzBuzz
  def self.generate(n)
    '1'
  end
end</programlisting>
<simpara>テストが通ることを確認します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 60122

  1/1: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00094s
1 tests, 1 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>オッケー、これでTODOリストを片付けることができました。え？こんなベタ書きのプログラムでいいの？他に考えないといけないことたくさんあるんじゃない？ばかじゃないの？と思われるかもしませんが、この細かいステップに今しばらくお付き合いいただきたい。</simpara>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara>数を文字列にして返す</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong"><phrase role="line-through">1を渡したら文字列"1"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>3 の倍数のときは数の代わりに｢Fizz｣と返す</simpara>
</listitem>
<listitem>
<simpara>5 の倍数のときは｢Buzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>1 から 100 までの数</simpara>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_三角測量">
<title>三角測量</title>
<simpara>1を渡したら文字列1を返すようにできました。では、2を渡したらどうなるでしょうか？</simpara>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara>数を文字列にして返す</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">1を渡したら文字列"1"を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">2を渡したら文字列"2"を返す</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>3 の倍数のときは数の代わりに｢Fizz｣と返す</simpara>
</listitem>
<listitem>
<simpara>5 の倍数のときは｢Buzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>1 から 100 までの数</simpara>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<programlisting language="ruby" linenumbering="unnumbered">...
class FizzBuzzTest &lt; Minitest::Test
  def test_1を渡したら文字列1を返す
    assert_equal '1', FizzBuzz.generate(1)
  end

  def test_2を渡したら文字列2を返す
    assert_equal '2', FizzBuzz.generate(2)
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 62350

 FAIL["test_2を渡したら文字列2を返す", #&lt;Minitest::Reporters::Suite:0x00007fa4968938d8 @name="FizzBuzzTest"&gt;, 0.0009390000013809185]
 test_2を渡したら文字列2を返す#FizzBuzzTest (0.00s)
        Expected: "2"
          Actual: "1"
        main.rb:17:in `test_2を渡したら文字列2を返す'

  2/2: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00179s
2 tests, 2 assertions, 1 failures, 0 errors, 0 skips</programlisting>
<simpara>テストが失敗しました。それは文字列1しか返さないプログラムなのだから当然ですよね。では1が渡されたら文字列1を返し、2を渡したら文字列2を返すようにプログラムを修正しましょう。 <emphasis role="strong">数値リテラル</emphasis> を <emphasis role="strong">文字列リテラル</emphasis>　に変換する必要があります。公式リファレンスで調べてみましょう。</simpara>
<simpara>Rubyの公式リファレンスは <link xl:href="https://docs.ruby-lang.org/">https://docs.ruby-lang.org/</link> です。 <link xl:href="https://docs.ruby-lang.org/ja/">日本語リファレンス</link> から <link xl:href="https://docs.ruby-lang.org/ja/search/">るりまサーチ</link>を選択してキーワード検索してみましょう。 <link xl:href="https://docs.ruby-lang.org/ja/search/query:%E6%96%87%E5%AD%97%E5%88%97%E3%80%80%E5%A4%89%E6%8F%9B/">文字列 変換</link>キーワードで検索すると <literal>to_s</literal> というキーワードが出てきました。今度は <link xl:href="https://docs.ruby-lang.org/ja/search/query:to_s/">to_s</link> で検索すると色々出てきました、どうやら <literal>to_s</literal> を使えばいいみたいですね。</simpara>
<simpara>ちなみに検索エンジンから <link xl:href="https://www.google.com/search?hl=ja&amp;sxsrf=ACYBGNRISq_mMHcQ1nGzgT3k_igW82f1Sg%3A1579494685196&amp;source=hp&amp;ei=HS0lXqnSCeeumAXN5ZigCg&amp;q=Ruby+%E6%96%87%E5%AD%97%E5%88%97%E3%80%80%E5%A4%89%E6%8F%9B&amp;oq=Ruby+%E6%96%87%E5%AD%97%E5%88%97%E3%80%80%E5%A4%89%E6%8F%9B&amp;gs_l=psy-ab.3..0i4i37l2j0i8i30l6.1386.6456..6820&#8230;&#8203;2.0..0.139.2322.1j20&#8230;&#8203;&#8230;&#8203;0&#8230;&#8203;.1..gws-wiz&#8230;&#8203;&#8230;&#8203;.0i131i4j0i4j0i131j35i39j0j0i8i4i30.FfEPbOjPZcw&amp;ved=0ahUKEwjp1IidrJHnAhVnF6YKHc0yBqQQ4dUDCAg&amp;uact=5">Ruby 文字列 変換</link>で検索してもいろいろ出てくるのですがすべてのサイトが必ずしも正確な説明をしているまたは最新のバージョンに対応しているとは限らないので始めは公式リファレンスや市販の書籍から調べる癖をつけておきましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
class FizzBuzz
  def self.generate(n)
    n.to_s
  end
end</programlisting>
<simpara>テストを実行します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 42479

  2/2: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00098s
2 tests, 2 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>テストが無事通りました。このように２つ目のテストによって <literal>FizzBuzz::generate</literal> メソッドの一般化を実現することができました。このようなアプローチを <emphasis role="strong">三角測量</emphasis> と言います。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>三角測量</simpara>
<simpara>テストから最も慎重に一般化を引き出すやり方はどのようなものだろうか----２つ以上の例があるときだけ、一般化を行うようにしよう。</simpara>
</blockquote>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong"><phrase role="line-through">数を文字列にして返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">1を渡したら文字列"1"を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">2を渡したら文字列"2"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>3 の倍数のときは数の代わりに｢Fizz｣と返す</simpara>
</listitem>
<listitem>
<simpara>5 の倍数のときは｢Buzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>1 から 100 までの数</simpara>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<simpara>たかが <emphasis role="strong">数を文字列にして返す</emphasis> プログラムを書くのにこんなに細かいステップを踏んでいくの？と思ったかもしれません。プログラムを書くということは細かいステップを踏んで行くことなのです。そして、細かいステップを踏み続けることが大切なことなのです。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>TDDで大事なのは、細かいステップを踏むことではなく、細かいステップを踏み続けられるようになることだ。</simpara>
</blockquote>
<simpara>あと、テストケースの内容がアサーション一行ですがもっと検証するべきことがあるんじゃない？と思うでしょう。検証したいことがあれば独立したテストケースを追加しましょう。このような書き方はよろしくありません。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def test_数字を渡したら文字列を返す
    assert_equal '1', FizzBuzz.generate(1)
    assert_equal '2', FizzBuzz.generate(2)
    assert_equal '3', FizzBuzz.generate(3)
    assert_equal '4', FizzBuzz.generate(4)
    assert_equal '5', FizzBuzz.generate(5)
  end
...</programlisting>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>テストの本質というのは、「こういう状況と入力から、こういう振る舞いと出力を期待する」のレベルまで要約できる。</simpara>
</blockquote>
<simpara>ここで一段落ついたので、これまでの作業内容をバージョン管理システムにコミットしておきましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'test: 数を文字列にして返す'</programlisting>
</section>
</section>
<section xml:id="_リファクタリングから始めるテスト駆動開発">
<title>リファクタリングから始めるテスト駆動開発</title>
<section xml:id="_リファクタリング">
<title>リファクタリング</title>
<simpara>ここでテスト駆動開発の流れを確認しておきましょう。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<orderedlist numeration="arabic">
<listitem>
<simpara>レッド：動作しない、おそらく最初のうちはコンパイルも通らないテストを１つ書く。</simpara>
</listitem>
<listitem>
<simpara>グリーン:そのテストを迅速に動作させる。このステップでは罪を犯してもよい。</simpara>
</listitem>
<listitem>
<simpara>リファクタリング:テストを通すために発生した重複をすべて除去する。</simpara>
</listitem>
</orderedlist>
<simpara>レッド・グリーン・リファクタリング。それがTDDのマントラだ。</simpara>
</blockquote>
<simpara>コードはグリーンの状態ですが <emphasis role="strong">リファクタリング</emphasis> を実施していませんね。重複を除去しましょう。</simpara>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>リファクタリング(名詞) 外部から見たときの振る舞いを保ちつつ、理解や修正が簡単になるように、ソフトウェアの内部構造を変化させること。</simpara>
</blockquote>
<blockquote>
<attribution>
リファクタリング(第2版
</attribution>
<simpara>リファクタリングする(動詞) 一連のリファクタリングを適用して、外部から見た振る舞いの変更なしに、ソフトウェアを再構築すること。</simpara>
</blockquote>
<section xml:id="_メソッドの抽出">
<title>メソッドの抽出</title>
<simpara>テストコードを見てください。テストを実行するにあたって毎回前準備を実行する必要があります。こうした処理は往々にして同じ処理を実行するものなので <emphasis role="strong">メソッドの抽出</emphasis> を適用して重複を除去しましょう。</simpara>
<blockquote>
<attribution>
新装版 リファクタリング
</attribution>
<simpara>メソッドの抽出</simpara>
<simpara>ひとまとめにできるコードの断片がある。</simpara>
<simpara>コードの断片をメソッドにして、それを目的を表すような名前をつける。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzzTest &lt; Minitest::Test
  def test_1を渡したら文字列1を返す
    assert_equal '1', FizzBuzz.generate(1)
  end

  def test_2を渡したら文字列2を返す
    assert_equal '2', FizzBuzz.generate(2)
  end
end</programlisting>
<simpara>テストフレームワークでは前処理にあたる部分を実行する機能がサポートされています。Minitestでは <literal>setup</literal> メソッドがそれに当たるので <literal>FizzBuzz</literal> オブジェクトを共有して共通利用できるようにしてみましょう。ここでは <emphasis role="strong">インスタンス変数</emphasis> に <literal>FizzBuzz</literal> <emphasis role="strong">クラス</emphasis> の参照を <emphasis role="strong">代入</emphasis> して各テストメソッドで共有できるようにしました。ちょっと何言ってるかわからないかもしれませんがここではそんなことをやってるぐらいのイメージで大丈夫です。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzzTest &lt; Minitest::Test
  def setup
    @fizzbuzz = FizzBuzz
  end

  def test_1を渡したら文字列1を返す
    assert_equal '1', @fizzbuzz.generate(1)
  end

  def test_2を渡したら文字列2を返す
    assert_equal '2', @fizzbuzz.generate(2)
  end
end</programlisting>
<simpara>テストプログラムを変更してしまいましたが壊れていないでしょうか？確認するにはどうすればいいでしょう？
テストを実行して確認すればいいですよね。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 33356

  2/2: [======================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00083s
2 tests, 2 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>オッケー、前回コミットした時と同じグリーンの状態のままですよね。区切りが良いのでここでコミットしておきましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'refactor: メソッドの抽出'</programlisting>
</section>
<section xml:id="_変数名の変更">
<title>変数名の変更</title>
<simpara>もう一つ気になるところがあります。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
class FizzBuzz
  def self.generate(n)
    n.to_s
  end
end</programlisting>
<simpara>引数の名前が <literal>n</literal> ですね。コンピュータにはわかるかもしれませんが人間が読むコードとして少し不親切です。特にRubyのような動的言語では型が明確に定義されないのでなおさらです。ここは <emphasis role="strong">変数名の変更</emphasis> を適用して人間にとって読みやすいコードにリファクタリングしましょう。</simpara>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>コンパイラがわかるコードは誰にでも書ける。すぐれたプログラマは人間にとってわかりやすいコードを書く。</simpara>
</blockquote>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>名前は短いコメントだと思えばいい。短くてもいい名前をつければ、それだけ多くの情報を伝えることができる。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">...
class FizzBuzz
  def self.generate(number)
    number.to_s
  end
end</programlisting>
<simpara>続いて、変更で壊れていないかを確認します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 33356

  2/2: [======================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00083s
2 tests, 2 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>オッケー、この時点でテストコードとプロダクトコードを変更しましたがその変更はすでに作成した自動テストによって壊れていないことを簡単に確認することができました。え、こんな簡単な変更でプログラムが壊れるわけないじゃん、ドジっ子なの？ですって。残念ながら私は絶対ミスしない完璧な人間ではないし、どちらかといえば注意力の足りないプログラマなのでこんな間違いも普通にやらかします。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
class FizzBuzz
  def self.generate(number)
    numbr.to_s
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 59453

ERROR["test_1を渡したら文字列1を返す", #&lt;Minitest::Reporters::Suite:0x0000564f6b1dfc70 @name="FizzBuzzTest"&gt;, 0.001019135997921694]
 test_1を渡したら文字列1を返す#FizzBuzzTest (0.00s)
NameError:         NameError: undefined local variable or method `numbr' for FizzBuzz:Class
        Did you mean?  number
            main.rb:21:in `generate'
            main.rb:11:in `test_1を渡したら文字列1を返す'

ERROR["test_2を渡したら文字列2を返す", #&lt;Minitest::Reporters::Suite:0x0000564f6b1985f0 @name="FizzBuzzTest"&gt;, 0.003952859999117209]
 test_2を渡したら文字列2を返す#FizzBuzzTest (0.00s)
NameError:         NameError: undefined local variable or method `numbr' for FizzBuzz:Class
        Did you mean?  number
            main.rb:21:in `generate'
            main.rb:15:in `test_2を渡したら文字列2を返す'

  2/2: [====================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00746s
2 tests, 0 assertions, 0 failures, 2 errors, 0 skips</programlisting>
<simpara>最初にプロダクトコードを書いて一通りの機能を作ってから動作を確認する進め方だとこの手の間違いはいつどこで作り込んだのかわからなくなるため原因の調査に時間がかかり残念な経験をしたドジっ子プログラマは変更なんてするもんじゃないと思いコードを変更することに不安を持つようになるでしょう。でも、テスト駆動開発ならそんなドジっ子プログラマでも自動テストと小さなステップのおかげで上記のようなしょうもない間違いもすぐに見つけてすぐに対応することができるのでコードを変更する勇気を持つことができるのです。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>テスト駆動開発は、プログラミング中の不安をコントロールする手法だ。</simpara>
</blockquote>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>リファクタリングでは小さなステップでプログラムを変更していく。そのため間違ってもバグを見つけるのは簡単である。</simpara>
</blockquote>
<simpara>このグリーンの状態にいつでも戻れるようにコミットして次の <emphasis role="strong">TODOリスト</emphasis> の内容に取り掛かるとしましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'refactor: 変数名の変更'</programlisting>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>リファクタリングが成功するたびにコミットしておけば、たとえ壊してしまったとしても、動いていた状態に戻すことができます。変更をコミットしておき、意味のある単位としてまとまってから、共有のリポジトリに変更をプッシュすればよいのです。</simpara>
</blockquote>
</section>
</section>
<section xml:id="_明白な実装">
<title>明白な実装</title>
<simpara>次は <emphasis role="strong">3を渡したら文字列"Fizz"</emphasis> を返すプログラムに取り組むとしましょう。</simpara>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">数を文字列にして返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">1を渡したら文字列"1"を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">2を渡したら文字列"2"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>3 の倍数のときは数の代わりに｢Fizz｣と返す</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">3を渡したら文字列"Fizz"を返す</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>5 の倍数のときは｢Buzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>1 から 100 までの数</simpara>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<simpara>まずは、<emphasis role="strong">テストファースト</emphasis> <emphasis role="strong">アサートファースト</emphasis> で小さなステップで進めていくんでしたよね。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def test_3を渡したら文字列Fizzを返す
    assert_equal 'Fizz', @fizzbuzz.generate(3)
  end
...</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 7095

 FAIL["test_3を渡したら文字列Fizzを返す", #&lt;Minitest::Reporters::Suite:0x00007fbadf865f50 @name="FizzBuzzTest"&gt;, 0.017029999995429534]
 test_3を渡したら文字列Fizzを返す#FizzBuzzTest (0.02s)
        --- expected
        +++ actual
        @@ -1 +1,3 @@
        -"Fizz"
        +# encoding: US-ASCII
        +#    valid: true
        +"3"
        main.rb:19:in `test_3を渡したら文字列Fizzを返す'

  3/3: [======================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.05129s
3 tests, 3 assertions, 1 failures, 0 errors, 0 skips</programlisting>
<simpara>さて、失敗するテストを書いたので次はテストを通すためのプロダクトコードを書くわけですがどうしましょうか？　<emphasis role="strong">仮実装</emphasis>　でベタなコードを書きますか？実現したい振る舞いは <literal>もし3を渡したらならば文字列Fizzを返す</literal> です。英語なら <literal>If number is 3, result is Fizz</literal> といったところでしょうか。ここは <emphasis role="strong">明白な実装</emphasis> で片付けた方が早いでしょう。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>明白な実装</simpara>
<simpara>シンプルな操作を実現するにはどうすればいいだろうか----そのまま実装しよう。</simpara>
<simpara>仮実装や三角測量は、細かく細かく刻んだ小さなステップだ。だが、ときには実装をどうすべきか既に見えていることが。
そのまま進もう。例えば先ほどのplusメソッドくらいシンプルなものを仮実装する必要が本当にあるだろうか。
普通は、その必要はない。頭に浮かんだ明白な実装をただ単にコードに落とすだけだ。もしもレッドバーが出て驚いたら、あらためてもう少し歩幅を小さくしよう。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    number.to_s
  end
end</programlisting>
<simpara>ここでは <emphasis role="strong">if式</emphasis> と <emphasis role="strong">演算子</emphasis> を使ってみましょう。なんかプログラムっぽくなってきましたね。
3で割で割り切れる場合はFizzを返すということは <emphasis role="strong">数値リテラル</emphasis> 3で割った余りが0の場合は <emphasis role="strong">文字列リテラル</emphasis> Fizzを返すということなので余りを求める <emphasis role="strong">演算子</emphasis> を調べる必要がありますね。公式リファレンスで <emphasis role="strong">算術演算子</emphasis> をキーワードで検索したところ <link xl:href="https://docs.ruby-lang.org/ja/search/query:%E7%AE%97%E8%A1%93%E6%BC%94%E7%AE%97%E5%AD%90/">いろいろ</link>出てきました。 <link xl:href="https://docs.ruby-lang.org/ja/search/query:%E7%AE%97%E8%A1%93%E6%BC%94%E7%AE%97%E5%AD%90/query:%25/">%</link>を使えばいいみたいですね。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number % 3 == 0
       result = 'Fizz'
    end
    result
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 37722

  3/3: [===========================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00256s
3 tests, 3 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>テストがグリーンになったのでコミットしておきます。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'test: 3を渡したら文字列Fizzを返す'</programlisting>
<section xml:id="_アルゴリズムの置き換え">
<title>アルゴリズムの置き換え</title>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">数を文字列にして返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">1を渡したら文字列"1"を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong"><phrase role="line-through">2を渡したら文字列"2"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">3 の倍数のときは数の代わりに｢Fizz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">3を渡したら文字列"Fizz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>5 の倍数のときは｢Buzz｣と返す</simpara>
<itemizedlist>
<listitem>
<simpara>5を渡したら文字列"Buzz"を返す</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>1 から 100 までの数</simpara>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number % 3 == 0
       result = 'Fizz'
    end
    result
  end
end</programlisting>
<simpara>レッド・グリーンときたので次はリファクタリングですね。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number.modulo(3).zero?
       result = 'Fizz'
    end
    result
  end
end</programlisting>
<simpara>ここでは <emphasis role="strong">アルゴリズムの置き換え</emphasis> を適用します。 <emphasis role="strong">メソッドチェーンと述語メソッド</emphasis> を使ってRubyらしい書き方にリファクタリングしてみました。</simpara>
<blockquote>
<attribution>
新装版 リファクタリング
</attribution>
<simpara>アルゴリズムの取り替え</simpara>
<simpara>アルゴリズムをよりわかりやすいものに置き換えたい。</simpara>
<simpara>メソッドの本体を新たなアルゴリズムで置き換える。</simpara>
</blockquote>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>メソッドチェーンは言葉の通り、メソッドを繋げて呼び出す方法です。</simpara>
</blockquote>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>述語メソッドとはメソッド名の末尾に「？」をつけたメソッドのことを指します。</simpara>
</blockquote>
<simpara>リファクタリングによりコードが壊れていないかを確認したらコミットしておきましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 42180

  3/3: [===========================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00501s
3 tests, 3 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'refactor: アルゴリズムの置き換え'</programlisting>
<simpara>だんだんとリズムに乗ってきました。ここはギアを上げて <emphasis role="strong">明白な実装</emphasis> で引き続き <emphasis role="strong">TODOリスト</emphasis> の内容を片付けていきましょう。</simpara>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">数を文字列にして返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">1を渡したら文字列"1"を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">2を渡したら文字列"2"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">3の倍数のときは数の代わりに｢Fizz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">3を渡したら文字列"Fizz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>5 の倍数のときは｢Buzz｣と返す</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">5を渡したら文字列"Buzz"を返す</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>1 から 100 までの数</simpara>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">テストファースト</emphasis> <emphasis role="strong">アサートファースト</emphasis> で最初に失敗するテストを書いて</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def test_5を渡したら文字列Buzzを返す
    assert_equal 'Buzz', @fizzbuzz.generate(5)
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 46876

 FAIL["test_5を渡したら文字列Buzzを返す", #&lt;Minitest::Reporters::Suite:0x0000560f86b93700 @name="FizzBuzzTest"&gt;, 0.007562776008853689]
 test_5を渡したら文字列Buzzを返す#FizzBuzzTest (0.01s)
        --- expected
        +++ actual
        @@ -1 +1,2 @@
        -"Buzz"
        +# encoding: US-ASCII
        +"5"
        main.rb:23:in `test_5を渡したら文字列Buzzを返す'

  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00849s
4 tests, 4 assertions, 1 failures, 0 errors, 0 skips</programlisting>
<simpara><emphasis role="strong">if/elsif/else式</emphasis> を使って条件分岐を追加しましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number.modulo(3).zero?
       result = 'Fizz'
    end
    result
  end
end</programlisting>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number.modulo(3).zero?
      result = 'Fizz'
    elsif number.modulo(5).zero?
      result = 'Buzz'
    end
    result
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 31468

  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00158s
4 tests, 4 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>テストが通ったのでコミットしておきます。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'test: 5を渡したら文字列Buzzを返す'</programlisting>
</section>
<section xml:id="_メソッドのインライン化">
<title>メソッドのインライン化</title>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">数を文字列にして返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">1を渡したら文字列"1"を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">2を渡したら文字列"2"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">3の倍数のときは数の代わりに｢Fizz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">3を渡したら文字列"Fizz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>5 の倍数のときは｢Buzz｣と返す</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong"><phrase role="line-through">5を渡したら文字列"Buzz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</simpara>
</listitem>
<listitem>
<simpara>1 から 100 までの数</simpara>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzzTest &lt; Minitest::Test
  def setup
    @fizzbuzz = FizzBuzz
  end

  def test_1を渡したら文字列1を返す
    assert_equal '1', @fizzbuzz.generate(1)
  end

  def test_2を渡したら文字列2を返す
    assert_equal '2', @fizzbuzz.generate(2)
  end

  def test_3を渡したら文字列Fizzを返す
    assert_equal 'Fizz', @fizzbuzz.generate(3)
  end

  def test_5を渡したら文字列Buzzを返す
    assert_equal 'Buzz', @fizzbuzz.generate(5)
  end
end</programlisting>
<simpara>まずグループのアウトラインを作ってテストが壊れないかを確認します。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzzTest &lt; Minitest::Test
  describe 'FizzBuzz' do
    describe '三の倍数の場合' do
    end

    describe '五の倍数の場合' do
    end

    describe 'その他の場合' do
    end
  end

  def setup
    @fizzbuzz = FizzBuzz
  end

  def test_1を渡したら文字列1を返す
    assert_equal '1', @fizzbuzz.generate(1)
  end

  def test_2を渡したら文字列2を返す
    assert_equal '2', @fizzbuzz.generate(2)
  end

  def test_3を渡したら文字列Fizzを返す
    assert_equal 'Fizz', @fizzbuzz.generate(3)
  end

  def test_5を渡したら文字列Buzzを返す
    assert_equal 'Buzz', @fizzbuzz.generate(5)
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 39239

  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00195s
4 tests, 4 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>壊れいないことを確認したらセットアップメソッドをまず移動してテストします。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzzTest &lt; Minitest::Test
  describe 'FizzBuzz' do
    def setup
      @fizzbuzz = FizzBuzz
    end

    describe '三の倍数の場合' do
    end

    describe '五の倍数の場合' do
    end

    describe 'その他の場合' do
    end
  end

  def test_1を渡したら文字列1を返す
    assert_equal '1', @fizzbuzz.generate(1)
  end

  def test_2を渡したら文字列2を返す
    assert_equal '2', @fizzbuzz.generate(2)
  end

  def test_3を渡したら文字列Fizzを返す
    assert_equal 'Fizz', @fizzbuzz.generate(3)
  end

  def test_5を渡したら文字列Buzzを返す
    assert_equal 'Buzz', @fizzbuzz.generate(5)
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 53111

ERROR["test_1を渡したら文字列1を返す", #&lt;Minitest::Reporters::Suite:0x00005603cac658f8 @name="FizzBuzzTest"&gt;, 0.0027922230074182153]
 test_1を渡したら文字列1を返す#FizzBuzzTest (0.00s)
NoMethodError:         NoMethodError: undefined method `generate' for nil:NilClass
            main.rb:22:in `test_1を渡したら文字列1を返す'

ERROR["test_3を渡したら文字列Fizzを返す", #&lt;Minitest::Reporters::Suite:0x00005603cac83e98 @name="FizzBuzzTest"&gt;, 0.00590475500212051]
 test_3を渡したら文字列Fizzを返す#FizzBuzzTest (0.01s)
NoMethodError:         NoMethodError: undefined method `generate' for nil:NilClass
            main.rb:30:in `test_3を渡したら文字列Fizzを返す'

ERROR["test_5を渡したら文字列Buzzを返す", #&lt;Minitest::Reporters::Suite:0x00005603cac85ec8 @name="FizzBuzzTest"&gt;, 0.008002811024198309]
 test_5を渡したら文字列Buzzを返す#FizzBuzzTest (0.01s)
NoMethodError:         NoMethodError: undefined method `generate' for nil:NilClass
            main.rb:34:in `test_5を渡したら文字列Buzzを返す'

ERROR["test_2を渡したら文字列2を返す", #&lt;Minitest::Reporters::Suite:0x00005603cac97e20 @name="FizzBuzzTest"&gt;, 0.010200971009908244]
 test_2を渡したら文字列2を返す#FizzBuzzTest (0.01s)
NoMethodError:         NoMethodError: undefined method `generate' for nil:NilClass
            main.rb:26:in `test_2を渡したら文字列2を返す'

  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.01247s
4 tests, 0 assertions, 0 failures, 4 errors, 0 skips</programlisting>
<simpara>テストが失敗しました。これは <emphasis role="strong">インスタンス変数</emphasis> <literal>@fizzbuzz</literal> のスコープから外れたため <literal>FizzBuzz::generate</literal> メソッド呼び出しに失敗したようです。テストメソッドを移動して変数のスコープ範囲に入れましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzzTest &lt; Minitest::Test
  describe 'FizzBuzz' do
    def setup
      @fizzbuzz = FizzBuzz
    end

    describe '三の倍数の場合' do
      def test_3を渡したら文字列Fizzを返す
        assert_equal 'Fizz', @fizzbuzz.generate(3)
      end
    end

    describe '五の倍数の場合' do
      def test_5を渡したら文字列Buzzを返す
        assert_equal 'Buzz', @fizzbuzz.generate(5)
      end
    end

    describe 'その他の場合' do
      def test_1を渡したら文字列1を返す
        assert_equal '1', @fizzbuzz.generate(1)
      end

      def test_2を渡したら文字列2を返す
        assert_equal '2', @fizzbuzz.generate(2)
      end
    end
  end
end</programlisting>
<simpara>すべてのメソッドを移動したら確認しましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 20627

  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00212s
4 tests, 4 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>ここでは、<emphasis role="strong">メソッドのインライン化</emphasis> を適用してしてテストコードを読みやすくすることにしました。テストコードの <emphasis role="strong">自己文書化</emphasis> により動作する仕様書にすることができました。</simpara>
<blockquote>
<attribution>
新装版 リファクタリング
</attribution>
<simpara>メソッドのインライン化</simpara>
<simpara>メソッドの本体が、名前をつけて呼ぶまでもなく明らかである。</simpara>
<simpara>メソッド本体の呼び出し元にインライン化して、メソッドを除去する</simpara>
</blockquote>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>混乱せずに読めるテストコードを目指すなら（コンピュータではなく人のためにテストを書いていることを忘れてはならない）、テストメソッドの長さは３行を目指そう。</simpara>
</blockquote>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>この関数名は「自己文書化」されている。関数名はいろんなところで使用されるのだから、優れたコメントよりも名前のほうが大切だ。</simpara>
</blockquote>
<simpara>テストも無事通るようになったのでコミットしておきます。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'refactor: メソッドのインライン化'</programlisting>
<simpara>さあ、<emphasis role="strong">TODOリスト</emphasis> もだいぶ消化されてきましたね。もうひと踏ん張りです。</simpara>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">数を文字列にして返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">1を渡したら文字列"1"を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">2を渡したら文字列"2"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">3の倍数のときは数の代わりに｢Fizz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">3を渡したら文字列"Fizz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">5 の倍数のときは｢Buzz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">5を渡したら文字列"Buzz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">15を渡したら文字列FizzBuzzを返す</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>1 から 100 までの数</simpara>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<simpara>初めに失敗するテストを書きます。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '三と五の倍数の場合' do
      def test_15を渡したら文字列FizzBuzzを返す
        assert_equal 'FizzBuzz', @fizzbuzz.generate(15)
      end
    end
...</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 16335

 FAIL["test_15を渡したら文字列FizzBuzzを返す", #&lt;Minitest::Reporters::Suite:0x000056344a3be2a8 @name="FizzBuzz::三と五の倍数の場合"&gt;, 0.006737435003742576]
 test_15を渡したら文字列FizzBuzzを返す#FizzBuzz::三と五の倍数の場合 (0.01s)
        Expected: "FizzBuzz"
          Actual: "Fizz"
        main.rb:25:in `test_15を渡したら文字列FizzBuzzを返す'

  5/5: [===========================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.01347s
5 tests, 5 assertions, 1 failures, 0 errors, 0 skips</programlisting>
<simpara>続いて先程と同様に条件分岐を追加しましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number.modulo(3).zero?
      result = 'Fizz'
    elsif number.modulo(5).zero?
      result = 'Buzz'
    elsif number.modulo(15).zero?
      result = 'FizzBuzz'
    end
    result
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 45982

 FAIL["test_15を渡したら文字列FizzBuzzを返す", #&lt;Minitest::Reporters::Suite:0x00007f822c00b2b0 @name="FizzBuzz::三と五の倍数の場合"&gt;, 0.00231200000
0529224]
 test_15を渡したら文字列FizzBuzzを返す#FizzBuzz::三と五の倍数の場合 (0.00s)
        Expected: "FizzBuzz"
          Actual: "Fizz"
        main.rb:25:in `test_15を渡したら文字列FizzBuzzを返す'

  4/4: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00964s
4 tests, 4 assertions, 1 failures, 0 errors, 0 skips</programlisting>
<simpara>おっと、調子に乗って <emphasis role="strong">明白な実装</emphasis> をしていたら怒られてしまいました。ここは一旦ギアを下げて小さなステップで何が問題かを調べることにしましょう。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>明白な実装はセカンドギアだ。頭で考えていることがうまくコードに落とせないときは、ギアを下げる用意をしよう。</simpara>
</blockquote>
<simpara>調べるにあたってコードを頭から読んでもいいのですが、問題が発生したのは <literal>15を渡したら文字列FizzBuzzを返す</literal> テストを追加したあとですよね？ということは原因は追加したコードにあるはずですよね？よって、追加部分をデバッグすれば原因をすぐ発見できると思いませんか？</simpara>
<simpara>今回はRubyのデバッガとしてByebugをインストールして使うことにしましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ gem install byebug</programlisting>
<simpara>インストールが完了したら早速Byebugからプログラムを起動して動作を確認してみましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ byebug main.rb

[1, 10] in /Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/main.rb
=&gt;  1: require 'minitest/reporters'
    2: Minitest::Reporters.use!
    3: require 'minitest/autorun'
    4:
    5: class FizzBuzzTest &lt; Minitest::Test
    6:   describe 'FizzBuzz' do
    7:     def setup
    8:       @fizzbuzz = FizzBuzz
    9:     end
   10:
(byebug)</programlisting>
<simpara>詳しい操作に関しては <link xl:href="https://qiita.com/jnchito/items/5aaf323ab4f24b526a61">printデバッグにさようなら！Ruby初心者のためのByebugチュートリアル</link> を参照してください。</simpara>
<simpara>では、問題の原因を調査するためbyebugメソッドでコード内にブレークポイントを埋め込んでデバッガを実行してみましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '三と五の倍数の場合' do
      def test_15を渡したら文字列FizzBuzzを返す
        require 'byebug'
        byebug
        assert_equal 'FizzBuzz', @fizzbuzz.generate(15)
      end
    end
...</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ byebug main.rb

[1, 10] in /Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/main.rb
=&gt;  1: require 'minitest/reporters'
    2: Minitest::Reporters.use!
    3: require 'minitest/autorun'
    4:
    5: class FizzBuzzTest &lt; Minitest::Test
    6:   describe 'FizzBuzz' do
    7:     def setup
    8:       @fizzbuzz = FizzBuzz
    9:     end
   10:</programlisting>
<simpara>ブレークポイントまで <literal>continue</literal> コマンドで処理を進めます。<literal>continue</literal> コマンドは <literal>c</literal> でもいけます。</simpara>
<programlisting language="bash" linenumbering="unnumbered">(byebug) c
   22:
   23:     describe '三と五の倍数の場合' do
   24:       def test_15を渡したら文字列FizzBuzzを返す
   25:         require 'byebug'
   26:         byebug
=&gt; 27:         assert_equal 'FizzBuzz', @fizzbuzz.generate(15)
   28:       end
   29:     end
   30:
   31:     describe 'その他の場合' do</programlisting>
<simpara>続いて問題が発生した <literal>@fizzbuzz.generate(15)</literal> メソッド内にステップインします。</simpara>
<programlisting language="bash" linenumbering="unnumbered">(byebug) s
   36:   end
   37: end
   38:
   39: class FizzBuzz
   40:   def self.generate(number)
=&gt; 41:     result = number.to_s
   42:     if number.modulo(3).zero?
   43:       result = 'Fizz'
   44:     elsif number.modulo(5).zero?
   45:       result = 'Buzz'</programlisting>
<simpara>引数の <literal>number</literal> は <literal>15</literal> だから <literal>elsif number.modulo(15).zero?</literal> の行で判定されるはず・・・</simpara>
<programlisting language="bash" linenumbering="unnumbered">(byebug) s
   37: end
   38:
   39: class FizzBuzz
   40:   def self.generate(number)
   41:     result = number.to_s
=&gt; 42:     if number.modulo(3).zero?
   43:       result = 'Fizz'
   44:     elsif number.modulo(5).zero?
   45:       result = 'Buzz'
   46:     elsif number.modulo(15).zero?
(byebug) s
   38:
   39: class FizzBuzz
   40:   def self.generate(number)
   41:     result = number.to_s
   42:     if number.modulo(3).zero?
=&gt; 43:       result = 'Fizz'</programlisting>
<simpara>ファッ！？</simpara>
<programlisting language="bash" linenumbering="unnumbered">   44:     elsif number.modulo(5).zero?
   45:       result = 'Buzz'
   46:     elsif number.modulo(15).zero?
   47:       result = 'FizzBuzz'
(byebug) result
"15"
(byebug) q!</programlisting>
<simpara>15は3で割り切れるから最初の判定で処理されますよね。まあ、常にコードに注意を払って頭の中で処理しながらコードを書いていればこんなミスすることは無いのでしょうが私はドジっ子プログラマなので計算機ができることは計算機にやらせて間違いがあれば原因を調べて解決するようにしています。とりあえず、テストを通るようにしておきましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number.modulo(3).zero?
      result = 'Fizz'
      if number.modulo(15).zero?
        result = 'FizzBuzz'
      end
    elsif number.modulo(5).zero?
      result = 'Buzz'
    end
    result
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 24862

  5/5: [===========================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00279s
5 tests, 5 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>テストが通ったのでコミットしておきます。コミットログにバグは残らないのですが作業の合間ではバグを作り込んでいましたよね。でも、テストがすぐに教えてくれるのですぐに修正することができました。結果として私のようなドジっ子プログラマでもバグの無いコードを書いているかのように見えるんですよ。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'test: 15を渡したら文字列FizzBuzzを返す'</programlisting>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>私はテスト駆動開発を長年行っているので、他人にミスを気づかれる前に、自分の誤りを修正できるだけなのだ。</simpara>
</blockquote>
<simpara>先程のコードですが・・・</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number.modulo(3).zero?
      result = 'Fizz'
      if number.modulo(15).zero?
        result = 'FizzBuzz'
      end
    elsif number.modulo(5).zero?
      result = 'Buzz'
    end
    result
  end
end</programlisting>
<simpara><emphasis role="strong">if式</emphasis> の中でさらに <emphasis role="strong">if式</emphasis> をネストしています。いわゆる <emphasis role="strong">コードの不吉な臭い</emphasis> がしますね。ここは仕様の文言にある <literal>3 と 5 両方の倍数の場合には｢FizzBuzz｣とプリントすること。</literal> に沿った記述にするとともにネストした部分をわかりやすくするために <emphasis role="strong">アルゴリズムの置き換え</emphasis> を適用してリファクタリングをしましょう。</simpara>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>ネストの深いコードは理解しにくい。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">...
class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number.modulo(3).zero? &amp;&amp; number.modulo(5).zero?
      result = 'FizzBuzz'
    elsif number.modulo(3).zero?
      result = 'Fizz'
    elsif number.modulo(5).zero?
      result = 'Buzz'
    end
    result
  end
end</programlisting>
<simpara>テストして、</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 48529

  5/5: [===========================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00329s
5 tests, 5 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>コミットです。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'refactor: アルゴリズムの置き換え'</programlisting>
</section>
</section>
<section xml:id="_休憩">
<title>休憩</title>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">数を文字列にして返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">1を渡したら文字列"1"を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">2を渡したら文字列"2"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">3の倍数のときは数の代わりに｢Fizz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">3を渡したら文字列"Fizz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">5 の倍数のときは｢Buzz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">5を渡したら文字列"Buzz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">15を渡したら文字列FizzBuzzを返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis role="strong">1 から 100 までの数</emphasis></simpara>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<simpara>数を引数にして文字列を返す <literal>FizzBuzz::generate</literal> メソッドはできたみたいですね。次のやることは・・・新しいメソッドを追加する必要がありそうです。気分を切り替えるため少し休憩を取りましょう。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>疲れたり手詰まりになったりしたときはどうすればいいだろうか----休憩を取ろう。</simpara>
</blockquote>
<simpara>引き続き <emphasis role="strong">TODOリスト</emphasis> を片付けたいのですが <literal>1から100までの数</literal> を返すプログラムを書かないといけません。3を渡したらFizzのような <emphasis role="strong">リテラル</emphasis> を返すプログラムではなく 1から100までの <emphasis role="strong">配列オブジェクト</emphasis> を返すようなプログラムにする必要がありそうです。<emphasis role="strong">TODOリスト</emphasis> にするとこんな感じでしょうか。</simpara>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara>1 から 100 までの数の配列を返す</simpara>
<itemizedlist>
<listitem>
<simpara>配列の初めは文字列の1を返す</simpara>
</listitem>
<listitem>
<simpara>配列の最後は文字列の100を返す</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<simpara>どうやら <emphasis role="strong">配列オブジェクト</emphasis> を返すプログラムを書かないといけないようですね。え？ <emphasis role="strong">明白な実装</emphasis> の実装イメージがわかない。そんな時はステップを小さくして <emphasis role="strong">仮実装</emphasis> から始めるとしましょう。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>何を書くべきかわかっているときは、明白な実装を行う。わからないときには仮実装を行う。まだ正しい実装が見えてこないなら、三角測量を行う。それでもまだわからないなら、シャワーを浴びに行こう。</simpara>
</blockquote>
</section>
<section xml:id="_学習用テスト">
<title>学習用テスト</title>
<section xml:id="_配列">
<title>配列</title>
<simpara><emphasis role="strong">テストファースト</emphasis> でまずRubyの <emphasis role="strong">配列</emphasis> の振る舞いを確認していきましょう。公式リファレンスによるとRubyでは <link xl:href="https://docs.ruby-lang.org/ja/latest/class/Array.html">Arrayクラスとして定義されている</link>ようですね。空の配列を作るには <literal>[]</literal> (配列リテラル)を使えばいいみたいですね。こんな感じかな？</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '1から100までの数の配列を返す' do
      def test_配列の初めは文字列の1を返す
        result = []
        assert_equal '1', result
      end
    end
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 54004

 FAIL["test_配列の初めは文字列の1を返す", #&lt;Minitest::Reporters::Suite:0x00007fd0fb93d540 @name="FizzBuzz::1から
100までの数の配列を返す"&gt;, 0.0016740000028221402]
 test_配列の初めは文字列の1を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)
        Expected: "1"
          Actual: []
        main.rb:37:in `test_配列の初めは文字列の1を返す'

  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00602s
5 tests, 5 assertions, 1 failures, 0 errors, 0 skips</programlisting>
<simpara>これは同値ではないのはわかりますね。ではこうしたらどうなるでしょうか？</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '1から100までの数の配列を返す' do
      def test_配列の初めは文字列の1を返す
        result = ['1']
        assert_equal '1', result
      end
    end
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 32701

 FAIL["test_配列の初めは文字列の1を返す", #&lt;Minitest::Reporters::Suite:0x00007fb36f096030 @name="FizzBuzz::1から100までの数の配列を返す"&gt;, 0.0018850000014936086]
 test_配列の初めは文字列の1を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)
        Expected: "1"
          Actual: ["1"]
        main.rb:38:in `test_配列の初めは文字列の1を返す'

  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.04383s
5 tests, 5 assertions, 1 failures, 0 errors, 0 skips</programlisting>
<simpara><emphasis role="strong">配列</emphasis> には <link xl:href="https://docs.ruby-lang.org/ja/latest/class/Array.html">要素を操作するメソッドが用意されており</link>内容を色々操作できそうですね。でも、いちいちテストコードを編集してテストを実行させるのも面倒なのでここはデバッガを使ってみましょう。まずブレークポイントを設定して・・・</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '1から100までの数の配列を返す' do
      def test_配列の初めは文字列の1を返す
        require 'byebug'
        byebug
        result = ['1']
        assert_equal '1', result
      end
    end
  end
end</programlisting>
<simpara>デバッガを起動します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ byebug main.rb

[1, 10] in /Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/main.rb
=&gt;  1: require 'minitest/reporters'
    2: Minitest::Reporters.use!
    3: require 'minitest/autorun'
    4:
    5: class FizzBuzzTest &lt; Minitest::Test
    6:   describe 'FizzBuzz' do
    7:     def setup
    8:       @fizzbuzz = FizzBuzz
    9:     end
   10:
(byebug)</programlisting>
<simpara>continueでブレークポイントまで進めます。</simpara>
<programlisting language="bash" linenumbering="unnumbered">(byebug) c
Started with run options --seed 15764

  /0: [=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=-] 0% Time: 00:00:00,  ETA: ??:??:??
[34, 43] in /Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/main.rb
   34:
   35:     describe '1から100までの数の配列を返す' do
   36:       def test_配列の初めは文字列の1を返す
   37:         require 'byebug'
   38:         byebug
=&gt; 39:         result = ['1']
   40:         assert_equal '1', result
   41:       end
   42:     end
   43:   end</programlisting>
<simpara>ステップインして <literal>result</literal> の中身を確認してみましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">(byebug) s

[35, 44] in /Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/main.rb
   35:     describe '1から100までの数の配列を返す' do
   36:       def test_配列の初めは文字列の1を返す
   37:         require 'byebug'
   38:         byebug
   39:         result = ['1']
=&gt; 40:         assert_equal '1', result
   41:       end
   42:     end
   43:   end
   44: end
(byebug) result
["1"]</programlisting>
<simpara>添字を指定して <emphasis role="strong">配列</emphasis> の最初の文字列を確認してみましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">(byebug) result
["1"]
(byebug) result[1]
nil</programlisting>
<simpara>おや？１番目は"1"では無いようですね。<emphasis role="strong">配列</emphasis> は0から始まるので1番目を指定するにはこうします。</simpara>
<programlisting language="bash" linenumbering="unnumbered">(byebug) result
["1"]
(byebug) result[1]
nil
(byebug) result[0]
"1"</programlisting>
<simpara>続いて、複数の文字列から構成される <emphasis role="strong">配列</emphasis> を作ってみましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">(byebug) result = ['1','2','3']
["1", "2", "3"]
(byebug) result[0]
"1"
(byebug) result[2]
"3"</programlisting>
<simpara>ちなみにRubyだとこのように表記することができます。直感的でわかりやすくないですか？</simpara>
<programlisting language="bash" linenumbering="unnumbered">(byebug) result
["1", "2", "3"]
(byebug) result.first
"1"
(byebug) result.last
"3"</programlisting>
<simpara>最後に追加、削除、変更をやってみましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">(byebug) result = ['1','2','3']
["1", "2", "3"]
(byebug) result &lt;&lt; '4'
["1", "2", "3", "4"]
(byebug) result.push('4')
["1", "2", "3", "4", "4"]
(byebug) result.delete_at(3)
"4"
(byebug) result
["1", "2", "3", "4"]
(byebug) result[2] = '30'
"30"
(byebug) result
["1", "2", "30", "4"]</programlisting>
<simpara><emphasis role="strong">配列</emphasis> の振る舞いもだいぶイメージできたのでデバッガを終了させてテストコードを少し変えてみましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">(byebug) q
Really quit? (y/n) y</programlisting>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '1から100までの数の配列を返す' do
      def test_配列の初めは文字列の1を返す
        result = ['1', '2', '3']
        assert_equal '1', result.first
        assert_equal '2', result[1]
        assert_equal '3', result.last
      end
    end
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 39118

  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00186s
5 tests, 7 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara><emphasis role="strong">変数</emphasis> <literal>result</literal> に配列を返すメソッドを作れば良さそうですね。とりあえずメソッド名は今の時点ではあまり考えずに・・・</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '1から100までの数の配列を返す' do
      def test_配列の初めは文字列の1を返す
        result = FizzBuzz.print_1_to_100
        assert_equal '1', result.first
      end
    end
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 19247

ERROR["test_配列の初めは文字列の1を返す", #&lt;Minitest::Reporters::Suite:0x00007faaea925058 @name="FizzBuzz::1から
100までの数の配列を返す"&gt;, 0.0017889999980980065]
 test_配列の初めは文字列の1を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)
NoMethodError:         NoMethodError: undefined method `print_1_to_100' for FizzBuzz:Class
            main.rb:37:in `test_配列の初めは文字列の1を返す'

  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00454s
5 tests, 4 assertions, 0 failures, 1 errors, 0 skips</programlisting>
<simpara>ここまでくれば <emphasis role="strong">仮実装</emphasis> はできますね。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number.modulo(3).zero? &amp;&amp; number.modulo(5).zero?
      result = 'FizzBuzz'
    elsif number.modulo(3).zero?
      result = 'Fizz'
    elsif number.modulo(5).zero?
      result = 'Buzz'
    end
    result
  end

  def self.print_1_to_100
    [1, 2, 3]
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 24564

 FAIL["test_配列の初めは文字列の1を返す", #&lt;Minitest::Reporters::Suite:0x00007fefd8917060 @name="FizzBuzz::1から
100までの数の配列を返す"&gt;, 0.0011969999977736734]
 test_配列の初めは文字列の1を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)
        Expected: "1"
          Actual: 1
        main.rb:38:in `test_配列の初めは文字列の1を返す'

  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00209s
5 tests, 5 assertions, 1 failures, 0 errors, 0 skips</programlisting>
<simpara>ファッ！？、ああ、数字ではなく文字列で返すのだからこうですね。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.print_1_to_100
    ['1', '2', '3']
  end
end</programlisting>
<simpara><emphasis role="strong">%記法</emphasis> を使うとよりRubyらしく書けます。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.print_1_to_100
    %w[1 2 3]
  end
end</programlisting>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>%記法とは、文字列や正規表現などを定義する際に、%を使った特別な書き方をすることでエスケープ文字を省略するなど、可読性を高めることができる記法です。</simpara>
</blockquote>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 42995

  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00195s
5 tests, 5 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara><emphasis role="strong">TODOリスト</emphasis> の１つ目を <emphasis role="strong">仮実装</emphasis> で片づけことができました。ちなみにテストコードを使ってソフトウェアの振る舞いを検証するテクニックを <emphasis role="strong">学習用テスト</emphasis> と言います。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>学習用テスト</simpara>
<simpara>チーム外の誰かが書いたソフトウェアのテストを書くのはどのようなときか----そのソフトウェアの新機能を初めて使う際に書いてみよう。</simpara>
</blockquote>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara>1 から 100 までの数の配列を返す</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong"><phrase role="line-through">配列の初めは文字列の1を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara>配列の最後は文字列の100を返す</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_繰り返し処理">
<title>繰り返し処理</title>
<simpara><literal>FizzBuzz::print_1_to_100</literal> メソッドはまだ最後の要素が検証されていませんね。<emphasis role="strong">三角測量</emphasis> を使って小さなステップで進めていくことにしましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '1から100までの数の配列を返す' do
      def test_配列の初めは文字列の1を返す
        result = FizzBuzz.print_1_to_100
        assert_equal '1', result.first
      end

      def test_配列の最後は文字列の100を返す
        result = FizzBuzz.print_1_to_100
        assert_equal '100', result.last
      end
    end
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 12031

 FAIL["test_配列の最後は文字列の100を返す", #&lt;Minitest::Reporters::Suite:0x00007fccc9828500 @name="FizzBuzz::1から100までの数の配列を返す"&gt;, 0.0018540000019129366]
 test_配列の最後は文字列の100を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)
        Expected: "100"
          Actual: "3"
        main.rb:43:in `test_配列の最後は文字列の100を返す'

  6/6: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.02936s</programlisting>
<simpara>配列は3までなので想定通りテストは失敗します。さて、1から100までの文字列で構成される配列をどうやって作りましょうか？ 先程は <emphasis role="strong">if式</emphasis> を使って <emphasis role="strong">条件分岐</emphasis> をプログラムで実行しました。今回は <emphasis role="strong">繰り返し処理</emphasis> をプログラムで実行する必要がありそうですね。Rubyの繰り返し処理には <emphasis role="strong">for式</emphasis> <emphasis role="strong">while/until/loop</emphasis> などがありますが実際のところ <emphasis role="strong">eachメソッド</emphasis> を使った繰り返し処理が主流です。とはいえ、実際に動かして振る舞いを確認しないとイメージは難しいですよね。 <emphasis role="strong">学習用テスト</emphasis> を書いてもいいのですが今回は <emphasis>irb上で簡単なコードを動かしてみる</emphasis><xref linkend="pruby"/>ことで振る舞いを検証してみましょう。まずコマンドラインで <literal>irb</literal> を起動します。</simpara>
<blockquote>
<attribution>
プロを目指す人のためのRuby入門
</attribution>
<simpara>Rubyにはfor文はあります。ですが、ほとんどのRubyプログラマはfor文を使いません。筆者も5〜6年Rubyを使っていますが、for文を書いたことは一度もありません。Rubyの場合はforのような構文で繰り返し処理をさせるのではなく、配列自身に対して「繰り返せ」という命令を送ります。ここで登場するのがeachメソッドです。</simpara>
</blockquote>
<programlisting language="bash" linenumbering="unnumbered">$ irb
irb(main):001:0&gt;</programlisting>
<simpara>まず先程デバッガで検証した配列の作成をやってみましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">irb(main):001:0&gt; result = %w[1 2 3]
=&gt; ["1", "2", "3"]</programlisting>
<simpara>配列のeachメソッドをつかって配列の中身を繰り返し処理で表示させてみましょう。<literal>p</literal> はプリントメソッドです。</simpara>
<programlisting language="bash" linenumbering="unnumbered">irb(main):003:0&gt; result.each do |n| p n end
"1"
"2"
"3"
=&gt; ["1", "2", "3"]</programlisting>
<simpara>配列の中身を繰り返し処理で取り出す方法はわかりました。あとは100までの配列をどうやって作ればよいのでしょうか？ <literal>['1','2','3'&#8230;&#8203;'100']</literal> と手書きで作りますか？100件ぐらいならまあできなくもないでしょうが1000件,10000件ならどうでしょうか？無理ですね。計算機にやってもらいましょう、調べてみるとRubyには <emphasis role="strong">レンジオブジェクト(Range)</emphasis> というもの用意されいるそうです。説明を読んでもピンと来ないので実際に動作を確認してみましょう。</simpara>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>レンジオブジェクト（範囲オブジェクトとも呼ばれます）はRangeクラスのオブジェクトのことで、「..」や「&#8230;&#8203;」演算子を使って定義します。「1..3」のように定義し、主に整数値や文字列を使って範囲を表現します。</simpara>
</blockquote>
<programlisting language="bash" linenumbering="unnumbered">irb(main):008:0&gt; (1..5).each do |n| p n end
1
2
3
4
5
=&gt; 1..5
irb(main):009:0&gt; (1...5).each do |n| p n end
1
2
3
4</programlisting>
<simpara>100まで表示したいのでこうですね。</simpara>
<programlisting language="bash" linenumbering="unnumbered">irb(main):010:0&gt; (1..100).each do |n| p n end
1
2
3
..
99
100
=&gt; 1..100</programlisting>
<simpara><literal>FizzBuzz::print_1_to_100</literal> <emphasis role="strong">メソッド</emphasis> の <emphasis role="strong">明白な実装</emphasis> イメージができましたか？ <literal>irb</literal> を終了させてプロダクトコードを変更しましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">irb(main):011:0&gt; exit</programlisting>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.print_1_to_100
    result = []
    (1..100).each do |n|
      result &lt;&lt; n
    end
    result
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 38412

 FAIL["test_配列の初めは文字列の1を返す", #&lt;Minitest::Reporters::Suite:0x00007f858480edf8 @name="FizzBuzz::1から
100までの数の配列を返す"&gt;, 0.0012219999989611097]
 test_配列の初めは文字列の1を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)
        Expected: "1"
          Actual: 1
        main.rb:38:in `test_配列の初めは文字列の1を返す'

 FAIL["test_配列の最後は文字列の100を返す", #&lt;Minitest::Reporters::Suite:0x00007f858480c8f0 @name="FizzBuzz::1から100までの数の配列を返す"&gt;, 0.0014040000023669563]
 test_配列の最後は文字列の100を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)
        Expected: "100"
          Actual: 100
        main.rb:43:in `test_配列の最後は文字列の100を返す'

  6/6: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00218s
6 tests, 6 assertions, 2 failures, 0 errors, 0 skips</programlisting>
<simpara>ファッ！？また、やらかしました。文字列に変換しなといけませんね。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.print_1_to_100
    result = []
    (1..100).each do |n|
      result &lt;&lt; n.to_s
    end
    result
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 40179

  6/6: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00196s
6 tests, 6 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>ちなみに、<emphasis>do &#8230;&#8203; endを使う代わりに、{}で囲んでもブロックを作れる</emphasis><xref linkend="pruby"/>のでこのように書き換えることができます。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.print_1_to_100
    result = []
    (1..100).each { |n| result &lt;&lt; n.to_s }
    result
  end
end</programlisting>
<simpara>変更したらテストして確認します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 59102

  7/7: [===========================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00236s
7 tests, 7 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>ここで、一旦コミットしておきましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'test: 1から100までの数を返す'</programlisting>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara>1 から 100 までの数の配列を返す</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の初めは文字列の1を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong"><phrase role="line-through">配列の最後は文字列の100を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_メソッド呼び出し">
<title>メソッド呼び出し</title>
<simpara>1から100までの数の配列を返すメソッドはできました。しかし、このプログラムは1から100までの数を <literal>FizzBuzz::generate</literal> した結果を返すのが正しい振る舞いですよね。 <emphasis role="strong">TODOリスト</emphasis> を追加してテストも追加します。</simpara>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara>1 から 100 までの数の配列を返す</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の初めは文字列の1を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の最後は文字列の100を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">配列の2番めは文字列のFizzを返す</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<programlisting language="ruby" linenumbering="unnumbered">...
      def test_配列の2番目は文字列のFizzを返す
        result = FizzBuzz.print_1_to_100
        assert_equal 'Fizz', result[2]
      end
    end
  end
end</programlisting>
<programlisting language="ruby" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 50411

 FAIL["test_配列の2番目は文字列のFizzを返す", #&lt;Minitest::Reporters::Suite:0x00007fe8a1917dc8 @name="FizzBuzz::1から100までの数の配列を返す"&gt;, 0.01608900000428548]
 test_配列の2番目は文字列のをFizz返す#FizzBuzz::1から100までの数の配列を返す (0.02s)
        --- expected
        +++ actual
        @@ -1 +1,3 @@
        -"Fizz"
        +# encoding: US-ASCII
        +#    valid: true
        +"3"
        main.rb:48:in `test_配列の2番目は文字列のFizzを返す'

  7/7: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.03112s
7 tests, 7 assertions, 1 failures, 0 errors, 0 skips</programlisting>
<simpara>ですよね、ここは <emphasis role="strong">繰り返し処理</emphasis> の中で <literal>FizzBuzz::generate</literal> を呼び出すように変更しましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.print_1_to_100
    result = []
    (1..100).each { |n| result &lt;&lt; generate(n) }
    result
  end
end</programlisting>
<programlisting language="ruby" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 15549

 FAIL["test_配列の最後は文字列の100を返す", #&lt;Minitest::Reporters::Suite:0x00007ff80a907e28 @name="FizzBuzz::1から100までの数の配列を返す"&gt;, 0.001347000004898291]
 test_配列の最後は文字列の100を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)
        Expected: "100"
          Actual: "Buzz"
        main.rb:43:in `test_配列の最後は文字列の100を返す'

  7/7: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00218s
7 tests, 7 assertions, 1 failures, 0 errors, 0 skips</programlisting>
<simpara>新規に追加したテストはパスしたのですが２つ目のテストが失敗しています。これはテストケースが間違っていますね。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
      def test_配列の最後は文字列のBuzzを返す
        result = FizzBuzz.print_1_to_100
        assert_equal 'Buzz', result.last
      end

      def test_配列の2番目は文字列のFizzを返す
        result = FizzBuzz.print_1_to_100
        assert_equal 'Fizz', result[2]
      end
    end
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 21247

  7/7: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00217s
7 tests, 7 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>他のパターンも明記しておきましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '1から100までのFizzBuzzの配列を返す' do
      def test_配列の初めは文字列の1を返す
        result = FizzBuzz.print_1_to_100
        assert_equal '1', result.first
      end

      def test_配列の最後は文字列のBuzzを返す
        result = FizzBuzz.print_1_to_100
        assert_equal 'Buzz', result.last
      end

      def test_配列の2番目は文字列のFizzを返す
        result = FizzBuzz.print_1_to_100
        assert_equal 'Fizz', result[2]
      end

      def test_配列の4番目は文字列のBuzzを返す
        result = FizzBuzz.print_1_to_100
        assert_equal 'Buzz', result[4]
      end

      def test_配列の14番目は文字列のFizzBuzzを返す
        result = FizzBuzz.print_1_to_100
        assert_equal 'FizzBuzz', result[14]
      end
    end
  end
end</programlisting>
<simpara><emphasis role="strong">説明変数</emphasis> への代入が重複しています。ついでに <emphasis role="strong">メソッドの抽出</emphasis> をして重複をなくしておきましょう。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>最初のステップ「準備(Arrange)」は、テスト間で重複しがちだ。それとは対象的に「実行(Act)」「アサート(Assert)」は重複しないことが多い。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '1から100までのFizzBuzzの配列を返す' do
      def setup
        @result = FizzBuzz.print_1_to_100
      end

      def test_配列の初めは文字列の1を返す
        assert_equal '1', @result.first
      end

      def test_配列の最後は文字列のBuzzを返す
        assert_equal 'Buzz', @result.last
      end

      def test_配列の2番目は文字列のFizzを返す
        assert_equal 'Fizz', @result[2]
      end

      def test_配列の4番目は文字列のBuzzを返す
        assert_equal 'Buzz', @result[4]
      end

      def test_配列の14番目は文字列のFizzBuzzを返す
        assert_equal 'FizzBuzz', @result[14]
      end
    end
  end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 17460

  9/9: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00207s
9 tests, 9 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>とりあえず、現時点で仕様を満たすプログラムにはなったみたいですね。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'test: 1から100までのFizzBuzzの配列を返す'</programlisting>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong"><phrase role="line-through">1 から 100 までのFizzBuzzの配列を返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の初めは文字列の1を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の最後は文字列の100を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の2番めは文字列のFizzを返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の4番目は文字列のBuzzを返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の14番目は文字列のFizzBuzzを返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_配列や繰り返し処理の理解">
<title>配列や繰り返し処理の理解</title>
<simpara>まだリファクタリングが残っているのですがその前にRubyの配列メソッドの理解をもう少し深めたいので <emphasis role="strong">学習用テスト</emphasis> を追加しましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzzTest &lt; Minitest::Test
  describe 'FizzBuzz' do
...
  end

  describe '配列や繰り返し処理を理解する' do
    def test_繰り返し処理
      $stdout = StringIO.new
      [1, 2, 3].each { |i| p i * i }
      output = $stdout.string

      assert_equal "1\n" + "4\n" + "9\n", output
    end

    def test_特定の条件を満たす要素だけを配列に入れて返す
      result = [1.1, 2, 3.3, 4].select(&amp;:integer?)
      assert_equal [2, 4], result
    end

    def test_特定の条件を満たす要素だけを配列に入れて返す
      result = [1.1, 2, 3.3, 4].find_all(&amp;:integer?)
      assert_equal [2, 4], result
    end

    def test_特定の条件を満たさない要素だけを配列に入れて返す
      result = [1.1, 2, 3.3, 4].reject(&amp;:integer?)
      assert_equal [1.1, 3.3], result
    end

    def test_新しい要素の配列を返す
      result = %w[apple orange pineapple strawberry].map(&amp;:size)
      assert_equal [5, 6, 9, 10], result
    end

    def test_新しい要素の配列を返す
      result = %w[apple orange pineapple strawberry].collect(&amp;:size)
      assert_equal [5, 6, 9, 10], result
    end

    def test_配列の中から条件に一致する要素を取得する
      result = %w[apple orange pineapple strawberry].find(&amp;:size)
      assert_equal 'apple', result
    end

    def test_配列の中から条件に一致する要素を取得する
      result = %w[apple orange pineapple strawberry].detect(&amp;:size)
      assert_equal 'apple', result
    end

    def test_指定した評価式で並び変えた配列を返す
      assert_equal %w[1 10 13 2 3 4], %w[2 4 13 3 1 10].sort
      assert_equal %w[1 2 3 4 10 13],
                   %w[2 4 13 3 1 10].sort { |a, b| a.to_i &lt;=&gt; b.to_i }
      assert_equal %w[13 10 4 3 2 1],
                   %w[2 4 13 3 1 10].sort { |b, a| a.to_i &lt;=&gt; b.to_i }
    end

    def test_配列の中から条件に一致する要素を取得する
      result = %w[apple orange pineapple strawberry apricot].grep(/^a/)
      assert_equal %w[apple apricot], result
    end

    def test_ブロック内の条件式が真である間までの要素を返す
      result = [1, 2, 3, 4, 5, 6, 7, 8, 9].take_while { |item| item &lt; 6 }
      assert_equal [1, 2, 3, 4, 5], result
    end

    def test_ブロック内の条件式が真である以降の要素を返す
      result = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].drop_while { |item| item &lt; 6 }
      assert_equal [6, 7, 8, 9, 10], result
    end

    def test_畳み込み演算を行う
      result = [1, 2, 3, 4, 5].inject(0) { |total, n| total + n }
      assert_equal 15, result
    end

    def test_畳み込み演算を行う
      result = [1, 2, 3, 4, 5].reduce { |total, n| total + n }
      assert_equal 15, result
    end
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 18136

  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00307s
19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'test: 学習用テスト'</programlisting>
</section>
</section>
<section xml:id="_コードの不吉な臭い">
<title>コードの不吉な臭い</title>
<simpara>終わりが見えてきましたがまだリファクタリングの必要がありそうです。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>開発を終えるまでに考えつくまでに考えつく限りのテストを書き、テストに支えられたリファクタリングが、網羅性のあるテストに支えられてたリファクタリングになるようにしなければならない。</simpara>
</blockquote>
<simpara>ここでプロダクトコードを眺めてみましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number.modulo(3).zero? &amp;&amp; number.modulo(5).zero?
      result = 'FizzBuzz'
    elsif number.modulo(3).zero?
      result = 'Fizz'
    elsif number.modulo(5).zero?
      result = 'Buzz'
    end
    result
  end

  def self.print_1_to_100
    result = []
    (1..100).each { |n| result &lt;&lt; generate(n) }
    result
  end
end</programlisting>
<simpara><emphasis role="strong">コードの不吉な臭い</emphasis> が漂ってきませんか？私が感じた部分を解説していきますね。</simpara>
<section xml:id="_不思議な名前">
<title>不思議な名前</title>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>不思議な名前</simpara>
<simpara>明快なコードにするために最も重要なのは、適切な名前付けです。</simpara>
</blockquote>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>変数や関数などの構成要素の名前は、抽象的ではなく具体的なものにしよう。</simpara>
</blockquote>
<simpara>まず、気になったのが <literal>print_1_to_100</literal> メソッドです。このメソッドはFizzBuzzの配列を返すメソッドであって1から100までを表示するメソッドではありませんよね。ここは <emphasis role="strong">メソッド名の変更</emphasis> を適用して処理の内容に沿った名前に変更しましょう。え？動いている処理をわざわざ変更してプログラムを壊す危険を犯す必要があるのかですって。確かに自動テストのない状況でドジっ子プログラマがそんなことをすればいずれ残念なことになるでしょうね。でも、すでに自動テストが用意されている今なら自信をもって動いている処理でも変更できますよね。</simpara>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>リファクタリングに入る前に、しっかりとした一連のテスト群を用意しておくこと。これらのテストには自己診断機能が不可欠である。</simpara>
</blockquote>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>テストは不安を退屈に変える賢者の石だ。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.print_1_to_100
    result = []
    (1..100).each { |n| result &lt;&lt; generate(n) }
    result
  end
end</programlisting>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.generate_list
    result = []
    (1..100).each { |n| result &lt;&lt; generate(n) }
    result
  end
end</programlisting>
<simpara>変更で壊れていないか確認します。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 47414

ERROR["test_配列の初めは文字列の1を返す", #&lt;Minitest::Reporters::Suite:0x00007fe9e6858108 @name="FizzBuzz::1から
100までのFizzBuzzの配列を返す"&gt;, 0.0023099999998521525]
 test_配列の初めは文字列の1を返す#FizzBuzz::1から100までのFizzBuzzの配列を返す (0.00s)
NoMethodError:         NoMethodError: undefined method `print_1_to_100' for FizzBuzz:Class
            main.rb:37:in `setup'
...

ERROR["test_配列の最後は文字列のBuzzを返す", #&lt;Minitest::Reporters::Suite:0x00007fe9f7097160 @name="FizzBuzz::1から100までのFizzBuzzの配列を返す"&gt;, 0.011574000000109663]
 test_配列の最後は文字列のBuzzを返す#FizzBuzz::1から100までのFizzBuzzの配列を返す (0.01s)
NoMethodError:         NoMethodError: undefined method `print_1_to_100' for FizzBuzz:Class
            main.rb:37:in `setup'

  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.01479s
19 tests, 16 assertions, 0 failures, 5 errors, 0 skips</programlisting>
<simpara>いきなり失敗しちゃいました。でも、焦らずエラーメッセージを読みましょう。
<literal>NoMethodError:         NoMethodError: undefined method `print_1_to_100' for FizzBuzz:Class</literal> メソッド名の変更したけどテストは以前のままでしたね。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '1から100までのFizzBuzzの配列を返す' do
      def setup
        @result = FizzBuzz.print_1_to_100
      end
...</programlisting>
<programlisting language="ruby" linenumbering="unnumbered">...
    describe '1から100までのFizzBuzzの配列を返す' do
      def setup
        @result = FizzBuzz.generate_list
      end
...</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 54699

  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00351s
19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>プロダクトコードは壊れていなことが確認できたので自信を持ってコミットしておきましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'refactor:　メソッド名の変更'</programlisting>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>TDDにおけるテストの考え方は実用主義に貫かれている。TDDにおいてテストは目的を達成するための手段であり、その目的は、大きなる自信を伴うコードだ。</simpara>
</blockquote>
</section>
<section xml:id="_長い関数">
<title>長い関数</title>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>長い関数</simpara>
<simpara>経験上、長く充実した人生を送るのは、短い関数を持ったプログラムです。</simpara>
</blockquote>
<simpara>次に気になったのが <literal>FizzBuzz::generate</literal> メソッド内のif分岐処理ですね。こうした条件分岐には仕様変更の際に追加ロジックが新たなif分岐として追加されてどんどん長くなって読みづらいコードに成長する危険性があります。そういうコードは早めに対策を打っておくのが賢明です。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s
    if number.modulo(3).zero? &amp;&amp; number.modulo(5).zero?
      result = 'FizzBuzz'
    elsif number.modulo(3).zero?
      result = 'Fizz'
    elsif number.modulo(5).zero?
      result = 'Buzz'
    end
    result
  end

  def self.generate_list
    result = []
    (1..100).each { |n| result &lt;&lt; generate(n) }
    result
  end
end</programlisting>
<simpara>まずコードをもう少し読みやすくしましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s

    if number.modulo(3).zero? &amp;&amp; number.modulo(5).zero?
      result = 'FizzBuzz'
    elsif number.modulo(3).zero?
      result = 'Fizz'
    elsif number.modulo(5).zero?
      result = 'Buzz'
    end

    result
  end

  def self.generate_list
    result = []

    (1..100).each { |n| result &lt;&lt; generate(n) }

    result
  end
end</programlisting>
<simpara><literal>FizzBuzz</literal> の <emphasis role="strong">メソッド</emphasis> は大きく分けて <emphasis role="strong">変数</emphasis> の初期化 <emphasis role="strong">条件分岐</emphasis> <emphasis role="strong">繰り返し処理</emphasis> による判断、計算そして結果の <emphasis role="strong">代入</emphasis> を行い最後に <emphasis role="strong">代入</emphasis> された <emphasis role="strong">変数</emphasis> を返す流れになっています。
そこで各単位ごとにスペースを挿入してコードの可読性を上げておきましょう。</simpara>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>人間の脳はグループや階層を１つの単位として考える。コードの概要をすばやく把握してもらうには、このような「単位」を作ればいい。</simpara>
</blockquote>
<simpara>処理の単位ごとに区切りをつけました。次はif分岐ですがこうします。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s

    if number.modulo(3).zero? &amp;&amp; number.modulo(5).zero?
      result = 'FizzBuzz'
    elsif number.modulo(3).zero?
      result = 'Fizz'
    elsif number.modulo(5).zero?
      result = 'Buzz'
    end

    result
  end
...</programlisting>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s

    return 'FizzBuzz' if number.modulo(3).zero? &amp;&amp; number.modulo(5).zero?
    return 'Fizz' if number.modulo(3).zero?
    return 'Buzz' if number.modulo(5).zero?

    result
  end
...</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 62095

  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00296s
19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>条件に該当した場合は処理を最後まで進めずその場で終了させる書き方を <emphasis role="strong">ガード節</emphasis> と言います。このように書くことで追加ロジックが発生しても既存のコードを編集することなく追加することができるので安全に簡単に変更できるコードにすることができます。</simpara>
<blockquote>
<attribution>
新装版 リファクタリング
</attribution>
<simpara>ガード節による入れ子条件記述の置き換え</simpara>
<simpara>メソッド内に正常ルートが不明確な条件つき振る舞いがある。</simpara>
<simpara>特殊ケースすべてに対してガード節を使う。</simpara>
</blockquote>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>関数で複数のreturn文を使ってはいけないと思っている人がいる。アホくさ。関数から早く返すのはいいことだ。むしろ望ましいときもある。</simpara>
</blockquote>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'refactor: ガード節による入れ子条件の置き換え'</programlisting>
<simpara>どの条件にも該当しない場合は数字を文字列してかえすのですが <emphasis role="strong">一時変数</emphasis> の <literal>result</literal> は最後でしか使われていませんね。このような場合は <emphasis role="strong">変数のインライン化</emphasis> を適用しましょう。</simpara>
<blockquote>
<attribution>
新装版 リファクタリング
</attribution>
<simpara>一時変数のインライン化</simpara>
<simpara>簡単な式によって一度だけ代入される一時変数があり、それが他のリファクタリングの障害となっている。</simpara>
<simpara>その一時変数への参照をすべて式で置き換える。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    result = number.to_s

    return 'FizzBuzz' if number.modulo(3).zero? &amp;&amp; number.modulo(5).zero?
    return 'Fizz' if number.modulo(3).zero?
    return 'Buzz' if number.modulo(5).zero?

    result
  end
...</programlisting>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    return 'FizzBuzz' if number.modulo(3).zero? &amp;&amp; number.modulo(5).zero?
    return 'Fizz' if number.modulo(3).zero?
    return 'Buzz' if number.modulo(5).zero?

    number.to_s
  end
...</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 2528

  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00255s
19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>変更によって壊れていないことが確認できたのでコミットします。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'refactor:　変数のインライン化'</programlisting>
<simpara>続いて、FizzBuzzを判定する部分ですがもう少しわかりやすくするため <emphasis role="strong">説明用変数の導入</emphasis> を適用します。</simpara>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>説明用変数の導入</simpara>
<simpara>複雑な式がある。</simpara>
<simpara>その式の結果または部分的な結果を、その目的を説明する名前をつけた一時変数に代入する。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    return 'FizzBuzz' if number.modulo(3).zero? &amp;&amp; number.modulo(5).zero?
    return 'Fizz' if number.modulo(3).zero?
    return 'Buzz' if number.modulo(5).zero?

    number.to_s
  end
...</programlisting>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    is_fizz = number.modulo(3).zero?
    is_buzz = number.modulo(5).zero?

    return 'FizzBuzz' if number.modulo(3).zero? &amp;&amp; number.modulo(5).zero?
    return 'Fizz' if is_fizz
    return 'Buzz' if is_buzz

    number.to_s
  end
...</programlisting>
<simpara>３で割り切れる場合の結果を <literal>isFizz</literal> 変数に 5で割り切れる場合の結果 <literal>isBuzz</literal> 変数に代入して使えるようにしました。このような変数を <emphasis role="strong">説明変数</emphasis> と呼びます。また似たようなパターンに <emphasis role="strong">要約変数</emphasis> というものがあります。FizzBuzzを返す判定部分にこの <emphasis role="strong">説明変数</emphasis> を適用しました。壊れていないか確認しておきましょう。</simpara>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>説明変数</simpara>
<simpara>式を簡単に分割するには、式を表す変数を使えばいい。この変数を「説明変数」と呼ぶこともある。</simpara>
</blockquote>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>要約変数</simpara>
<simpara>大きなコードの塊を小さな名前に置き換えて、管理や把握を簡単にする変数のことを要約変数と呼ぶ。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  def self.generate(number)
    is_fizz = number.modulo(3).zero?
    is_buzz = number.modulo(5).zero?

    return 'FizzBuzz' if is_fizz &amp;&amp; is_buzz
    return 'Fizz' if is_fizz
    return 'Buzz' if is_buzz

    number.to_s
  end
...</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 4314

  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00262s
19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>壊れていませんね。ではコミットしておきましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'refactor:　変数の抽出'</programlisting>
</section>
<section xml:id="_ループと変更可能なデータ">
<title>ループと変更可能なデータ</title>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>ループ</simpara>
<simpara>プログラミング言語の黎明期から、ループは中心的な存在でした。しかし今ではベルボトムのジーンズやペナントのお土産のように、あまり重要でなくなりつつあります。</simpara>
</blockquote>
<simpara><literal>FizzBuzz::generate</literal> メソッドのリファクタリングはできたので続いて <literal>FizzBuzz::generate_list</literal> メソッドを見ていきましょう。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.generate_list
    result = []

    (1..100).each { |n| result &lt;&lt; generate(n) }

    result
  end
end</programlisting>
<simpara>空の <emphasis role="strong">配列</emphasis> を変数に代入してその変数に <literal>FizzBuzz::generate</literal> メソッドの結果を追加して返す処理ですがもしこのような変更をしてしまったらどうなるでしょうか？</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.generate_list
    result = []

    (1..100).each { |n| result &lt;&lt; generate(n) }

    result = []
    result
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 19180

 FAIL["test_配列の14番目は文字列のをFizzBuzz返す", #&lt;Minitest::Reporters::Suite:0x00007fa72805c018 @name="FizzBuzz::1から100までのFizzBuzzの配列を返す"&gt;, 0.0021289999967848416]
 test_配列の14番目は文字列のをFizzBuzz返す#FizzBuzz::1から100までのFizzBuzzの配列を返す (0.00s)
        Expected: "FizzBuzz"
          Actual: nil
        main.rb:57:in `test_配列の14番目は文字列のをFizzBuzz返す'
...

Finished in 0.03063s
19 tests, 21 assertions, 5 failures, 0 errors, 0 sk</programlisting>
<simpara>せっかく作った配列を初期化して返してしまいましたね。このようにミュータブルな変数はバグを作り込む原因となる傾向があります。まず一時変数を使わないように変更しましょう。</simpara>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>変更可能なデータ</simpara>
<simpara>データの変更はしばしば予期せぬ結果や、厄介なバグを引き起こします。</simpara>
</blockquote>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>「永続的に変更されない」変数は扱いやすい。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.generate_list
    return (1..100).each { |n| result &lt;&lt; generate(n) }
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 56578

ERROR["test_配列の4番目は文字列のをBuzz返す", #&lt;Minitest::Reporters::Suite:0x00007fe705854af0 @name="FizzBuzz::1から100までのFizzBuzzの配列を返す"&gt;, 0.001975000002857996]
 test_配列の4番目は文字列のをBuzz返す#FizzBuzz::1から100までのFizzBuzzの配列を返す (0.00s)
NameError:         NameError: undefined local variable or method `result' for FizzBuzz:Class
            main.rb:153:in `block in generate_list'
            main.rb:153:in `each'
            main.rb:153:in `generate_list'
            main.rb:37:in `setup'
...
  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.01032s
19 tests, 16 assertions, 0 failures, 5 errors, 0 skips</programlisting>
<simpara>一時変数 <literal>result</literal> は使わないので</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.generate_list
    return (1..100).each { |n| generate(n) }
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 35137

ERROR["test_配列の4番目は文字列のをBuzz返す", #&lt;Minitest::Reporters::Suite:0x00007f7f1384ff78 @name="FizzBuzz::1から100までのFizzBuzzの配列を返す"&gt;, 0.0014560000017809216]
 test_配列の4番目は文字列のをBuzz返す#FizzBuzz::1から100までのFizzBuzzの配列を返す (0.00s)
NoMethodError:         NoMethodError: undefined method `[]' for 1..100:Range
            main.rb:53:in `test_配列の4番目は文字列のをBuzz返す'
...
  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.03285s
19 tests, 18 assertions, 2 failures, 3 errors, 0 skips</programlisting>
<simpara>結果を配列にして返したいのですが <emphasis role="strong">eachメソッド</emphasis> ではうまくできませんね。Rubyには新しい配列を作成する <emphasis role="strong">mapメソッド</emphasis> が用意されいるのでそちらを使いましょう。</simpara>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>mapは配列の要素を画する際によく利用されるメソッドで、ブロックの最後の要素（メモ）で新しい配列を作ります。</simpara>
</blockquote>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.generate_list
    return (1..100).map { |n| generate(n) }
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered"> $ ruby main.rb
Started with run options --seed 44043

  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00261s
19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>うまくいきましたね。あと、Rubyではreturnを省略できるので</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.generate_list
    (1..100).map { |n| generate(n) }
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 7994

  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00238s</programlisting>
<simpara><emphasis role="strong">パイプラインによるループの置き換え</emphasis> の適用により <emphasis role="strong">eachメソッド</emphasis> による繰り返し処理を <emphasis role="strong">mapメソッド</emphasis> を使ったイミュータブルなコレクションパイプライン処理に変えることができました。</simpara>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>パイプラインによるループの置き換え</simpara>
<simpara>多くのプログラマと同様に、私もオブジェクトの集合の反復処理にはループを使うように教えられました。しかし言語環境は、よりすぐれた仕組みとしてコレクションのパイプラインを提供するようになりました。</simpara>
</blockquote>
<blockquote>
<attribution>
プロを目指す人のためのRuby入門
</attribution>
<simpara>Rubyに限らず、プログラミングの世界ではしばしばミュータブル（mutable)とイミュータブル（imutable）と言う言葉が登場します。ミュータブルは「変更可能な」という意味で、反対にイミュータブルは「変更できない、不変の」という意味です。</simpara>
</blockquote>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'refactor: パイプラインによるループの置き換え'</programlisting>
</section>
<section xml:id="_マジックナンバー">
<title>マジックナンバー</title>
<simpara>最大値は100にしていますが変更することもあるので <emphasis role="strong">マジックナンバーの置き換え</emphasis> を適用してわかりやすくしておきましょう。</simpara>
<blockquote>
<attribution>
新装版 リファクタリング
</attribution>
<simpara>シンボル定数によるマジックナンバーの置き換え</simpara>
<simpara>特別な意味を持った数字のリテラルがある。</simpara>
<simpara>定数を作り、それにふさわしい名前をつけて、そのリテラルを置き換える。</simpara>
</blockquote>
<simpara>Rubyでは定数は英字の大文字で始まる名前をつけると自動的に定数として扱われます。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">class FizzBuzz
  MAX_NUMBER = 100

...

  def self.generate_list
    (1..MAX_NUMBER).map { |n| generate(n) }
  end
end</programlisting>
<simpara>意味のわかる定数として宣言しました。コードに直接記述された <literal>100</literal> をといった <emphasis role="strong">数値:リテラル</emphasis> はマジックナンバーと呼ばれ往々にして後で何を意味するものかわからなくなり変更を難しくする原因となります。早めに意味を表す定数にしておきましょう。</simpara>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>名前付けされずにプログラム内に直接記述されている数値をマジックナンバーと呼び、一般的には極力避けるようにします。</simpara>
</blockquote>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>いい名前というのは、変数の目的や値を表すものだ。</simpara>
</blockquote>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
Started with run options --seed 32408

  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00241s
19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>テストは通りました。でもこのコードは初見の人には分かりづらいのでコメントを入れておきましょう。Rubyの <emphasis role="strong">単一行コメントアウト</emphasis> のやり方は行頭に <literal>#</literal> を使います。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">...
  def self.generate_list
    # 1から最大値までのFizzBuzz配列を1発で作る
    (1..MAX_NUMBER).map { |n| generate(n) }
  end
end</programlisting>
<simpara>ここではなぜこのような処理を選択したかをコメントしましたが何でもコメントすればよいというわけではありません。</simpara>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>コメント</simpara>
<simpara>ここでコメントについて言及しているのは、コメントが消臭剤として使われることがあるからです。コメントが非常に丁寧に書かれているのは、実はわかりにくいコードを補うためだったとうことがよくあるのです。</simpara>
</blockquote>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>コメントを書くのであれば、正確に書くべきだ（できるだけ明確で詳細に）。また、コメントには画面の領域を取られるし、読むのにも時間がかかるので、簡潔なものでなければいけない。</simpara>
</blockquote>
<programlisting language="bash" linenumbering="unnumbered">$ git add main.rb
$ git commit -m 'refactor: マジックナンバーの置き換え'</programlisting>
</section>
</section>
<section xml:id="_動作するきれいなコード">
<title>動作するきれいなコード</title>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">数を文字列にして返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">1を渡したら文字列"1"を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">2を渡したら文字列"2"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">3の倍数のときは数の代わりに｢Fizz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">3を渡したら文字列"Fizz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">5 の倍数のときは｢Buzz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">5を渡したら文字列"Buzz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">13 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">15を渡したら文字列FizzBuzzを返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">1 から 100 までのFizzBuzzの配列を返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の初めは文字列の1を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の最後は文字列の100を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の2番めは文字列のFizzを返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の4番目は文字列のBuzzを返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の14番目は文字列のFizzBuzzを返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>プリントする</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">TODOリスト</emphasis> も残すところあと１つとなりました。これまで <literal>main.rb</literal> ファイル１つだけで開発を行ってきましたがリリースするにはもうひと手間かけたほうがいいでしょうね。libディレクトリを作成したあと <literal>main.rb</literal> ファイルを <literal>fizz_buzz.rb</literal> ファイルに名前を変更してlibディレクトリに移動します。</simpara>
<literallayout class="monospaced">/
|--lib/
    |
     -- fizz_buzz.rb</literallayout>
<simpara>続いてテストコードをテストディレクトリに保存してプログラム本体とテストコードを分離します</simpara>
<literallayout class="monospaced">/
|--lib/
    |
     -- fizz_buzz.rb
|--test/
    |
     -- fizz_buzz_test.rb</literallayout>
<simpara>分離したテストが動くか確認しておきましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/fizz_buzz_test.rb
Started with run options --seed 17134

ERROR["test_1を渡したら文字列1を返す", #&lt;Minitest::Reporters::Suite:0x00007fc07a085060 @name="FizzBuzz::その他の場合"&gt;, 0.001282999997783918]
 test_1を渡したら文字列1を返す#FizzBuzz::その他の場合 (0.00s)
NameError:         NameError: uninitialized constant FizzBuzzTest::FizzBuzz
        Did you mean?  FizzBuzzTest
            test/fizz_buzz_test.rb:8:in `setup'
...
  19/19: [===============================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.03717s
19 tests, 12 assertions, 0 failures, 9 errors, 0 skips</programlisting>
<simpara>テストファイルからFizzBuzzクラスを読み込めるようにする必要があります。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/reporters'
Minitest::Reporters.use!
require 'minitest/autorun'
require './lib/fizz_buzz'

class FizzBuzzTest &lt; Minitest::Test
...</programlisting>
<simpara>Rubyで別のファイルを読み込むには <emphasis role="strong">require</emphasis> を使います。</simpara>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>requireを使う用途は主に三つあります。</simpara>
<itemizedlist>
<listitem>
<simpara>標準添付ライブラリを読み込む</simpara>
</listitem>
<listitem>
<simpara>第三者が作成しているライブラリを読み込む</simpara>
</listitem>
<listitem>
<simpara>別ファイルに定義した自分のファイルを読み込む</simpara>
</listitem>
</itemizedlist>
</blockquote>
<simpara>また、<emphasis role="strong">require_relative</emphasis> という方法も用意されています。どう違うのでしょうか？</simpara>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>require_relativeは$LOAD_PATHの参照は行わず「relative」という名称の通り相対的なパスでファイルの読み込みを行います。</simpara>
</blockquote>
<simpara>ちょっと何言ってるかわからないうちは <emphasis role="strong">require</emphasis> を上記のフォルダ構成で使っていてください。一応以下の使い分けがありますが今は頭の隅に留めるだけでいいと思います。</simpara>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>requireは標準添付ライブラリなどの自分が書いていないコードを読み込む時に使い、こちらのrequire_relativeは自分の書いたコードを読み込む時に使うように使い分けるのが良いでしょう。</simpara>
</blockquote>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/fizz_buzz_test.rb
Started with run options --seed 44438

  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00279s
19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>では最後に <literal>main.rb</literal> ファイルを追加して <literal>FizzBuzz:generate_list</literal> を呼び出すようにします。</simpara>
<literallayout class="monospaced">/main.rb
  |--lib/
      |
       -- fizz_buzz.rb
  |--test/
      |
       -- fizz_buzz_test.rb</literallayout>
<programlisting language="ruby" linenumbering="unnumbered">require './lib/fizz_buzz.rb'

puts FizzBuzz.generate_list</programlisting>
<simpara><emphasis role="strong">puts</emphasis> は結果を画面に出力するメソッドです。
先程は <emphasis role="strong">p</emphasis> メソッドを使って画面に <emphasis role="strong">配列</emphasis> の中身を１件ずつ表示していましたが今回は <emphasis role="strong">配列</emphasis> 自体を改行して画面に出力するため <emphasis role="strong">puts</emphasis> メソッドを使います。機能的にはほどんど変わらないのですが以下の様に使い分けるそうです。</simpara>
<blockquote>
<attribution>
プロを目指す人のためのRuby入門
</attribution>
<simpara>まず、用途としてはputsメソッドとprintメソッドは一般ユーザ向け、pメソッドは開発者向け、というふうに別かれます。</simpara>
</blockquote>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
...
Buzz</programlisting>
<simpara>ちなみに <emphasis role="strong">print</emphasis> メソッドを使った場合はこのように出力されます。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ruby main.rb
["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz", "16", "17", "Fizz", "19", "Buzz", "Fizz", "22", "23", "Fizz", "Buzz", "26", "Fizz", "28", "29", "FizzBuzz", "31", "32", "Fizz", "34", "Buzz", "Fizz", "37", "38", "Fizz", "Buzz", "41", "Fizz", "43", "44", "FizzBuzz", "46", "47", "Fizz", "49", "Buzz", "Fizz", "52", "53", "Fizz", "Buzz", "56", "Fizz", "58", "59", "FizzBuzz", "61", "62", "Fizz", "64", "Buzz", "Fizz", "67", "68", "Fizz", "Buzz", "71", "Fizz", "73", "74", "FizzBuzz", "76", "77", "Fizz", "79", "Buzz", "Fizz", "82", "83", "Fizz", "Buzz", "86", "Fizz", "88", "89", "FizzBuzz", "91", "92", "Fizz", "94", "Buzz", "Fizz", "97", "98", "Fizz", "Buzz"] $</programlisting>
<simpara>プログラムの完成です。コミットしておきましょう。</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git commit -m 'feat: プリントする'</programlisting>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">数を文字列にして返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">1を渡したら文字列"1"を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">2を渡したら文字列"2"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">3の倍数のときは数の代わりに｢Fizz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">3を渡したら文字列"Fizz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">5 の倍数のときは｢Buzz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">5を渡したら文字列"Buzz"を返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">13 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">15を渡したら文字列FizzBuzzを返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">1 から 100 までのFizzBuzzの配列を返す</phrase></emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の初めは文字列の1を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の最後は文字列の100を返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の2番めは文字列のFizzを返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の4番目は文字列のBuzzを返す</phrase></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">配列の14番目は文字列のFizzBuzzを返す</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis><phrase role="line-through">プリントする</phrase></emphasis></simpara>
</listitem>
</itemizedlist>
<section xml:id="_ふりかえり">
<title>ふりかえり</title>
<simpara><literal>FizzBuzz</literal> プログラムの最初のバージョンをリリースすることができたのでこれまでのふりかえりをしておきましょう。</simpara>
<simpara>まず <emphasis role="strong">TODOリスト</emphasis> を作成して <emphasis role="strong">テストファースト</emphasis> で１つずつ小さなステップで開発を進めていきました。
<emphasis role="strong">仮実装を経て本実装へ</emphasis> の過程で Rubyの <emphasis role="strong">クラス</emphasis> を定義して <emphasis role="strong">文字列リテラル</emphasis> を返す <emphasis role="strong">メソッド</emphasis> を作成しました。この時点でRubyの <emphasis role="strong">オブジェクトとメソッド</emphasis> という概念に触れています。</simpara>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>Rubyの世界では、ほぼどのような値もオブジェクトという概念で表されます。オブジェクトという表現はかなり範囲の広い表現方法で、クラスやインスタンスを含めてオブジェクトと称します。</simpara>
</blockquote>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>プログラミング言語においてメソッド、あるいは関数と呼ばれるものを簡単に説明すると処理をひとかたまりにまとめたものと言って良いでしょう。</simpara>
</blockquote>
<simpara>ちょっと何言ってるかわからないかもしれませんが、今はそういう概念があってこうやって書くのねという程度の理解で十分です。</simpara>
<simpara>その後 <emphasis role="strong">リファクタリング</emphasis> を通じて多くの概念に触れることになりました。
まず <emphasis role="strong">変数名の変更</emphasis> でRubyにおける <emphasis role="strong">変数</emphasis> の概念と操作を通じて名前付けの重要性を学びました。</simpara>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>Rubyでは変数を扱うために特別な宣言やキーワードは必要ありません。「=」 の左辺に任意の変数名を記述するだけで変数宣言となります。</simpara>
</blockquote>
<simpara>続いて <emphasis role="strong">明白な実装</emphasis> を通して <emphasis role="strong">制御構造</emphasis> のうち <emphasis role="strong">条件分岐</emphasis> のための <emphasis role="strong">if式</emphasis> と <emphasis role="strong">演算子</emphasis> を使いプログラムを制御し判定・計算をする方法を学びました。また、<emphasis role="strong">アルゴリズムの置き換え</emphasis> を適用してコードをよりわかりやすくしました。</simpara>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>Rubyではプログラムを構成する最小の要素を式と呼びます。変数やリテラル、制御構文、演算子などが式として扱われます。</simpara>
</blockquote>
<simpara>そして、 <emphasis role="strong">学習用テスト</emphasis> を通して新しい問題を解決するために <emphasis role="strong">配列オブジェクト</emphasis> <emphasis role="strong">レンジオブジェクト</emphasis> といった <emphasis role="strong">文字列リテラル</emphasis> <emphasis role="strong">数値リテラル</emphasis> 以外の <emphasis role="strong">データ構造</emphasis> の使い方を学習して、<emphasis role="strong">配列</emphasis> を操作するための <emphasis role="strong">制御構造</emphasis> として <emphasis role="strong">繰り返し処理</emphasis> を <emphasis role="strong">eachメソッド</emphasis> を使って実現しました。</simpara>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>これら「100」や「3.14」といった部分を数値リテラルと呼びます。</simpara>
</blockquote>
<blockquote>
<attribution>
かんたんRuby
</attribution>
<simpara>このように文字列をシングルクオートやダブルクオートで括っている表記を文字列リテラルと呼びます。</simpara>
</blockquote>
<simpara>仕上げは、<emphasis role="strong">コードの不吉な臭い</emphasis> からさらなる改善を実施しました。 <emphasis role="strong">不思議な名前</emphasis> の <emphasis role="strong">メソッド</emphasis> を <emphasis role="strong">自動的テスト</emphasis> を用意することで自信を持って <emphasis role="strong">リファクタリング</emphasis> を実施し、<emphasis role="strong">長い関数</emphasis> に対して <emphasis role="strong">ガード節</emphasis> を導入し <emphasis role="strong">一時変数</emphasis> <emphasis role="strong">説明変数</emphasis> など <emphasis role="strong">変数</emphasis> バリエーションの取り扱いを学びました。そして、<emphasis role="strong">ループ</emphasis> と <emphasis role="strong">変更可能なデータ</emphasis> から <emphasis role="strong">コレクションパイプライン</emphasis> の使い方と <emphasis role="strong">ミュータブル</emphasis> <emphasis role="strong">イミュータブル</emphasis> の概念を学び、<emphasis role="strong">コメント</emphasis> のやり方と <emphasis role="strong">定数</emphasis> と <emphasis role="strong">マジックナンバー</emphasis> の問題を学びました。</simpara>
<simpara>最後に、<emphasis role="strong">require</emphasis> の使い方を通してファイルの分割方法を学ぶことができました。</simpara>
<simpara>ちょっと何言ってるかわからない単語ばかり出てきたかもしれませんがこれでRubyの基本の半分は抑えています。自分でFizzBuzzコードが書けて用語の意味が説明できるようになれば技能・学科第一段階の半分ぐらいといったところでしょうか。仮免許取得にはまだ習得しなければならない技術と知識がありますので。</simpara>
</section>
<section xml:id="_良いコード">
<title>良いコード</title>
<simpara>以下のコードを作成しました。</simpara>
<formalpara>
<title>/main.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require './lib/fizz_buzz.rb'

puts FizzBuzz.generate_list</programlisting>
</para>
</formalpara>
<formalpara>
<title>/lib/fizz_buzz.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

class FizzBuzz
  MAX_NUMBER = 100

  def self.generate(number)
    is_fizz = number.modulo(3).zero?
    is_buzz = number.modulo(5).zero?

    return 'FizzBuzz' if is_fizz &amp;&amp; is_buzz
    return 'Fizz' if is_fizz
    return 'Buzz' if is_buzz

    number.to_s
  end

  def self.generate_list
    # 1から最大値までのFizzBuzz配列を1発で作る
    (1..MAX_NUMBER).map { |n| generate(n) }
  end
end</programlisting>
</para>
</formalpara>
<formalpara>
<title>/test/fizz_buzz_test.rb</title>
<para>
<programlisting language="ruby" linenumbering="unnumbered"># frozen_string_literal: true

require 'minitest/reporters'
Minitest::Reporters.use!
require 'minitest/autorun'
require './lib/fizz_buzz'

class FizzBuzzTest &lt; Minitest::Test
  describe 'FizzBuzz' do
    def setup
      @fizzbuzz = FizzBuzz
    end

    describe '三の倍数の場合' do
      def test_3を渡したら文字列Fizzを返す
        assert_equal 'Fizz', @fizzbuzz.generate(3)
      end
    end

    describe '五の倍数の場合' do
      def test_5を渡したら文字列Buzzを返す
        assert_equal 'Buzz', @fizzbuzz.generate(5)
      end
    end

    describe '三と五の倍数の場合' do
      def test_15を渡したら文字列FizzBuzzを返す
        assert_equal 'FizzBuzz', @fizzbuzz.generate(15)
      end
    end

    describe 'その他の場合' do
      def test_1を渡したら文字列1を返す
        assert_equal '1', @fizzbuzz.generate(1)
      end

      def test_2を渡したら文字列2を返す
        assert_equal '2', @fizzbuzz.generate(2)
      end
    end

    describe '1から100までのFizzBuzzの配列を返す' do
      def setup
        @result = FizzBuzz.generate_list
      end

      def test_配列の初めは文字列の1を返す
        assert_equal '1', @result.first
      end

      def test_配列の最後は文字列のBuzzを返す
        assert_equal 'Buzz', @result.last
      end

      def test_配列の2番目は文字列のFizzを返す
        assert_equal 'Fizz', @result[2]
      end

      def test_配列の4番目は文字列のBuzzを返す
        assert_equal 'Buzz', @result[4]
      end

      def test_配列の14番目は文字列のFizzBuzzを返す
        assert_equal 'FizzBuzz', @result[14]
      end
    end
  end

  describe '配列や繰り返し処理を理解する' do
    def test_繰り返し処理
      $stdout = StringIO.new
      [1, 2, 3].each { |i| p i * i }
      output = $stdout.string

      assert_equal "1\n" + "4\n" + "9\n", output
    end

    def test_特定の条件を満たす要素だけを配列に入れて返す
      result = [1.1, 2, 3.3, 4].select(&amp;:integer?)
      assert_equal [2, 4], result
    end

    def test_特定の条件を満たす要素だけを配列に入れて返す
      result = [1.1, 2, 3.3, 4].find_all(&amp;:integer?)
      assert_equal [2, 4], result
    end

    def test_特定の条件を満たさない要素だけを配列に入れて返す
      result = [1.1, 2, 3.3, 4].reject(&amp;:integer?)
      assert_equal [1.1, 3.3], result
    end

    def test_新しい要素の配列を返す
      result = %w[apple orange pineapple strawberry].map(&amp;:size)
      assert_equal [5, 6, 9, 10], result
    end

    def test_新しい要素の配列を返す
      result = %w[apple orange pineapple strawberry].collect(&amp;:size)
      assert_equal [5, 6, 9, 10], result
    end

    def test_配列の中から条件に一致する要素を取得する
      result = %w[apple orange pineapple strawberry].find(&amp;:size)
      assert_equal 'apple', result
    end

    def test_配列の中から条件に一致する要素を取得する
      result = %w[apple orange pineapple strawberry].detect(&amp;:size)
      assert_equal 'apple', result
    end

    def test_指定した評価式で並び変えた配列を返す
      assert_equal %w[1 10 13 2 3 4], %w[2 4 13 3 1 10].sort
      assert_equal %w[1 2 3 4 10 13],
                   %w[2 4 13 3 1 10].sort { |a, b| a.to_i &lt;=&gt; b.to_i }
      assert_equal %w[13 10 4 3 2 1],
                   %w[2 4 13 3 1 10].sort { |b, a| a.to_i &lt;=&gt; b.to_i }
    end

    def test_配列の中から条件に一致する要素を取得する
      result = %w[apple orange pineapple strawberry apricot].grep(/^a/)
      assert_equal %w[apple apricot], result
    end

    def test_ブロック内の条件式が真である間までの要素を返す
      result = [1, 2, 3, 4, 5, 6, 7, 8, 9].take_while { |item| item &lt; 6 }
      assert_equal [1, 2, 3, 4, 5], result
    end

    def test_ブロック内の条件式が真である以降の要素を返す
      result = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].drop_while { |item| item &lt; 6 }
      assert_equal [6, 7, 8, 9, 10], result
    end

    def test_畳み込み演算を行う
      result = [1, 2, 3, 4, 5].inject(0) { |total, n| total + n }
      assert_equal 15, result
    end

    def test_畳み込み演算を行う
      result = [1, 2, 3, 4, 5].reduce { |total, n| total + n }
      assert_equal 15, result
    end
  end
end</programlisting>
</para>
</formalpara>
<simpara>どうでしょう、学習用テストは除くとしてプロダクトコードに対して倍以上のテストコードを作っていますよね。テストコードを作らず一発で <literal>fizz_buzz.rb</literal> のようなコードを書くことはできますか？ たしかに <literal><link xl:href="https://www.google.com/search?hl=ja&amp;sxsrf=ACYBGNRC-UwZUT1OMCdicC984bdIxzeG0A%3A1579161119693&amp;source=hp&amp;ei=HxYgXsCsJ4qF0wS3k5e4Ag&amp;q=fizz+buzz+ruby&amp;oq=fizz+buzz+ruby&amp;gs_l=psy-ab.3..0.1369.4308..4714&#8230;&#8203;0.0..0.140.1446.6j8&#8230;&#8203;&#8230;&#8203;0&#8230;&#8203;.1..gws-wiz&#8230;&#8203;&#8230;&#8203;.0i131j0i131i4j0i4j35i39j0i4i3j0i10i203j0i203j0i30j0i10i30j0i8i30.PLE9lL0CGmo&amp;ved=0ahUKEwiAuNHM0YfnAhWKwpQKHbfJBScQ4dUDCAg&amp;uact=5">fizz buzz ruby</link></literal> といったキーワードで検索すればサンプルコードは見つかるのでコピーして同じ振る舞いをするコードをすぐに書くことはできるでしょう。でも仕様が追加された場合はどうしましょう。</simpara>
<simpara>仕様</simpara>
<literallayout class="monospaced">1 から 100 までの数をプリントするプログラムを書け。
ただし 3 の倍数のときは数の代わりに｢Fizz｣と、5 の倍数のときは｢Buzz｣とプリントし、
3 と 5 両方の倍数の場合には｢FizzBuzz｣とプリントすること。
タイプごとに出力を切り替えることができる。
タイプ１は通常、タイプ２は数字のみ、タイプ３は FizzBuzz の場合のみをプリントする。</literallayout>
<simpara>また同じようなコードサンプルを探しますか？私ならば <emphasis role="strong">TODOリスト</emphasis> に以下の項目を追加することから始めます。</simpara>
<simpara>TODOリスト</simpara>
<itemizedlist>
<listitem>
<simpara>タイプ1の場合</simpara>
<itemizedlist>
<listitem>
<simpara>数を文字列にして返す</simpara>
<itemizedlist>
<listitem>
<simpara>1を渡したら文字列"1"を返す</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>次に何をやるかはもうわかりますよね。テスト駆動開発とはただ失敗するテストを１つずつ書いて通していくことではありません。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>TDDは分析技法であり、設計技法であり、実際には開発のすべてのアクティビティを構造化する技法なのだ。</simpara>
</blockquote>
<simpara>ではテストファーストで書けば質の高い良いコードがかけるようになるのでしょうか？以下のコードを見てください。</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'minitest/reporters'
Minitest::Reporters.use!
require 'minitest/autorun'

class FizzBuzz
  # fizz_buzzメソッドを実行する
  def self.fizz_buzz(n)
  a = n.to_s
    if n % 3 == 0
      a = 'Fizz'
    if n % 15 == 0
      a = 'FizzBuzz'
    end
        elsif n % 5 == 0
          a = 'Buzz'
        end
           a
  end

# 1から100までをプリントする
  def self.print_1_to_100
              n = []
    (1..100).each do |i|
  n &lt;&lt; fizz_buzz(i)
                        end
  n
  end
end

class FizzBuzzTest &lt; Minitest::Test
  describe 'FizzBuzz' do
    def setup
      @p = FizzBuzz
    end

      def test_15を渡したら文字列pを返す
        assert_equal 'FizzBuzz', FizzBuzz.fizz_buzz(15)
      end
      def test_3を渡したら文字列3を返す
        assert_equal 'Fizz', FizzBuzz.fizz_buzz(3)
      end
      def test_1を渡したら文字列1を返す
        assert_equal '1', @p.fizz_buzz(1)
      end
      def test_5を渡したら文字列Buzzを返す
        assert_equal 'Buzz', FizzBuzz.fizz_buzz(5)
      end

    describe '1から100までプリントする' do
  def setup
    @x = FizzBuzz.print_1_to_100
  end

  def test_配列の4番目は文字列のをBuzz返す
    assert_equal 'Buzz', @x[4]
  end

      def test_配列の初めは文字列の1を返す
        assert_equal '1', @x.first
      end

      def test_配列の最後は文字列のBuzzを返す
        assert_equal 'Buzz', FizzBuzz.print_1_to_100.last
      end

def test_配列の14番目は文字列のFizzBuzz返す
  assert_equal 'FizzBuzz', @x[14]
end
  def test_配列の2番目は文字列の2を返す
    assert_equal 'Fizz', @x[2]
  end

    end
  end
end</programlisting>
<programlisting language="bash" linenumbering="unnumbered">$ ruby test/fizz_buzz_tfd_test.rb
Started with run options --seed 43131

  9/9: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00

Finished in 0.00135s
9 tests, 9 assertions, 0 failures, 0 errors, 0 skips</programlisting>
<simpara>プログラムは動くしテストも通ります。でもこれはテスト駆動開発で作られたと言えるでしょうか？質の高い良いコードでしょうか？何が足りないかはわかりますよね。</simpara>
<blockquote>
<attribution>
テスト駆動開発 付録C 訳者解説
</attribution>
<simpara>テスト駆動開発における質の向上の手段は、リファクタリングによる継続的でインクリメンタルな設計であり、「単なるテストファースト」と「テスト駆動開発」の違いはそこにあります。</simpara>
</blockquote>
<simpara>そもそも良いコードは何なのでしょうか？いくつかの見解があるようです。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>TDDは「より良いコードを書けば、よりうまくいく」という素朴で奇妙な仮設によって成り立っている</simpara>
</blockquote>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>「動作するきれいなコード」。RonJeffriesのこの簡潔な言葉が、テスト駆動開発(TDD)のゴールだ。動作するきれいなコードはあらゆる意味で価値がある。</simpara>
</blockquote>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>良いコードかどうかは、変更がどれだけ容易なのかで決まる。</simpara>
</blockquote>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>コードは理解しやすくなければいけない。</simpara>
</blockquote>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>コードは他の人が最短時間で理解できるように書かなければいけない。</simpara>
</blockquote>
<blockquote>
<attribution>
リーダブルコード
</attribution>
<simpara>優れたソースコードは「目に優しい」ものでなければいけない。</simpara>
</blockquote>
<simpara>少なくともテスト駆動開発のゴールに良いコードがあるということはいえるでしょう。え？どうやったら良いコードを書けるようになるかって？私が教えてほしいのですがただ言えることは他の分野と同様に規律の習得と絶え間ない練習と実践の積み重ねのむこうにあるのだろうということだけです。</simpara>
<blockquote>
<attribution>
テスト駆動開発
</attribution>
<simpara>私がかつて発見した、そして多くの人に気づいてもらいたい効果とは、反復可能な振る舞いを規則にまで還元することで、規則の適用は機会的に反復可能になるということだ。</simpara>
</blockquote>
<blockquote>
<attribution>
リファクタリング(第2版)
</attribution>
<simpara>ここで、Kent Beckが自ら語ったセリフを思い出しました。「僕は、偉大なプログラマなんかじゃない。偉大な習慣を身につけた少しましなプログラマなんだ」。</simpara>
</blockquote>
</section>
</section>
</section>
</article>