{"version":3,"file":"commands.js","mappings":";YACA,IAAIA,EAAsB,CAAC,kQCA3B,ovNA6B+B,aAwB9B,OAxB8B,cAA/B,WAAgCC,GAAI,iFAC5BC,MAAMC,IAAG,6BAAC,WAAOC,GAAO,uEAMO,OAJ7BC,EAAQD,EAAQE,SAASC,WAAWC,sBAIpCC,KAAK,wBAAwB,SAC7BL,EAAQM,OAAM,OAMnB,OAJGL,EAAMM,WAAWC,UACnBP,EAAMM,WAAWE,YAEjBR,EAAMM,WAAWG,UAClB,SAEKV,EAAQM,OAAM,2CACrB,mDAhBc,IAgBZK,OAAM,SAAUC,GACjBC,QAAQC,IAAI,UAAYF,GACpBA,aAAiBG,gBAAgBC,OACnCH,QAAQC,IAAI,eAAiBG,KAAKC,UAAUN,EAAMO,WAEtD,IAAE,OACFtB,EAAKuB,YAAY,2CAClB,wBCtDDxB,EAAoByB,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAGhB,CAFE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,GDOxBC,OAAOC,SAAQ,WACb,IA+CFD,OAAOE,QAAQC,UAAU,oBA3BxB,SAE+B,GAAD,mCA4BN,oBAATC,KACVA,KACkB,oBAAXL,OACPA,YACkB,IAAXM,EAAAA,EACPA,EAAAA,OACAC,GAMJC,OAvDF,SAAgBC,GACd,IAAMC,EAAU,CACdC,KAAMV,OAAOW,aAAaC,4BAA4BC,qBACtDJ,QAAS,oBACTK,KAAM,aACNC,YAAY,GAIdf,OAAO3B,QAAQ2C,QAAQC,KAAKC,qBAAqBC,aAAa,SAAUV,GAGxED,EAAMf,WACR","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/./src/commands/commands.js","webpack://office-addin-taskpane-js/webpack/runtime/global"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global global, Office, self, window */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called\n});\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event {Office.AddinCommands.Event}\n */\nfunction action(event) {\n  const message = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: \"Performed action.\",\n    icon: \"Icon.80x80\",\n    persistent: true,\n  };\n\n  // Show a notification message\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n\n  // Be sure to indicate when the add-in command function is complete\n  event.completed();\n}\n\nasync function toggleProtection(args) {\n  await Excel.run(async (context) => {\n    // TODO1: Queue commands to reverse the protection status of the current worksheet.\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // TODO2: Queue command to load the sheet's \"protection.protected\" property from\n    //        the document and re-synchronize the document and task pane.\n    sheet.load(\"protection/protected\");\n    await context.sync();\n\n    if (sheet.protection.protected) {\n      sheet.protection.unprotect();\n    } else {\n      sheet.protection.protect();\n    }\n\n    await context.sync();\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n      console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n  });\n  args.completed();\n}\nOffice.actions.associate(\"toggleProtection\", toggleProtection);\n\nfunction getGlobal() {\n  return typeof self !== \"undefined\"\n    ? self\n    : typeof window !== \"undefined\"\n    ? window\n    : typeof global !== \"undefined\"\n    ? global\n    : undefined;\n}\n\nconst g = getGlobal();\n\n// The add-in command functions need to be available in global scope\ng.action = action;\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"names":["__webpack_require__","args","Excel","run","context","sheet","workbook","worksheets","getActiveWorksheet","load","sync","protection","protected","unprotect","protect","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo","completed","g","globalThis","this","Function","e","window","Office","onReady","actions","associate","self","global","undefined","action","event","message","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","mailbox","item","notificationMessages","replaceAsync"],"sourceRoot":""}