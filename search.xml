<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>テスト駆動開発から始めるドメイン駆動設計入門 ~ドメインサービス~</title>
      <link href="/2020/06/05/1591344466/"/>
      <url>/2020/06/05/1591344466/</url>
      
        <content type="html"><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>この記事は書籍<a href="https://amzn.to/2xL7YIi" target="_blank" rel="noopener">『ドメイン駆動設計入門 ボトムアップでわかる! ドメイン駆動設計の基本』</a>で解説されているドメイン駆動設計パターンをテスト駆動開発で実装したものです。</p><p>言語は Ruby です。Ruby でのテスト駆動開発の詳細に関しては<a href="https://k2works.github.io/2020/04/16/1587009564/">こちらの記事</a>をご参照ください。<a href="https://gitpod.io/#https://github.com/k2works/tdd_itddd/tree/ruby" target="_blank" rel="noopener">Gitpod</a>からブラウザ開発環境が利用できるのでお手軽に開発を始めることが出来ます。</p><a id="more"></a><h1 id="ユーザーストーリー"><a href="#ユーザーストーリー" class="headerlink" title="ユーザーストーリー"></a>ユーザーストーリー</h1><p>前回の <strong>エンティティ</strong> に続いて今回は <strong>ドメインサービス</strong> を作成します。<br>まず <strong>ユーザーストーリー</strong> をもとに追加作業を <strong>TODOリスト</strong> に追加します。</p><pre><code>利用者としてユーザーを管理できるようにしたいなぜならユーザーはシステムを利用するために必要だから</code></pre><h1 id="TODOリスト"><a href="#TODOリスト" class="headerlink" title="TODOリスト"></a>TODOリスト</h1><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>✓ ユーザーを登録する</p><ul><li><p>✓ IDと名前を持ったユーザーを作成する</p></li><li><p>✓ ユーザー名が３文字未満の場合はエラー</p></li><li><p>✓ ユーザー名を指定しない場合はエラー</p></li><li><p>✓ ユーザー名が４文字の場合は登録される</p></li><li><p>✓ IDを指定しない場合はエラー</p></li></ul></li><li><p>✓ ユーザー名を変更できるようにする</p></li><li><p>✓ ユーザーの同一性を判断できるようにする</p><ul><li><p>✓ 識別子を追加する</p></li><li><p>✓ エンティティの比較のを行う</p></li></ul></li><li><p>❏ ユーザーを重複して登録できないようにする</p></li></ul></li></ul><h1 id="仮実装を経て本実装へ"><a href="#仮実装を経て本実装へ" class="headerlink" title="仮実装を経て本実装へ"></a>仮実装を経て本実装へ</h1><h2 id="セットアップ"><a href="#セットアップ" class="headerlink" title="セットアップ"></a>セットアップ</h2><p>ユーザーデータを永続化するため今回はSQLiteを使用します。Rubyでのセットアップ方法はまず <code>Gemfile</code><br>にsqlite3ライブラリを追加します。</p><p><code>Gemfile</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line">source <span class="string">"https://rubygems.org"</span></span><br><span class="line"></span><br><span class="line">git_source(<span class="symbol">:github</span>) &#123;<span class="params">|repo_name|</span> <span class="string">"https://github.com/<span class="subst">#&#123;repo_name&#125;</span>"</span> &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">gem <span class="string">'sqlite3'</span></span><br></pre></td></tr></table></figure><p>続いてライブラリを読み込んで利用できるようにします。</p><p><code>lib/sns.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_id.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_name.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sqlite3'</span></span><br></pre></td></tr></table></figure><p>追加する機能のテストコードの準備をします。テスト実行の最初にユーザーテーブルを作成してテスト終了時にテーブルを削除するようにします。</p><p><code>test/user_test.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'ユーザーの重複を判定する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @db = SQLite3::Database.new(<span class="string">'sns.db'</span>)</span><br><span class="line">      sql = <span class="string">'CREATE TABLE USERS(id string, name string)'</span></span><br><span class="line">      @db.execute(sql)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span></span></span><br><span class="line">      sql = <span class="string">'DROP TABLE USERS'</span></span><br><span class="line">      @db.execute(sql)</span><br><span class="line">      @db.close</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>準備が出来たら追加ライブラリをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bundle install</span><br></pre></td></tr></table></figure><h2 id="仮実装"><a href="#仮実装" class="headerlink" title="仮実装"></a>仮実装</h2><p>ユーザーの重複を判定する機能を実装したいのですがまだ具体的なコードの実装イメージが湧きません。こんな時は <strong>仮実装</strong> でまず失敗するテストから始めるとしましょう。</p><p><code>test_user_test.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>登録するユーザーがすでに存在している</span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      sql = <span class="string">'INSERT INTO USERS(id, name) VALUES(:id, :name)'</span></span><br><span class="line">      @db.execute(sql, <span class="symbol">id:</span> user.id.value, <span class="symbol">name:</span> user.name.value)</span><br><span class="line"></span><br><span class="line">      assert user.exist?(user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>User#exist?</code> メソッドが存在しないためテストは失敗しました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/user_test.rb</span><br><span class="line">Started with run options --seed 19263</span><br><span class="line"></span><br><span class="line">ユーザーの重複を判定する</span><br><span class="line">  test_登録するユーザーがすでに存在している                                        ERROR (0.04s)</span><br><span class="line">Minitest::UnexpectedError:         NoMethodError: undefined method exist? <span class="keyword">for</span> <span class="comment">#&lt;User:0x000055f6172730e0&gt;</span></span><br><span class="line">            <span class="built_in">test</span>/user_test.rb:103:<span class="keyword">in</span> test_登録するユーザーがすでに存在している</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストを通すために <code>User#exist?</code> メソッドを追加して最小限の実装をします。</p><p><code>lib/user.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(name)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> name.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exist?</span><span class="params">(_user)</span></span></span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eql?</span><span class="params">(other)</span></span></span><br><span class="line">    @id == other.id</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストが成功してグリーンの状態になりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/user_test.rb</span><br><span class="line">Started with run options --seed 21516</span><br><span class="line"></span><br><span class="line">ユーザーを更新する</span><br><span class="line">  test_ユーザー名を更新する                                                 PASS (0.00s)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">ユーザーの重複を判定する</span><br><span class="line">  test_登録するユーザーがすでに存在している                                         PASS (0.07s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.07418s</span><br><span class="line">10 tests, 12 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h2 id="本実装"><a href="#本実装" class="headerlink" title="本実装"></a>本実装</h2><p><strong>仮実装</strong> でテストは通るようになりましたがこのままではユーザーが存在しない場合もTrueを返すのでデータベースから該当するユーザーが存在するかを確認するコードを実装します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exist?</span><span class="params">(user)</span></span></span><br><span class="line">    db = SQLite3::Database.new(<span class="string">'sns.db'</span>)</span><br><span class="line">    sql = <span class="string">'SELECT * FROM USERS WHERE name = :name'</span></span><br><span class="line">    result = db.execute(sql, <span class="symbol">name:</span> user.name.value)</span><br><span class="line">    !result.empty?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストが通ることを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/user_test.rb</span><br><span class="line">Started with run options --seed 47320</span><br><span class="line"></span><br><span class="line">ユーザーを更新する</span><br><span class="line">  test_ユーザー名を更新する                                                 PASS (0.00s)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">ユーザーの重複を判定する</span><br><span class="line">  test_登録するユーザーがすでに存在している                                         PASS (0.05s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.05795s</span><br><span class="line">10 tests, 12 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h2 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h2><p>ユーザーが存在しない場合のテストも追加しておきます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>登録するユーザーが存在していない</span></span><br><span class="line">      id = UserId.new(<span class="string">'2'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Alice'</span>)</span><br><span class="line">      user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      refute user.exist?(user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストが通ることを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/user_test.rb</span><br><span class="line">Started with run options --seed 2872</span><br><span class="line"></span><br><span class="line">ユーザーの同一性を判断する</span><br><span class="line">  test_同じ名前の同じユーザー                                                PASS (0.00s)</span><br><span class="line">  test_同じ名前の異なるユーザー                                               PASS (0.00s)</span><br><span class="line">  test_名前を変更した同じユーザー                                              PASS (0.00s)</span><br><span class="line"></span><br><span class="line">ユーザーの重複を判定する</span><br><span class="line">  test_登録するユーザーがすでに存在している                                         PASS (0.19s)</span><br><span class="line">  test_登録するユーザーが存在していない                                           PASS (0.12s)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.32139s</span><br><span class="line">11 tests, 13 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h1 id="リファクタリング"><a href="#リファクタリング" class="headerlink" title="リファクタリング"></a>リファクタリング</h1><p>レッド、グリーン、となったので次はリファクタです。</p><h2 id="クラスの抽出"><a href="#クラスの抽出" class="headerlink" title="クラスの抽出"></a>クラスの抽出</h2><p>ユーザー <strong>エンティティ</strong> にユーザーが存在するかを確認するメソッドが存在するのは不自然なので <strong>クラスの抽出</strong> を適用して <strong>ドメインサービス</strong> クラスを抽出するとしましょう。まず、 <strong>ドメインサービス</strong> クラスとテストクラスを追加します。</p><p><code>test/user_service_test.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/sns.rb'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> &lt; Minitest::Test</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>続いて <strong>ドメインサービス</strong> クラスとなる <code>UserService</code> クラスを追加して読み込むようにします。</p><p><code>lib/user_service.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>lib/sns.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_id.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_name.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_service.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sqlite3'</span></span><br></pre></td></tr></table></figure><p>テストが壊れていないことを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ rake <span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">ユーザーの重複を判定する</span><br><span class="line">  test_登録するユーザーがすでに存在している                                         PASS (0.16s)</span><br><span class="line">  test_登録するユーザーが存在していない                                           PASS (0.12s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.60710s</span><br><span class="line">13 tests, 15 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h2 id="メソッドの移動"><a href="#メソッドの移動" class="headerlink" title="メソッドの移動"></a>メソッドの移動</h2><p><strong>ドメインサービス</strong> を <strong>クラスの抽出</strong> したので続いて <strong>エンティティ</strong> からユーザーの重複を確認する <strong>メソッドの移動</strong> を実施します。</p><p><code>test/user_service_test.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'ユーザーの重複を判定する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @db = SQLite3::Database.new(<span class="string">'sns.db'</span>)</span><br><span class="line">      sql = <span class="string">'CREATE TABLE USERS(id string, name string)'</span></span><br><span class="line">      @db.execute(sql)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>登録するユーザーがすでに存在している</span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      sql = <span class="string">'INSERT INTO USERS(id, name) VALUES(:id, :name)'</span></span><br><span class="line">      @db.execute(sql, <span class="symbol">id:</span> user.id.value, <span class="symbol">name:</span> user.name.value)</span><br><span class="line"></span><br><span class="line">      assert user.exist?(user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>登録するユーザーが存在していない</span></span><br><span class="line">      id = UserId.new(<span class="string">'2'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Alice'</span>)</span><br><span class="line">      user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      refute user.exist?(user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span></span></span><br><span class="line">      sql = <span class="string">'DROP TABLE USERS'</span></span><br><span class="line">      @db.execute(sql)</span><br><span class="line">      @db.close</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>test/user_service_test.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rlass UserService</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exist?</span><span class="params">(user)</span></span></span><br><span class="line">    db = SQLite3::Database.new(<span class="string">'sns.db'</span>)</span><br><span class="line">    sql = <span class="string">'SELECT * FROM USERS WHERE name = :name'</span></span><br><span class="line">    result = db.execute(sql, <span class="symbol">name:</span> user.name.value)</span><br><span class="line">    !result.empty?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストを <strong>ドメインサービス</strong> 経由から実行するように変更します。</p><p><code>test/user_service_test.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/sns'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceT</span>.<span class="title">rbest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'ユーザーの重複を判定する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @db = SQLite3::Database.new(<span class="string">'sns.db'</span>)</span><br><span class="line">      sql = <span class="string">'CREATE TABLE USERS(id string, name string)'</span></span><br><span class="line">      @db.execute(sql)</span><br><span class="line"></span><br><span class="line">      @service = UserService.new</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>登録するユーザーがすでに存在している</span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      sql = <span class="string">'INSERT INTO USERS(id, name) VALUES(:id, :name)'</span></span><br><span class="line">      @db.execute(sql, <span class="symbol">id:</span> user.id.value, <span class="symbol">name:</span> user.name.value)</span><br><span class="line"></span><br><span class="line">      assert @service.exist?(user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>登録するユーザーが存在していない</span></span><br><span class="line">      id = UserId.new(<span class="string">'2'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Alice'</span>)</span><br><span class="line">      user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      refute @service.exist?(user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span></span></span><br><span class="line">      sql = <span class="string">'DROP TABLE USERS'</span></span><br><span class="line">      @db.execute(sql)</span><br><span class="line">      @db.close</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストが壊れていないことを確認したら <strong>ドメインサービス</strong> の <strong>クラスの抽出</strong> と <strong>メソッドの移動</strong> のリファクタリングは完了です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ rake <span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">ユーザーの重複を判定する</span><br><span class="line">  test_登録するユーザーがすでに存在している                                         PASS (0.12s)</span><br><span class="line">  test_登録するユーザーが存在していない                                           PASS (0.06s)</span><br><span class="line">...</span><br><span class="line">ユーザーを更新する</span><br><span class="line">  test_ユーザー名を更新する                                                 PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.18120s</span><br><span class="line">11 tests, 13 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h1 id="TODOリスト-1"><a href="#TODOリスト-1" class="headerlink" title="TODOリスト"></a>TODOリスト</h1><p>続いてユーザーIDを <strong>エンティティ</strong> の生成時に引数として受け取っていますが重複したIDで <strong>エンティティ</strong><br>を生成してしまう可能性があるので自動生成するようにリファクタリングしたいと思います。</p><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>✓ ユーザーを登録する</p><ul><li><p>✓ IDと名前を持ったユーザーを作成する</p></li><li><p>✓ ユーザー名が３文字未満の場合はエラー</p></li><li><p>✓ ユーザー名を指定しない場合はエラー</p></li><li><p>✓ ユーザー名が４文字の場合は登録される</p></li><li><p>✓ IDを指定しない場合はエラー</p></li></ul></li><li><p>✓ ユーザー名を変更できるようにする</p></li><li><p>✓ ユーザーの同一性を判断できるようにする</p><ul><li><p>✓ 識別子を追加する</p></li><li><p>✓ エンティティの比較のを行う</p></li></ul></li><li><p>✓ ユーザーを重複して登録できないようにする</p></li><li><p>❏ IDを自動生成する</p></li></ul></li></ul><h1 id="リファクタリング-1"><a href="#リファクタリング-1" class="headerlink" title="リファクタリング"></a>リファクタリング</h1><h2 id="パラメータの削除"><a href="#パラメータの削除" class="headerlink" title="パラメータの削除"></a>パラメータの削除</h2><p><a href="https://ja.wikipedia.org/wiki/UUID" target="_blank" rel="noopener">UUID</a> による識別子を導入するため <code>securerandom</code> ライブラリを追加します。なお <code>securerandom</code> は標準添付ライブラリなので <code>gem</code> によるインストールは必要ありません。</p><p><code>lib/sns.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_id.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_name.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_service.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sqlite3'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'securerandom'</span></span><br></pre></td></tr></table></figure><p><strong>エンティティ</strong> のコンストラクタの引数からidを削除して、生成時にUUIDを自動生成するように変更します。</p><p><code>lib/user.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(<span class="symbol">user_name:</span>)</span></span></span><br><span class="line">    @id = UserId.new(SecureRandom.uuid.to_str)</span><br><span class="line">    @name = user_name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>プロダクトコードの変更に合わせてテストコードも修正します。</p><p><code>test/user_service_test.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'ユーザーの重複を判定する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @db = SQLite3::Database.new(<span class="string">'sns.db'</span>)</span><br><span class="line">      sql = <span class="string">'CREATE TABLE USERS(id string, name string)'</span></span><br><span class="line">      @db.execute(sql)</span><br><span class="line"></span><br><span class="line">      @service = UserService.new</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>登録するユーザーがすでに存在している</span></span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      user = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      sql = <span class="string">'INSERT INTO USERS(id, name) VALUES(:id, :name)'</span></span><br><span class="line">      @db.execute(sql, <span class="symbol">id:</span> user.id.value, <span class="symbol">name:</span> user.name.value)</span><br><span class="line"></span><br><span class="line">      assert @service.exist?(user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>登録するユーザーが存在していない</span></span><br><span class="line">      name = UserName.new(<span class="string">'Alice'</span>)</span><br><span class="line">      user = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      refute @service.exist?(user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span></span></span><br><span class="line">      sql = <span class="string">'DROP TABLE USERS'</span></span><br><span class="line">      @db.execute(sql)</span><br><span class="line">      @db.close</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>test/user_test.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'ユーザーを登録する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">      assert_equal <span class="string">'Bob'</span>, @user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満の場合はエラー</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="string">'a'</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が４文字の場合は登録される</span></span><br><span class="line">      user = User.new(</span><br><span class="line">        <span class="symbol">user_name:</span> UserName.new(<span class="string">'abcd'</span>)</span><br><span class="line">      )</span><br><span class="line">      assert_equal <span class="string">'abcd'</span>, user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserId.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'ユーザーを更新する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を更新する</span></span><br><span class="line">      @user.change_name(<span class="string">'Alice'</span>)</span><br><span class="line">      assert_equal <span class="string">'Alice'</span>, @user.name</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'ユーザーの同一性を判断する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じ名前の異なるユーザー</span></span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user2 = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      refute @user.eql?(@user2)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じ名前の同じユーザー</span></span><br><span class="line">      assert @user.eql?(@user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>名前を変更した同じユーザー</span></span><br><span class="line">      @user.change_name(<span class="string">'Alice'</span>)</span><br><span class="line"></span><br><span class="line">      assert @user.eql?(@user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストが正しく動作することが確認出来たらリファクタリング完了です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ rake <span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">ユーザーの重複を判定する</span><br><span class="line">  test_登録するユーザーがすでに存在している                                         PASS (0.12s)</span><br><span class="line">  test_登録するユーザーが存在していない                                           PASS (0.06s)</span><br><span class="line">...</span><br><span class="line">ユーザーを更新する</span><br><span class="line">  test_ユーザー名を更新する                                                 PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.18120s</span><br><span class="line">11 tests, 13 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h1 id="ドメインモデル貧血症"><a href="#ドメインモデル貧血症" class="headerlink" title="ドメインモデル貧血症"></a>ドメインモデル貧血症</h1><p>続いて <strong>エンティティ</strong> にある <code>change_name</code> メソッドに <strong>メソッドの移動</strong> を適用して <strong>ドメインサービス</strong><br>に移動するリファクタリング適用してみましょう。</p><p><code>lib/user.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line">  <span class="keyword">attr_writer</span> <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(<span class="symbol">user_name:</span>)</span></span></span><br><span class="line">    @id = UserId.new(SecureRandom.uuid.to_str)</span><br><span class="line">    @name = user_name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eql?</span><span class="params">(other)</span></span></span><br><span class="line">    @id == other.id</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">==</span><span class="params">(other)</span></span></span><br><span class="line">    other.equal?(self) || other.instance_of?(self.class) &amp;&amp; other.id == id</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hash</span></span></span><br><span class="line">    id.hash</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>lib/user_service.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exist?</span><span class="params">(user)</span></span></span><br><span class="line">    db = SQLite3::Database.new(<span class="string">'sns.db'</span>)</span><br><span class="line">    sql = <span class="string">'SELECT * FROM USERS WHERE name = :name'</span></span><br><span class="line">    result = db.execute(sql, <span class="symbol">name:</span> user.name.value)</span><br><span class="line">    !result.empty?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(user, name)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> name.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    user.name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>test/user_test.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を更新する</span></span><br><span class="line">      service = UserService.new</span><br><span class="line">      service.change_name(@user, UserName.new(<span class="string">'Alice'</span>))</span><br><span class="line">      assert_equal <span class="string">'Alice'</span>, @user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>名前を変更した同じユーザー</span></span><br><span class="line">      service = UserService.new</span><br><span class="line">      service.change_name(@user, UserName.new(<span class="string">'Alice'</span>))</span><br><span class="line"></span><br><span class="line">      assert @user.eql?(@user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>メソッドの移動</strong> の結果 <strong>エンティティ</strong> がスカスカになった上に <strong>値オブジェクト</strong> を外部から更新するためのセッターを追加する必要が発生してしまいカプセル化が破壊されてしまう結果となりました。このような <strong>エンティティ</strong> の実装は <strong>ドメインモデル貧血症</strong> と呼ばれています。このリファクタリングはやりすぎだったようなので変更前に戻しておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout .</span><br></pre></td></tr></table></figure><h1 id="リリース"><a href="#リリース" class="headerlink" title="リリース"></a>リリース</h1><h2 id="静的コード解析"><a href="#静的コード解析" class="headerlink" title="静的コード解析"></a>静的コード解析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop</span><br><span class="line">The following cops were added to RuboCop, but are not configured. Please <span class="built_in">set</span> Enabled to either `<span class="literal">true</span>` or `<span class="literal">false</span>` <span class="keyword">in</span> your `.rubocop.yml` file:</span><br><span class="line"> - Layout/EmptyLinesAroundAttributeAccessor (0.83)</span><br><span class="line"> - Layout/SpaceAroundMethodCallOperator (0.82)</span><br><span class="line"> - Lint/RaiseException (0.81)</span><br><span class="line"> - Lint/StructNewOverride (0.81)</span><br><span class="line"> - Style/ExponentialNotation (0.82)</span><br><span class="line"> - Style/HashEachMethods (0.80)</span><br><span class="line"> - Style/HashTransformKeys (0.80)</span><br><span class="line"> - Style/HashTransformValues (0.80)</span><br><span class="line"> - Style/SlicingWithRange (0.83)</span><br><span class="line">For more information: https://docs.rubocop.org/en/latest/versioning/</span><br><span class="line">Inspecting 7 files</span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line">7 files inspected, no offenses detected</span><br></pre></td></tr></table></figure><h2 id="コードカバレッジ"><a href="#コードカバレッジ" class="headerlink" title="コードカバレッジ"></a>コードカバレッジ</h2><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_itddd/2020060501.png?raw=true" alt="2020060501"></p><h2 id="TODOリスト-2"><a href="#TODOリスト-2" class="headerlink" title="TODOリスト"></a>TODOリスト</h2><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>✓ ユーザーを登録する</p><ul><li><p>✓ IDと名前を持ったユーザーを作成する</p></li><li><p>✓ ユーザー名が３文字未満の場合はエラー</p></li><li><p>✓ ユーザー名を指定しない場合はエラー</p></li><li><p>✓ ユーザー名が４文字の場合は登録される</p></li><li><p>✓ IDを指定しない場合はエラー</p></li></ul></li><li><p>✓ ユーザー名を変更できるようにする</p></li><li><p>✓ ユーザーの同一性を判断できるようにする</p><ul><li><p>✓ 識別子を追加する</p></li><li><p>✓ エンティティの比較のを行う</p></li></ul></li><li><p>✓ ユーザーを重複して登録できないようにする</p></li><li><p>✓ IDを自動生成する</p></li></ul></li></ul><h2 id="ファイル構成"><a href="#ファイル構成" class="headerlink" title="ファイル構成"></a>ファイル構成</h2><pre><code>/main.rb  |--lib/      |       -- sns.rb       -- user.rb       -- user_id.rb       -- user_name.rb       -- user_service.rb  |--test/      |       -- test_helper.rb       -- user_service_test.rb       -- user_test.rb</code></pre><p><strong>/main.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./test/user_test.rb'</span></span><br></pre></td></tr></table></figure><p><strong>/lib/sns.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_id.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_name.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_service.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sqlite3'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'securerandom'</span></span><br></pre></td></tr></table></figure><p><strong>/lib/user.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(<span class="symbol">user_name:</span>)</span></span></span><br><span class="line">    @id = UserId.new(SecureRandom.uuid.to_str)</span><br><span class="line">    @name = user_name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(name)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> name.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eql?</span><span class="params">(other)</span></span></span><br><span class="line">    @id == other.id</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">==</span><span class="params">(other)</span></span></span><br><span class="line">    other.equal?(self) || other.instance_of?(self.class) &amp;&amp; other.id == id</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hash</span></span></span><br><span class="line">    id.hash</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/user_id.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User ID value object</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserId</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/user_name.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User name value object</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserName</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line">    raise <span class="string">'ユーザー名は3文字以上です。'</span> <span class="keyword">if</span> value.length &lt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/user_service.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UserService</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exist?</span><span class="params">(user)</span></span></span><br><span class="line">    db = SQLite3::Database.new(<span class="string">'sns.db'</span>)</span><br><span class="line">    sql = <span class="string">'SELECT * FROM USERS WHERE name = :name'</span></span><br><span class="line">    result = db.execute(sql, <span class="symbol">name:</span> user.name.value)</span><br><span class="line">    !result.empty?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/test/test_helper.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use! [Minitest::Reporters::SpecReporter.new(<span class="symbol">color:</span> <span class="literal">true</span>)]</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br></pre></td></tr></table></figure><p><strong>/test/user_service_test.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/sns.rb'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'ユーザーの重複を判定する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @db = SQLite3::Database.new(<span class="string">'sns.db'</span>)</span><br><span class="line">      sql = <span class="string">'CREATE TABLE USERS(id string, name string)'</span></span><br><span class="line">      @db.execute(sql)</span><br><span class="line"></span><br><span class="line">      @service = UserService.new</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>登録するユーザーがすでに存在している</span></span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      user = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      sql = <span class="string">'INSERT INTO USERS(id, name) VALUES(:id, :name)'</span></span><br><span class="line">      @db.execute(sql, <span class="symbol">id:</span> user.id.value, <span class="symbol">name:</span> user.name.value)</span><br><span class="line"></span><br><span class="line">      assert @service.exist?(user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>登録するユーザーが存在していない</span></span><br><span class="line">      name = UserName.new(<span class="string">'Alice'</span>)</span><br><span class="line">      user = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      refute @service.exist?(user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span></span></span><br><span class="line">      sql = <span class="string">'DROP TABLE USERS'</span></span><br><span class="line">      @db.execute(sql)</span><br><span class="line">      @db.close</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/test/user_test.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/sns.rb'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'ユーザーを登録する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">      assert_equal <span class="string">'Bob'</span>, @user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満の場合はエラー</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="string">'a'</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が４文字の場合は登録される</span></span><br><span class="line">      user = User.new(<span class="symbol">user_name:</span> UserName.new(<span class="string">'abcd'</span>))</span><br><span class="line">      assert_equal <span class="string">'abcd'</span>, user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserId.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'ユーザーを更新する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を更新する</span></span><br><span class="line">      @user.change_name(<span class="string">'Alice'</span>)</span><br><span class="line">      assert_equal <span class="string">'Alice'</span>, @user.name</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'ユーザーの同一性を判断する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じ名前の異なるユーザー</span></span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user2 = User.new(<span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      refute @user.eql?(@user2)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じ名前の同じユーザー</span></span><br><span class="line">      assert @user.eql?(@user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>名前を変更した同じユーザー</span></span><br><span class="line">      @user.change_name(<span class="string">'Alice'</span>)</span><br><span class="line"></span><br><span class="line">      assert @user.eql?(@user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="ふりかえり"><a href="#ふりかえり" class="headerlink" title="ふりかえり"></a>ふりかえり</h1><p>まず、<strong>ユーザーストーリー</strong> から追加の <strong>TODOリスト</strong> を作成しました。<br><strong>TODOリスト</strong> の内容を実装するにあたって今回は <strong>仮実装を経て本実装へ</strong> のアプローチで作業を進めていきました。</p><p>続いて、 <strong>クラスの抽出</strong> で <strong>ドメインサービス</strong> を抽出して <strong>エンティティ</strong> から対象メソッドを <strong>メソッドの移動</strong> で <strong>ドメインサービス</strong> に移しました。</p><p>UUIDによる識別子を導入した後 <strong>エンティティ</strong> から <strong>メソッドの移動</strong> をさらに実施した結果 <strong>ドメインモデル貧血症</strong> を起こしてしまったので変更を取り消しました。</p><p>次回は <strong>リポジトリ</strong> の実装に取り組んでみたいと思います。</p>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
          <category> プログラミング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> テスト駆動開発 </tag>
            
            <tag> Ruby </tag>
            
            <tag> ドメイン駆動設計 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>テスト駆動開発から始めるドメイン駆動設計入門 ~エンティティ~</title>
      <link href="/2020/05/02/1588396119/"/>
      <url>/2020/05/02/1588396119/</url>
      
        <content type="html"><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>この記事は書籍<a href="https://amzn.to/2xL7YIi" target="_blank" rel="noopener">『ドメイン駆動設計入門 ボトムアップでわかる! ドメイン駆動設計の基本』</a>で解説されているドメイン駆動設計パターンをテスト駆動開発で実装したものです。</p><p>言語は Ruby です。Ruby でのテスト駆動開発の詳細に関しては<a href="https://k2works.github.io/2020/04/16/1587009564/">こちらの記事</a>をご参照ください。<a href="https://gitpod.io/#https://github.com/k2works/tdd_itddd/tree/ruby" target="_blank" rel="noopener">Gitpod</a>からブラウザ開発環境が利用できるのでお手軽に開発を始めることが出来ます。</p><a id="more"></a><h1 id="ユーザーストーリー"><a href="#ユーザーストーリー" class="headerlink" title="ユーザーストーリー"></a>ユーザーストーリー</h1><p>前回の <strong>値オブジェクト</strong> に続いて今回は <strong>エンティティ</strong> を作成します。まず <strong>ユーザーストーリー</strong> から追加作業を <strong>TODO リスト</strong> に追加します。</p><pre><code>利用者としてユーザーを管理できるようにしたいなぜならユーザーはシステムを利用するために必要だから</code></pre><h1 id="TODO-リスト"><a href="#TODO-リスト" class="headerlink" title="TODO リスト"></a>TODO リスト</h1><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>✓ ユーザーを登録する</p><ul><li><p>✓ ID と名前を持ったユーザーを作成する</p></li><li><p>✓ ユーザー名が３文字未満の場合はエラー</p></li><li><p>✓ ユーザー名を指定しない場合はエラー</p></li><li><p>✓ ユーザー名が４文字の場合は登録される</p></li><li><p>✓ ID を指定しない場合はエラー</p></li></ul></li><li><p>❏ ユーザー名を変更できるようにする</p></li><li><p>❏ ユーザーの同一性を判断できるようにする</p><ul><li><p>❏ 識別子を追加する</p></li><li><p>❏ エンティティの比較のを行う</p></li></ul></li></ul></li></ul><h1 id="明白な実装"><a href="#明白な実装" class="headerlink" title="明白な実装"></a>明白な実装</h1><h2 id="ユーザー名を変更する"><a href="#ユーザー名を変更する" class="headerlink" title="ユーザー名を変更する"></a>ユーザー名を変更する</h2><p>追加した <strong>TODO リスト</strong> を <strong>テストファースト</strong> で片づけるため最初にテストコードの追加から始めます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'ユーザーを更新する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を更新する</span></span><br><span class="line">      @user.change_name(<span class="string">'Alice'</span>)</span><br><span class="line">      assert_equal <span class="string">'Alice'</span>, @user.name</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストを実行して失敗することを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/user_test.rb</span><br><span class="line">Started with run options --seed 16647</span><br><span class="line"></span><br><span class="line">ユーザーを登録する</span><br><span class="line">  test_IDを指定しない場合はエラー                                             PASS (0.00s)</span><br><span class="line">  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)</span><br><span class="line">  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)</span><br><span class="line">  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)</span><br><span class="line"></span><br><span class="line">ユーザーを更新する</span><br><span class="line">  test_ユーザー名を更新する                                                ERROR (0.00s)</span><br><span class="line">Minitest::UnexpectedError:         NoMethodError: undefined method change_name<span class="string">' for #&lt;User:0x00007fdc9101e850&gt;</span></span><br><span class="line"><span class="string">            test/user_test.rb:61:in `test_ユーザー名を更新する'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00382s</span><br><span class="line">6 tests, 7 assertions, 0 failures, 1 errors, 0 skips</span><br></pre></td></tr></table></figure><p>続いて、メソッドの追加します。簡単な実装なので <strong>明白な実装</strong> で片づけるとします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(<span class="symbol">user_id:</span>, <span class="symbol">user_name:</span>)</span></span></span><br><span class="line">    @id = user_id</span><br><span class="line">    @name = user_name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(name)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> name.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>続いて、テストが通ることを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/user_test.rb</span><br><span class="line">Started with run options --seed 6624</span><br><span class="line"></span><br><span class="line">ユーザーを登録する</span><br><span class="line">  test_IDを指定しない場合はエラー                                             PASS (0.00s)</span><br><span class="line">  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)</span><br><span class="line">  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)</span><br><span class="line">  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)</span><br><span class="line"></span><br><span class="line">ユーザーを更新する</span><br><span class="line">  test_ユーザー名を更新する                                                 PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00127s</span><br><span class="line">6 tests, 8 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h2 id="ユーザーの同一性を判断する"><a href="#ユーザーの同一性を判断する" class="headerlink" title="ユーザーの同一性を判断する"></a>ユーザーの同一性を判断する</h2><p><strong>エンティティ</strong> として同一性を判断するためのテストケースを追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'ユーザーの同一性を判断する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じ名前の異なるユーザー</span></span><br><span class="line">      id = UserId.new(<span class="string">'2'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user2 = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      refute @user.eql?(@user2)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じ名前の同じユーザー</span></span><br><span class="line">      assert @user.eql?(@user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>名前を変更した同じユーザー</span></span><br><span class="line">      @user.change_name(<span class="string">'Alice'</span>)</span><br><span class="line"></span><br><span class="line">      assert @user.eql?(@user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/user_test.rb</span><br><span class="line">Started with run options --seed 20456</span><br><span class="line"></span><br><span class="line">ユーザーの同一性を判断する</span><br><span class="line">  test_同じ名前の同じユーザー                                                PASS (0.00s)</span><br><span class="line">  test_同じ名前の異なるユーザー                                               PASS (0.00s)</span><br><span class="line">  test_名前を変更した同じユーザー                                              PASS (0.00s)</span><br><span class="line"></span><br><span class="line">ユーザーを更新する</span><br><span class="line">  test_ユーザー名を更新する                                                 PASS (0.00s)</span><br><span class="line"></span><br><span class="line">ユーザーを登録する</span><br><span class="line">  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)</span><br><span class="line">  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)</span><br><span class="line">  test_IDを指定しない場合はエラー                                             PASS (0.00s)</span><br><span class="line">  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00166s</span><br><span class="line">9 tests, 11 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>比較メソッドを識別子で判定するようにオーバーライドします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(<span class="symbol">user_id:</span>, <span class="symbol">user_name:</span>)</span></span></span><br><span class="line">    @id = user_id</span><br><span class="line">    @name = user_name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(name)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> name.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eql?</span><span class="params">(other)</span></span></span><br><span class="line">    @id == other.id</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> $ ruby <span class="built_in">test</span>/user_test.rb</span><br><span class="line">Started with run options --seed 1326</span><br><span class="line"></span><br><span class="line">ユーザーを登録する</span><br><span class="line">  test_IDを指定しない場合はエラー                                             PASS (0.00s)</span><br><span class="line">  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)</span><br><span class="line">  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)</span><br><span class="line">  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)</span><br><span class="line"></span><br><span class="line">ユーザーの同一性を判断する</span><br><span class="line">  test_同じ名前の同じユーザー                                                PASS (0.00s)</span><br><span class="line">  test_同じ名前の異なるユーザー                                               PASS (0.00s)</span><br><span class="line">  test_名前を変更した同じユーザー                                              PASS (0.00s)</span><br><span class="line"></span><br><span class="line">ユーザーを更新する</span><br><span class="line">  test_ユーザー名を更新する                                                 PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00226s</span><br><span class="line">9 tests, 11 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h1 id="リファクタリング"><a href="#リファクタリング" class="headerlink" title="リファクタリング"></a>リファクタリング</h1><h2 id="メソッドの委譲"><a href="#メソッドの委譲" class="headerlink" title="メソッドの委譲"></a>メソッドの委譲</h2><p><code>eql?</code> メソッドを <code>==</code> に委譲します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(<span class="symbol">user_id:</span>, <span class="symbol">user_name:</span>)</span></span></span><br><span class="line">    @id = user_id</span><br><span class="line">    @name = user_name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(name)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> name.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eql?</span><span class="params">(other)</span></span></span><br><span class="line">    <span class="keyword">self</span> == other</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">==</span><span class="params">(other)</span></span></span><br><span class="line">    other.equal?(self) || (other.instance_of?(self.class) &amp;&amp; other.id == id</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hash</span></span></span><br><span class="line">    id.hash</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>変更によりコードが壊れていないことを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/user_test.rb</span><br><span class="line">Started with run options --seed 37624</span><br><span class="line"></span><br><span class="line">ユーザーの同一性を判断する</span><br><span class="line">  test_同じ名前の異なるユーザー                                               PASS (0.00s)</span><br><span class="line">  test_名前を変更した同じユーザー                                              PASS (0.00s)</span><br><span class="line">  test_同じ名前の同じユーザー                                                PASS (0.00s)</span><br><span class="line"></span><br><span class="line">ユーザーを更新する</span><br><span class="line">  test_ユーザー名を更新する                                                 PASS (0.00s)</span><br><span class="line"></span><br><span class="line">ユーザーを登録する</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)</span><br><span class="line">  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)</span><br><span class="line">  test_IDを指定しない場合はエラー                                             PASS (0.00s)</span><br><span class="line">  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)</span><br><span class="line">  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00164s</span><br><span class="line">9 tests, 11 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h2 id="モジュール分割"><a href="#モジュール分割" class="headerlink" title="モジュール分割"></a>モジュール分割</h2><p>テストコードの基本部分をヘルパーとして分割して共通利用できるようにしておきます。</p><p><code>test_helper.rb</code> を作成します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use! [Minitest::Reporters::SpecReporter.new(<span class="symbol">color:</span> <span class="literal">true</span>)]</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br></pre></td></tr></table></figure><p><code>user_test.rb</code> の先頭部部を変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/sns.rb'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="リリース"><a href="#リリース" class="headerlink" title="リリース"></a>リリース</h1><h2 id="静的コード解析"><a href="#静的コード解析" class="headerlink" title="静的コード解析"></a>静的コード解析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop</span><br><span class="line">The following cops were added to RuboCop, but are not configured. Please <span class="built_in">set</span> Enabled to either `<span class="literal">true</span>` or `<span class="literal">false</span>` <span class="keyword">in</span> your `.rubocop.yml` file:</span><br><span class="line"> - Lint/RaiseException (0.81)</span><br><span class="line"> - Lint/StructNewOverride (0.81)</span><br><span class="line"> - Style/HashEachMethods (0.80)</span><br><span class="line"> - Style/HashTransformKeys (0.80)</span><br><span class="line"> - Style/HashTransformValues (0.80)</span><br><span class="line">For more information: https://docs.rubocop.org/en/latest/versioning/</span><br><span class="line">The following cops were added to RuboCop, but are not configured. Please <span class="built_in">set</span> Enabled to either `<span class="literal">true</span>` or `<span class="literal">false</span>` <span class="keyword">in</span> your `.rubocop.yml` file:</span><br><span class="line"> - Lint/RaiseException (0.81)</span><br><span class="line"> - Lint/StructNewOverride (0.81)</span><br><span class="line"> - Style/HashEachMethods (0.80)</span><br><span class="line"> - Style/HashTransformKeys (0.80)</span><br><span class="line"> - Style/HashTransformValues (0.80)</span><br><span class="line">For more information: https://docs.rubocop.org/en/latest/versioning/</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">5 files inspected, no offenses detected</span><br></pre></td></tr></table></figure><h2 id="コードカバレッジ"><a href="#コードカバレッジ" class="headerlink" title="コードカバレッジ"></a>コードカバレッジ</h2><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_itddd/2020042201.png?raw=true" alt="2020042201"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_itddd/2020042202.png?raw=true" alt="2020042202"></p><h2 id="TODO-リスト-1"><a href="#TODO-リスト-1" class="headerlink" title="TODO リスト"></a>TODO リスト</h2><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>✓ ユーザーを登録する</p><ul><li><p>✓ ID と名前を持ったユーザーを作成する</p></li><li><p>✓ ユーザー名が３文字未満の場合はエラー</p></li><li><p>✓ ユーザー名を指定しない場合はエラー</p></li><li><p>✓ ユーザー名が４文字の場合は登録される</p></li><li><p>✓ ID を指定しない場合はエラー</p></li></ul></li><li><p>✓ ユーザー名を変更できるようにする</p></li><li><p>✓ ユーザーの同一性を判断できるようにする</p><ul><li><p>✓ 識別子を追加する</p></li><li><p>✓ エンティティの比較のを行う</p></li></ul></li></ul></li></ul><h2 id="ファイル構成"><a href="#ファイル構成" class="headerlink" title="ファイル構成"></a>ファイル構成</h2><pre><code>/main.rb  |--lib/      |       -- sns.rb       -- user_id.rb       -- user_name.rb       -- user.rb  |--test/      |       -- test_helper.rb       -- user_test.rb</code></pre><p><strong>/main.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./test/user_test.rb'</span></span><br></pre></td></tr></table></figure><p><strong>/lib/sns.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_id.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_name.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user.rb'</span></span><br></pre></td></tr></table></figure><p><strong>/lib/user_id.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User ID value object</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserId</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/user_name.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User name value object</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserName</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line">    raise <span class="string">'ユーザー名は3文字以上です。'</span> <span class="keyword">if</span> value.length &lt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/user.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(<span class="symbol">user_id:</span>, <span class="symbol">user_name:</span>)</span></span></span><br><span class="line">    @id = user_id</span><br><span class="line">    @name = user_name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(name)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> name.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eql?</span><span class="params">(other)</span></span></span><br><span class="line">    @id == other.id</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">==</span><span class="params">(other)</span></span></span><br><span class="line">    other.equal?(self) || other.instance_of?(self.class) &amp;&amp; other.id == id</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hash</span></span></span><br><span class="line">    id.hash</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/test/test_helper.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use! [Minitest::Reporters::SpecReporter.new(<span class="symbol">color:</span> <span class="literal">true</span>)]</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br></pre></td></tr></table></figure><p><strong>/test/user_test.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/sns.rb'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'ユーザーを登録する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">      assert_equal <span class="string">'1'</span>, @user.id.value</span><br><span class="line">      assert_equal <span class="string">'Bob'</span>, @user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満の場合はエラー</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="string">'a'</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が４文字の場合は登録される</span></span><br><span class="line">      user = User.new(<span class="symbol">user_id:</span> UserId.new(<span class="string">'1'</span>),</span><br><span class="line">                      <span class="symbol">user_name:</span> UserName.new(<span class="string">'abcd'</span>))</span><br><span class="line">      assert_equal <span class="string">'abcd'</span>, user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserId.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'ユーザーを更新する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を更新する</span></span><br><span class="line">      @user.change_name(<span class="string">'Alice'</span>)</span><br><span class="line">      assert_equal <span class="string">'Alice'</span>, @user.name</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'ユーザーの同一性を判断する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じ名前の異なるユーザー</span></span><br><span class="line">      id = UserId.new(<span class="string">'2'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user2 = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line"></span><br><span class="line">      refute @user.eql?(@user2)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じ名前の同じユーザー</span></span><br><span class="line">      assert @user.eql?(@user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>名前を変更した同じユーザー</span></span><br><span class="line">      @user.change_name(<span class="string">'Alice'</span>)</span><br><span class="line"></span><br><span class="line">      assert @user.eql?(@user)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="ふりかえり"><a href="#ふりかえり" class="headerlink" title="ふりかえり"></a>ふりかえり</h1><p>まず、<strong>ユーザーストーリー</strong> から追加の <strong>TODO リスト</strong> を作成しました。<br><strong>テストファースト</strong> で最初に失敗するテストから始めて <strong>明白な実装</strong> によりユーザ名を更新するメソッドを追加しました。</p><p>続いて、<strong>値オブジェクト</strong> であるユーザーオブジェクトを <strong>エンティティ</strong><br>として扱えるようにするためユーザーの同一性を判断するためのメソッドを追加しました。<br>そして、メソッドの委譲のリファクタリングを実施後、テストを実行してコードが壊れていないことを確認しました。</p><p>仕上げに、ヘルパーファイルを抽出してテストファイルで共有できるようにしました。</p><p>今回のテーマである <strong>エンティティ</strong> に関しては、書籍『リファクタリング』第８章　データの再編成　値から参照への変更で言及されています。</p><blockquote><p>多くのシステムにおいて、参照オブジェクトと値オブジェクトを分けて考えることが役立ちます。「参照オブジェクト」とは、顧客とか勘定といったもので、実世界における１個のオブジェクトを表しており、それらが同じものかどうかを調べるには、オブジェクト識別が用いられます。「値オブジェクト」とは、日付やお金のようなもので、もっぱら、それ自体のデータ値によって定義されます。それらのコピーはいくつあってもかまいません。</p><p>— 新装版 リファクタリング</p></blockquote><p><strong>値オブジェクト</strong> と <strong>エンティティ</strong> に関してはリファクタリングカタログで <strong>値から参照への変更</strong> と <strong>参照から値への変更</strong> として解説されています。</p><blockquote><p>値から参照への変更</p><p>同じインスタンスが多数存在するクラスがある。それらを１つのオブジェクトに置き換えたい。</p><p>そのオブジェクトを参照オブジェクトに変える。</p><p>— 新装版 リファクタリング</p></blockquote><blockquote><p>参照から値への変更</p><p>小さくて、不変で、コントロールが煩わしい参照オブジェクトがある。</p><p>値オブジェクトに変える。</p><p>— 新装版 リファクタリング</p></blockquote><p>次回は <strong>ドメインサービス</strong> の実装に取り組んでみたいと思います。</p>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
          <category> プログラミング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> テスト駆動開発 </tag>
            
            <tag> Ruby </tag>
            
            <tag> ドメイン駆動設計 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>テスト駆動開発から始めるドメイン駆動設計入門 ~値オブジェクト~</title>
      <link href="/2020/04/21/1587434415/"/>
      <url>/2020/04/21/1587434415/</url>
      
        <content type="html"><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>この記事は書籍<a href="https://amzn.to/2xL7YIi" target="_blank" rel="noopener">『ドメイン駆動設計入門 ボトムアップでわかる! ドメイン駆動設計の基本』</a>で解説されているドメイン駆動設計パターンをテスト駆動開発で実装したものです。</p><p>言語は Ruby です。Ruby でのテスト駆動開発の詳細に関しては<a href="https://k2works.github.io/2020/04/16/1587009564/">こちらの記事</a>をご参照ください。<a href="https://gitpod.io/#https://github.com/k2works/tdd_itddd/tree/ruby" target="_blank" rel="noopener">Gitpod</a>からブラウザ開発環境が利用できるのでお手軽に開発を始めることが出来ます。</p><a id="more"></a><h1 id="ユーザーストーリー"><a href="#ユーザーストーリー" class="headerlink" title="ユーザーストーリー"></a>ユーザーストーリー</h1><p>まず <strong>ユーザーストーリー</strong> をもとに仕様を整理します。</p><blockquote><p>ユーザーストーリーとは、ソフトウェアシステムに求められるふるまいをまとめたものだ。アジャイルソフトウェア開発の世界で広く使われており、大量の機能を細かく分解して計画作りに生かせるようにしている。<br>同じような概念を表す用語としてフィーチャーという言い方もあるが、<br>最近のアジャイル界隈では「ストーリー」とか「ユーザーストーリー」とかいう用語のほうが広まっている。</p><p>— Martin Fowler’s Bliki (ja) <a href="https://bliki-ja.github.io/UserStory" target="_blank" rel="noopener">https://bliki-ja.github.io/UserStory</a></p></blockquote><p>SNS(ソーシャルネットワークサービス)のユーザー機能ということなので以下の <strong>ユーザーストーリー</strong> を作成しました。</p><pre><code>利用者としてユーザーを管理できるようにしたいなぜならユーザーはシステムを利用するために必要だから</code></pre><h1 id="TODO-リスト"><a href="#TODO-リスト" class="headerlink" title="TODO リスト"></a>TODO リスト</h1><p><strong>ユーザーストーリー</strong> を作成したらそれをもとに <strong>TODO リスト</strong> を作成します。<br><strong>TODO リスト</strong> はプログラムとして実行できる粒度で具体的に記述します。</p><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>❏ ユーザーを登録する</p><ul><li>❏ ID と名前を持ったユーザーを作成する</li></ul></li></ul></li></ul><h1 id="仮実装"><a href="#仮実装" class="headerlink" title="仮実装"></a>仮実装</h1><h2 id="ユーザーを登録する"><a href="#ユーザーを登録する" class="headerlink" title="ユーザーを登録する"></a>ユーザーを登録する</h2><p>さっそく <strong>TODO リスト</strong> の１つ目を片付けましょう。<br>まずは <strong>テストファースト</strong> で最初に失敗するコードを書きます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_greeting</span></span></span><br><span class="line">    assert_equal <span class="string">'hello world'</span>, greeting</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span></span></span><br><span class="line">  <span class="string">'hello world'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>サンプルコードを以下のコードに書き換えてテストを実行します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    user = User.new</span><br><span class="line">    assert_equal <span class="string">'1'</span>, user.id</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, user.name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストは失敗しました。 <code>NameError: uninitialized constant UserTest::User</code> クラスが定義されていないからですね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/hello_test.rb</span><br><span class="line">Started with run options --seed 44125</span><br><span class="line"></span><br><span class="line">UserTest</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                        ERROR (0.00s)</span><br><span class="line">Minitest::UnexpectedError:         NameError: uninitialized constant UserTest::User</span><br><span class="line">            <span class="built_in">test</span>/hello_test.rb:7:<span class="keyword">in</span> test_IDと名前を持ったユーザーを作成する</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00135s</span><br><span class="line">1 tests, 0 assertions, 0 failures, 1 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストをパスさせるために User クラスを追加します。<br>まずはテストをパスさせるために <strong>仮実装</strong> でベタ書きのコードを実装します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    user = User.new</span><br><span class="line">    assert_equal <span class="string">'1'</span>, user.id</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, user.name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @id = <span class="string">'1'</span></span><br><span class="line">    @name = <span class="string">'Bob'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストをパスさせてレッドからグリーンになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/hello_test.rb</span><br><span class="line">Started with run options --seed 55832</span><br><span class="line"></span><br><span class="line">UserTest</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00072s</span><br><span class="line">1 tests, 2 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h1 id="仮実装から実装へ"><a href="#仮実装から実装へ" class="headerlink" title="仮実装から実装へ"></a>仮実装から実装へ</h1><h2 id="ユーザーを登録する-1"><a href="#ユーザーを登録する-1" class="headerlink" title="ユーザーを登録する"></a>ユーザーを登録する</h2><p>テストは通りましたがコードはベタ書きのままです。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    user = User.new</span><br><span class="line">    assert_equal <span class="string">'1'</span>, user.id</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, user.name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @id = <span class="string">'1'</span></span><br><span class="line">    @name = <span class="string">'Bob'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>仮実装</strong> のままでは別のユーザーを作ることが出来ないので、コンストラクタ経由で作成できるようにします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    user = User.new(<span class="string">'1'</span>, <span class="string">'Bob'</span>)</span><br><span class="line">    assert_equal <span class="string">'1'</span>, user.id</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, user.name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id, name)</span></span></span><br><span class="line">    @id = id</span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストが通りました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/hello_test.rb</span><br><span class="line">Started with run options --seed 6402</span><br><span class="line"></span><br><span class="line">UserTest</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00089s</span><br><span class="line">1 tests, 2 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p><strong>仮実装から実装へ</strong> を経て一つ目の <strong>TODO リスト</strong> を片付けたのでここでバージョン管理システムを使ってコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'test: ユーザーを登録する'</span></span><br></pre></td></tr></table></figure><p>以下、 <strong>TODO リスト</strong> を片付けるたびにコミットしていきます。</p><h1 id="リファクタリング"><a href="#リファクタリング" class="headerlink" title="リファクタリング"></a>リファクタリング</h1><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>❏ ユーザーを登録する</p><ul><li>✓ ID と名前を持ったユーザーを作成する</li></ul></li></ul></li></ul><p>レッド・グリーンときたので続いて <strong>リファクタリング</strong> を実施します。</p><h2 id="メソッドの抽出"><a href="#メソッドの抽出" class="headerlink" title="メソッドの抽出"></a>メソッドの抽出</h2><p>本来はコードの重複が発生してからやるのですが今回は予め <strong>メソッドの抽出</strong> を適用してフィクスチャーを抽出しておきます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    user = User.new(<span class="string">'1'</span>, <span class="string">'Bob'</span>)</span><br><span class="line">    assert_equal <span class="string">'1'</span>, user.id</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, user.name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Ruby のテスティングフレームワーク minitest ではフィクスチャーは setup メソッドです。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @user = User.new(<span class="string">'1'</span>, <span class="string">'Bob'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @user.id</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, @user.name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストが壊れていないことを確認したらコミットします。</p><h1 id="明白な実装"><a href="#明白な実装" class="headerlink" title="明白な実装"></a>明白な実装</h1><p>続いて <strong>TODO リスト</strong> を追加します。</p><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>❏ ユーザーを登録する</p><ul><li><p>✓ ID と名前を持ったユーザーを作成する</p></li><li><p>❏ <strong>ユーザー名が３文字未満の場合はエラー</strong></p></li></ul></li></ul></li></ul><h2 id="ユーザーを登録する-2"><a href="#ユーザーを登録する-2" class="headerlink" title="ユーザーを登録する"></a>ユーザーを登録する</h2><p>追加した <strong>TODO リスト</strong> に取り掛かります。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @user = User.new(<span class="string">'1'</span>, <span class="string">'Bob'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @user.id</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, @user.name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id, name)</span></span></span><br><span class="line">    @id = id</span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>まず、失敗するテストを書いて <strong>明白な実装</strong> でテストをパスするようにします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @user = User.new(<span class="string">'1'</span>, <span class="string">'Bob'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @user.id</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, @user.name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満の場合はエラー</span></span><br><span class="line">    e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">      User.new(<span class="string">'1'</span>, <span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id, name)</span></span></span><br><span class="line">    raise <span class="string">'ユーザー名は3文字以上です。'</span> <span class="keyword">if</span> name.length &lt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    @id = id</span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>レッドからグリーンになったことを確認したらコミットします。</p><h1 id="リファクタリング-1"><a href="#リファクタリング-1" class="headerlink" title="リファクタリング"></a>リファクタリング</h1><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>❏ ユーザーを登録する</p><ul><li><p>✓ ID と名前を持ったユーザーを作成する</p></li><li><p>✓ ユーザー名が３文字未満の場合はエラー</p></li></ul></li></ul></li></ul><p>レッド・グリーン・リファクタリングです。</p><h2 id="クラスの抽出"><a href="#クラスの抽出" class="headerlink" title="クラスの抽出"></a>クラスの抽出</h2><p><strong>クラスの抽出</strong> を適用して User クラスから <strong>値オブジェクト</strong> を抽出する <strong>リファクタリング</strong> を適用します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @user = User.new(<span class="string">'1'</span>, <span class="string">'Bob'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @user.id</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, @user.name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満で新規登録する場合はエラー</span></span><br><span class="line">    e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">      User.new(<span class="number">1</span>, <span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id, name)</span></span></span><br><span class="line">    raise <span class="string">'ユーザー名は3文字以上です。'</span> <span class="keyword">if</span> name.length &lt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    @id = id</span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>まずは UserId クラスを抽出します。テストコードを UserId クラスを使って呼び出すように変更したらエラーを修正してグリーンの状態を維持します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">    @user = User.new(id, <span class="string">'Bob'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @user.id.value</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, @user.name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserId</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>続いて UserName クラスを抽出します。テストコードも同様に変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">    name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">    @user = User.new(id, name)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @user.id.value</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, @user.name.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserName</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="string">'ユーザー名は3文字以上です。'</span> <span class="keyword">if</span> value.length &lt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストコードを修正してグリーンになったらコミットして <strong>クラスの抽出</strong> の <strong>リファクタリング</strong> 完了です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ruby</span> <span class="built_in">test</span>/hello_test.rb</span><br><span class="line">Started with run options --seed 59746</span><br><span class="line"></span><br><span class="line">UserTest</span><br><span class="line">  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00071s</span><br><span class="line">2 tests, 4 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h2 id="set-メソッドの削除"><a href="#set-メソッドの削除" class="headerlink" title="set メソッドの削除"></a>set メソッドの削除</h2><p><strong>クラスの抽出</strong> により <strong>値オブジェクト</strong> を抽出することは出来ましたがインスタンスの値が変更可能な状態です。<br><strong>set メソッドの削除</strong> を適用して <strong>値オブジェクト</strong> の要求を満たす不変オブジェクトに <strong>リファクタリング</strong> しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">    name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">    @user = User.new(id, name)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @user.id.value</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, @user.name.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満の場合はエラー</span></span><br><span class="line">    e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">      UserName.new(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserId</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserName</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="string">'ユーザー名は3文字以上です。'</span> <span class="keyword">if</span> value.length &lt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id, name)</span></span></span><br><span class="line">    @id = id</span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>アックセッサメソッドを読み取り専用に変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserId</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserName</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストが壊れていないことを確認したらコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/hello_test.rb</span><br><span class="line">Started with run options --seed 62273</span><br><span class="line"></span><br><span class="line">UserTest</span><br><span class="line">  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00075s</span><br><span class="line">2 tests, 4 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h1 id="例外ケース"><a href="#例外ケース" class="headerlink" title="例外ケース"></a>例外ケース</h1><p>正常系の実装が出来たので続いて例外系の実装に入りたいと思います。<br>まず <strong>TODO リスト</strong> を追加します。</p><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>❏ ユーザーを登録する</p><ul><li><p>✓ ID と名前を持ったユーザーを作成する</p></li><li><p>✓ ユーザー名が３文字未満の場合はエラー</p></li><li><p>❏ <strong>ユーザー名が４文字の場合は登録される</strong></p></li><li><p>❏ <strong>ユーザー名を指定しない場合はエラー</strong></p></li><li><p>❏ <strong>ID を指定しない場合はエラー</strong></p></li></ul></li></ul></li></ul><h2 id="ユーザーを登録する-3"><a href="#ユーザーを登録する-3" class="headerlink" title="ユーザーを登録する"></a>ユーザーを登録する</h2><p>追加した <strong>TODO リスト</strong> をテストを壊さないように１つづつ片付けていくとしましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">    name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">    @user = User.new(id, name)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @user.id.value</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, @user.name.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満の場合はエラー</span></span><br><span class="line">    e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">      UserName.new(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserId</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserName</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="string">'ユーザー名は3文字以上です。'</span> <span class="keyword">if</span> value.length &lt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id, name)</span></span></span><br><span class="line">    @id = id</span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>実装後のコードです。<br>実際は１つテストコードを追加したらプロダクトコードを実装してレッド・グリーンのサイクルを回しています。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">    name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">    @user = User.new(id, name)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @user.id.value</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, @user.name.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満の場合はエラー</span></span><br><span class="line">    e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">      UserName.new(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が4文字の場合は登録される</span></span><br><span class="line">    user = User.new(UserId.new(<span class="string">'1'</span>), UserName.new(<span class="string">'abcd'</span>))</span><br><span class="line">    assert_equal <span class="string">'abcd'</span>, user.name.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を指定しない場合はエラー</span></span><br><span class="line">    assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">      UserName.new(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>を指定しない場合はエラー</span></span><br><span class="line">    assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">      UserId.new(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserId</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserName</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line">    raise <span class="string">'ユーザー名は3文字以上です。'</span> <span class="keyword">if</span> value.length &lt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id, name)</span></span></span><br><span class="line">    @id = id</span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>例外系の機能を追加してテストもパスしたのでコミットします。</p><h1 id="リファクタリング-2"><a href="#リファクタリング-2" class="headerlink" title="リファクタリング"></a>リファクタリング</h1><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>✓ ユーザーを登録する</p><ul><li><p>✓ ID と名前を持ったユーザーを作成する</p></li><li><p>✓ ユーザー名が３文字未満の場合はエラー</p></li><li><p>✓ ユーザー名を指定しない場合はエラー</p></li><li><p>✓ ユーザー名が４文字の場合は登録される</p></li><li><p>✓ ID を指定しない場合はエラー</p></li></ul></li></ul></li></ul><p>今回はコードの可読性を改善する観点で <strong>リファクタリング</strong> を実施してみたいと思います。</p><h2 id="メソッドのインライン化"><a href="#メソッドのインライン化" class="headerlink" title="メソッドのインライン化"></a>メソッドのインライン化</h2><p>テストコードが増えてきましたここでテストコードをグルーピングするため <strong>メソッドのインライン化</strong> を適用します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">    name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">    @user = User.new(id, name)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @user.id.value</span><br><span class="line">    assert_equal <span class="string">'Bob'</span>, @user.name.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満の場合はエラー</span></span><br><span class="line">    e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">      UserName.new(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が４文字の場合は登録される</span></span><br><span class="line">    user = User.new(UserId.new(<span class="string">'1'</span>), UserName.new(<span class="string">'abcd'</span>))</span><br><span class="line">    assert_equal <span class="string">'abcd'</span>, user.name.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を指定しない場合はエラー</span></span><br><span class="line">    assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">      UserName.new(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>を指定しない場合はエラー</span></span><br><span class="line">    assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">      UserId.new(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserId</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserName</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line">    raise <span class="string">'ユーザー名は3文字以上です。'</span> <span class="keyword">if</span> value.length &lt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id, name)</span></span></span><br><span class="line">    @id = id</span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストコードの構造を <strong>TODO リスト</strong> の構造に合わせることで可読性を改善します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'ユーザーを登録する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(id, name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">      assert_equal <span class="string">'1'</span>, @user.id.value</span><br><span class="line">      assert_equal <span class="string">'Bob'</span>, @user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満の場合はエラー</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="string">'a'</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が４文字の場合は登録される</span></span><br><span class="line">      user = User.new(UserId.new(<span class="string">'1'</span>), UserName.new(<span class="string">'abcd'</span>))</span><br><span class="line">      assert_equal <span class="string">'abcd'</span>, user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserId.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>実行結果もわかりやすいなりました。 テストは壊れていないのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/hello_test.rb</span><br><span class="line">Started with run options --seed 39340</span><br><span class="line"></span><br><span class="line">ユーザーを登録する</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)</span><br><span class="line">  test_IDを指定しない場合はエラー                                             PASS (0.00s)</span><br><span class="line">  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)</span><br><span class="line">  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)</span><br><span class="line">  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00217s</span><br><span class="line">5 tests, 7 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><h2 id="キーワード引数の導入"><a href="#キーワード引数の導入" class="headerlink" title="キーワード引数の導入"></a>キーワード引数の導入</h2><p>テストコードは読みやすくなりました。続いてプロダクトコードを改善しましょう。<br>動的言語である Ruby では型を明示しないため引数の値がリテラルなのか <strong>値オブジェクト</strong> なのかメソッドの定義だけでは把握できません。<strong>キーワード引数の導入</strong> をしてできるだけ引数の型を把握しやすいように <strong>リファクタリング</strong> しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'ユーザーを登録する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(id, name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">      assert_equal <span class="string">'1'</span>, @user.id.value</span><br><span class="line">      assert_equal <span class="string">'Bob'</span>, @user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満の場合はエラー</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="string">'a'</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が４文字の場合は登録される</span></span><br><span class="line">      user = User.new(UserId.new(<span class="string">'1'</span>), UserName.new(<span class="string">'abcd'</span>))</span><br><span class="line">      assert_equal <span class="string">'abcd'</span>, user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserId.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserId</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserName</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line">    raise <span class="string">'ユーザー名は3文字以上です。'</span> <span class="keyword">if</span> value.length &lt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id, name)</span></span></span><br><span class="line">    @id = id</span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>キーワード引数</strong> を <strong>値オブジェクト</strong> と同じ名称にします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'ユーザーを登録する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(<span class="symbol">user_id:</span>, <span class="symbol">user_name:</span>)</span></span></span><br><span class="line">    @id = user_id</span><br><span class="line">    @name = user_name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストを修正してグリーンになったらコミットします。<br>ちなみに <strong>キーワード引数の導入</strong> という名称はリファクタリングのカタログにはない用語です。Ruby 固有のパターンとして便宜上命名しています。</p><h1 id="モジュール分割"><a href="#モジュール分割" class="headerlink" title="モジュール分割"></a>モジュール分割</h1><p><strong>TODO リスト</strong> を全部片付けたのでここで単一ファイルから各クラスモジュールごとに <strong>モジュール分割</strong> を実施します。</p><h2 id="TODO-リスト-1"><a href="#TODO-リスト-1" class="headerlink" title="TODO リスト"></a>TODO リスト</h2><ul><li><p>❏ ユーザーを管理できるようにする</p><ul><li><p>✓ ユーザーを登録する</p><ul><li><p>✓ ID と名前を持ったユーザーを作成する</p></li><li><p>✓ ユーザー名が３文字未満の場合はエラー</p></li><li><p>✓ ユーザー名を指定しない場合はエラー</p></li><li><p>✓ ユーザー名が４文字の場合は登録される</p></li><li><p>✓ ID を指定しない場合はエラー</p></li></ul></li></ul></li></ul><h2 id="クラス図"><a href="#クラス図" class="headerlink" title="クラス図"></a>クラス図</h2><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/65549b91-9acd-d2ef-39fb-853e3921029b.png" alt="diag-3a0995bbcfccf7896acca758266aea29.png"></p><h2 id="ファイル構成"><a href="#ファイル構成" class="headerlink" title="ファイル構成"></a>ファイル構成</h2><pre><code>/main.rb  |--lib/      |       -- sns.rb       -- user_id.rb       -- user_name.rb       -- user.rb  |--test/      |       -- user_test.rb</code></pre><p><strong>/main.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./test/user_test.rb'</span></span><br></pre></td></tr></table></figure><p><strong>/lib/sns.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_id.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user_name.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/user.rb'</span></span><br></pre></td></tr></table></figure><p><strong>/lib/user_id.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User ID value object</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserId</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/user_name.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User name value object</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserName</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(value)</span></span></span><br><span class="line">    raise <span class="keyword">if</span> value.<span class="literal">nil</span>?</span><br><span class="line">    raise <span class="string">'ユーザー名は3文字以上です。'</span> <span class="keyword">if</span> value.length &lt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/user.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:id</span>, <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(<span class="symbol">user_id:</span>, <span class="symbol">user_name:</span>)</span></span></span><br><span class="line">    @id = user_id</span><br><span class="line">    @name = user_name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/test/user_test.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use! [Minitest::Reporters::SpecReporter.new(<span class="symbol">color:</span> <span class="literal">true</span>)]</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/sns.rb'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'ユーザーを登録する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      id = UserId.new(<span class="string">'1'</span>)</span><br><span class="line">      name = UserName.new(<span class="string">'Bob'</span>)</span><br><span class="line">      @user = User.new(<span class="symbol">user_id:</span> id, <span class="symbol">user_name:</span> name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>と名前を持ったユーザーを作成する</span></span><br><span class="line">      assert_equal <span class="string">'1'</span>, @user.id.value</span><br><span class="line">      assert_equal <span class="string">'Bob'</span>, @user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が３文字未満の場合はエラー</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="string">'a'</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'ユーザー名は3文字以上です。'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名が４文字の場合は登録される</span></span><br><span class="line">      user = User.new(<span class="symbol">user_id:</span> UserId.new(<span class="string">'1'</span>),</span><br><span class="line">                      <span class="symbol">user_name:</span> UserName.new(<span class="string">'abcd'</span>))</span><br><span class="line">      assert_equal <span class="string">'abcd'</span>, user.name.value</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ユーザー名を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserName.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_ID</span>を指定しない場合はエラー</span></span><br><span class="line">      assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        UserId.new(<span class="literal">nil</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="リリース"><a href="#リリース" class="headerlink" title="リリース"></a>リリース</h1><p><strong>モジュール分割</strong> により最初のリリースの準備が出来ました。<br>リリース前に <strong>静的コード解析</strong> と <strong>コードカバレッジ</strong> を実施してコードの品質を確認しておきましょう。<br>手順の詳細は <a href="https://qiita.com/k2works/items/385dc16333e065d69bd6" target="_blank" rel="noopener">こちらの記事</a> をご参照ください。</p><h2 id="静的コード解析"><a href="#静的コード解析" class="headerlink" title="静的コード解析"></a>静的コード解析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop</span><br><span class="line">Inspecting 5 files</span><br><span class="line">....C</span><br><span class="line"></span><br><span class="line">Offenses:</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>/user_test.rb:11:3: C: Metrics/BlockLength: Block has too many lines. [30/25]</span><br><span class="line">  describe <span class="string">'ユーザーを登録する'</span> <span class="keyword">do</span> ...</span><br><span class="line">  ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/user_test.rb:18:9: C: Naming/MethodName: Use snake_case <span class="keyword">for</span> method names.</span><br><span class="line">    def test_IDと名前を持ったユーザーを作成する</span><br><span class="line">        ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/user_test.rb:18:16: C: Naming/AsciiIdentifiers: Use only ascii symbols <span class="keyword">in</span> identifiers.</span><br><span class="line">    def test_IDと名前を持ったユーザーを作成する</span><br><span class="line">               ^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/user_test.rb:23:9: C: Naming/MethodName: Use snake_case <span class="keyword">for</span> method names.</span><br><span class="line">    def test_ユーザー名が３文字未満の場合はエラー</span><br><span class="line">        ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/user_test.rb:23:14: C: Naming/AsciiIdentifiers: Use only ascii symbols <span class="keyword">in</span> identifiers.</span><br><span class="line">    def test_ユーザー名が３文字未満の場合はエラー</span><br><span class="line">             ^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/user_test.rb:31:9: C: Naming/MethodName: Use snake_case <span class="keyword">for</span> method names.</span><br><span class="line">    def test_ユーザー名が４文字の場合は登録される</span><br><span class="line">        ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/user_test.rb:31:14: C: Naming/AsciiIdentifiers: Use only ascii symbols <span class="keyword">in</span> identifiers.</span><br><span class="line">    def test_ユーザー名が４文字の場合は登録される</span><br><span class="line">             ^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/user_test.rb:37:9: C: Naming/MethodName: Use snake_case <span class="keyword">for</span> method names.</span><br><span class="line">    def test_ユーザー名を指定しない場合はエラー</span><br><span class="line">        ^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/user_test.rb:37:14: C: Naming/AsciiIdentifiers: Use only ascii symbols <span class="keyword">in</span> identifiers.</span><br><span class="line">    def test_ユーザー名を指定しない場合はエラー</span><br><span class="line">             ^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/user_test.rb:43:9: C: Naming/MethodName: Use snake_case <span class="keyword">for</span> method names.</span><br><span class="line">    def test_IDを指定しない場合はエラー</span><br><span class="line">        ^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/user_test.rb:43:16: C: Naming/AsciiIdentifiers: Use only ascii symbols <span class="keyword">in</span> identifiers.</span><br><span class="line">    def test_IDを指定しない場合はエラー</span><br><span class="line">               ^^^^^^^^^^^^</span><br><span class="line"></span><br><span class="line">5 files inspected, 11 offenses detected</span><br></pre></td></tr></table></figure><p>いくつか警告が表示されていますがテストコードの日本語に関する内容なのでチェック対象から除外することにします。</p><p><code>.rubocop.yml</code> ファイルを以下に更新します。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inherit_from:</span> <span class="string">.rubocop_todo.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">AllCops:</span></span><br><span class="line">  <span class="attr">Include:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"lib/**/*.rb"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"test/**/*_test.rb"</span></span><br><span class="line">  <span class="attr">Exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"docs"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Style/AsciiComments:</span></span><br><span class="line">  <span class="attr">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Naming/MethodName:</span></span><br><span class="line">  <span class="attr">Exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"test/**"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Naming/AsciiIdentifiers:</span></span><br><span class="line">  <span class="attr">Exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"test/**"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Metrics/BlockLength:</span></span><br><span class="line">  <span class="attr">Exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"test/**"</span></span><br></pre></td></tr></table></figure><p>警告は無くなりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">5 files inspected, no offenses detected</span><br></pre></td></tr></table></figure><h2 id="コードカバレッジ"><a href="#コードカバレッジ" class="headerlink" title="コードカバレッジ"></a>コードカバレッジ</h2><p>まず、テストコードからコードカバレッジを実行できるようにします。</p><p><code>user_test.rb</code> の先頭を以下に更新します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use! [Minitest::Reporters::SpecReporter.new(<span class="symbol">color:</span> <span class="literal">true</span>)]</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/sns.rb'</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/user_test.rb</span><br><span class="line">Started with run options --seed 24571</span><br><span class="line"></span><br><span class="line">ユーザーを登録する</span><br><span class="line">  test_IDを指定しない場合はエラー                                             PASS (0.00s)</span><br><span class="line">  test_ユーザー名が４文字の場合は登録される                                         PASS (0.00s)</span><br><span class="line">  test_ユーザー名を指定しない場合はエラー                                          PASS (0.00s)</span><br><span class="line">  test_ユーザー名が３文字未満の場合はエラー                                         PASS (0.00s)</span><br><span class="line">  test_IDと名前を持ったユーザーを作成する                                         PASS (0.00s)</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00106s</span><br><span class="line">5 tests, 7 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">Coverage report generated <span class="keyword">for</span> Unit Tests to /Users/k2works/Projects/sandbox/tdd_itddd/coverage. 19 / 19 LOC (100.0%) covered.</span><br></pre></td></tr></table></figure><p>テストカバレッジは 100%です。</p><img width="946" alt="20200222.png" src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/b677f1e6-166d-ba3a-678e-28d9c73647f8.png"><h1 id="ふりかえり"><a href="#ふりかえり" class="headerlink" title="ふりかえり"></a>ふりかえり</h1><p>最初のリリースが完了したのでここでやってきたことのふりかえりをしておきましょう。</p><p>まず、<strong>ユーザーストーリー</strong> から <strong>TODO リスト</strong> を作成しました。<br><strong>TODO リスト</strong> の１つめを <strong>仮実装</strong> でまずベタ書きのコードを書いてテストをパスするようにしました。<br>テストをパスしてグリーンになったら <strong>仮実装から実装へ</strong> を経て最初の <strong>TODO リスト</strong> を完了させました。</p><p>次の <strong>TODO リスト</strong> を追加する前にテストコードに <strong>メソッドの抽出</strong> を適用して <strong>リファクタリング</strong> を実施しました。<strong>リファクタリング</strong> を実施してテストが壊れていないことを確認してから <strong>TODO リスト</strong> を追加して次の作業に入りました。次の作業ではまず <strong>TODO リスト</strong> を追加してその内容を <strong>明白な実装</strong> で片付けました。</p><p><strong>明白な実装</strong> により再びテストがレッドからグリーンになったので <strong>クラスの抽出</strong> と <strong>set メソッドの削除</strong> を適用して<strong>リファクタリング</strong> を実施することにより <strong>値オブジェクト</strong> を追加しました。<br><strong>リファクタリング</strong> を実施してテストが壊れていないことを確認したら 次は例外ケースの <strong>TODO リスト</strong> を追加しました。</p><p>追加した例外ケースを <strong>明白な実装</strong> で片付けたら、まずテストコードに <strong>メソッドのインライン化</strong> を適用して プロダクトコードに <strong>キーワード引数の導入</strong> を適用してコードの可読性を改善する <strong>リファクタリング</strong> を実施しました。</p><p>仕上げに <strong>モジュール分割</strong> を実施しました。<br>続いて <strong>静的コード</strong> と <strong>コードカバレッジ</strong> を実施してコードの品質を確認して、最初のリリースを完了しました。</p><p>今回のテーマである <strong>値オブジェクト</strong> は書籍『テスト駆動開発』では <em>第１部 他国通貨</em> の中で Money クラスとして実装されていますし <strong>Value Object パターン</strong> として紹介されています。</p><blockquote><p>Value Object パターン</p><p>広く共有されるものの、同一インスタンスであることはさほど重要でないオブジェクトを設計するにはどうしたらよいだろうか—–オブジェクト作成時に状態を設定したら、その後決して変えないようにする。オブジェクトへの操作は必ず新しいオブジェクトを返すようにしよう。</p><p>— テスト駆動開発</p></blockquote><p>また、書籍『リファクタリング』では <em>第３章　コードの不吉な臭い</em> の中の <strong>基本データ型への執着</strong> で言及されています。</p><blockquote><p>基本データ型への執着</p><p>オブジェクト指向を始めたばかりの人は、小さなオブジェクトを使ってちょっとしたことをさせるのを嫌がる傾向があります。金額と通貨単位を組み合わせた Money(貨幣)クラス、上限と下限と持つ Range(範囲)クラス、電話番号や郵便番号を表すための特殊な文字列クラスなどがこの例に該当します。</p><p>— 新装版 リファクタリング</p></blockquote><p>アプリケーション開発の過程でどのように <strong>値オブジェクト</strong> を適用するかは<a href="https://qiita.com/k2works/items/928d519a7afe99361ff2#%E5%80%A4%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88" target="_blank" rel="noopener">こちらの記事</a>をご参照ください。</p><p>今回のリリースでユーザーは登録することは出来ましたがユーザー名を変更することが出来ません。</p><p>次回は <strong>エンティティ</strong> の実装に取り組んでみたいと思います。</p><h1 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h1><ul><li><a href="https://channel9.msdn.com/Events/de-code/2017/DO03?ocid=player" target="_blank" rel="noopener">50 分でわかるテスト駆動開発</a></li></ul><h1 id="参考図書"><a href="#参考図書" class="headerlink" title="参考図書"></a>参考図書</h1><ul><li><p>ドメイン駆動設計入門 ボトムアップでわかる! ドメイン駆動設計の基本 (日本語) 単行本（ソフトカバー） 成瀬 允宣 (著)<br>翔泳社 (2020/2/13)</p></li><li><p>テスト駆動開発 Kent Beck (著), 和田 卓人 (翻訳): オーム社; 新訳版 (2017/10/14)</p></li><li><p>新装版 リファクタリング―既存のコードを安全に改善する― (OBJECT TECHNOLOGY SERIES) Martin<br>Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章 (翻訳), その他: オーム社; 新装版<br>(2014/7/26)</p></li><li><p>リファクタリング(第 2 版): 既存のコードを安全に改善する (OBJECT TECHNOLOGY SERIES) Martin<br>Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章 (翻訳), その他: オーム社; 第 2 版<br>(2019/12/1)</p></li></ul><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&t=k2works0c-22&m=amazon&o=9&p=8&l=as1&IS1=1&detail=1&asins=4274217884&linkId=568f25b974af5645e862928a12c354e1&bc1=ffffff&lt1=_top&fc1=333333&lc1=0066c0&bg1=ffffff&f=ifr"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&t=k2works0c-22&m=amazon&o=9&p=8&l=as1&IS1=1&detail=1&asins=427405019X&linkId=08e705a5969e20f5129b4d3cefbcdb15&bc1=000000&lt1=_top&fc1=333333&lc1=0066c0&bg1=ffffff&f=ifr"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4274224546&linkId=5f857b58e988073ce92e0adcf1dd3ebb"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=479815072X&linkId=7ce522a40e7b96f30b414d57d10c98ee"></iframe>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
          <category> プログラミング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> テスト駆動開発 </tag>
            
            <tag> Ruby </tag>
            
            <tag> ドメイン駆動設計 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>テスト駆動開発から始めるRuby入門 ~6時間でオブジェクト指向のエッセンスを体験する~</title>
      <link href="/2020/04/19/1587440874/"/>
      <url>/2020/04/19/1587440874/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitpod.io/#https://github.com/hiroshima-arc/tdd_rb/tree/episode-3" target="_blank" rel="noopener">Open in Gitpod</a></p><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p>この記事は <a href="https://k2works.github.io/2020/04/16/1587009564/">テスト駆動開発から始める Ruby 入門 -2 時間で TDD とリファクタリングのエッセンスを体験する-</a> の続編です。</p><p>前提として エピソード１を完了して、<a href="https://k2works.github.io/2020/04/17/1587440287/">テスト駆動開発から始める Ruby 入門 -ソフトウェア開発の三種の神器を準備する-</a> で開発環境を構築したところから始まります。 別途、<a href="https://gitpod.io/#https://github.com/hiroshima-arc/tdd_rb/tree/episode-3" target="_blank" rel="noopener">セットアップ済み環境</a> を用意していますのでこちらからだとすぐに始めることが出来ます。</p><p>本記事は一応オブジェクト指向プログラム入門者向けとなっていますが、入門者の方は用語についてはわからなくても結構です、コードを繰り返し写経することで感覚を掴んでもらえば自ずと書いてあることはわかるようになってきますので。あと、概要はオブジェクト指向プログラム経験者に向けて書いたのものなので読み飛ばしてもらって結構です（ネタバレ内容です）、経験者の方からのツッコミお待ちしております。</p><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>本記事では、 <strong>オブジェクト指向プログラム</strong> から <strong>オブジェクト指向設計</strong> そして <strong>モジュール分割</strong> を <strong>テスト駆動開発</strong> を通じて実践していきます。</p><h4 id="オブジェクト指向プログラム"><a href="#オブジェクト指向プログラム" class="headerlink" title="オブジェクト指向プログラム"></a>オブジェクト指向プログラム</h4><p>エピソード 1 で作成したプログラムの追加仕様を <strong>テスト駆動開発</strong> で実装します。 次に <strong>手続き型コード</strong> との比較から <strong>オブジェクト指向プログラム</strong> を構成する <strong>カプセル化</strong> <strong>ポリモフィズム</strong> <strong>継承</strong> という概念をコードベースの <strong>リファクタリング</strong> を通じて解説します。</p><p>具体的には <strong>フィールドのカプセル</strong> から <strong>setter の削除</strong> を適用することにより <strong>カプセル化</strong> を実現します。続いて、 <strong>ポリモーフィズムによる条件記述の置き換え</strong> から <strong>State/Strategy によるタイプコードの置き換え</strong> を適用することにより <strong>ポリモーフィズム</strong> の効果を体験します。そして、 <strong>スーパークラスの抽出</strong> から <strong>メソッド名の変更</strong> <strong>メソッドの移動</strong> の適用を通して <strong>継承</strong> の使い方を体験します。さらに <strong>値オブジェクト</strong> と <strong>ファーストクラス</strong> というオブジェクト指向プログラミングに必要なツールの使い方も学習します。</p><h4 id="オブジェクト指向設計"><a href="#オブジェクト指向設計" class="headerlink" title="オブジェクト指向設計"></a>オブジェクト指向設計</h4><p>次に設計の観点から <strong>単一責任の原則</strong> に違反している <code>FizzBuzz</code> クラスを <strong>デザインパターン</strong> の 1 つである <strong>Command パターン</strong> を使ったリファクタリングである <strong>メソッドオブジェクトによるメソッドの置き換え</strong> を適用してクラスの責務を分割します。オブジェクト指向設計のイデオムである <strong>デザインパターン</strong> として <strong>Command パターン</strong> 以外に <strong>Value Object パターン</strong> <strong>Factory Method パターン</strong> <strong>Strategy パターン</strong> を <strong>リファクタリング</strong> を適用する過程ですでに実現していたことを説明します。そして、<strong>オープン・クローズドの原則</strong> を満たすコードに <strong>リファクタリング</strong> されたことで既存のコードを変更することなく振る舞いを変更できるようになることを解説します。</p><p>加えて、正常系の設計を改善した後 <strong>アサーションの導入</strong> <strong>例外によるエラーコードの置き換え</strong> といった例外系の <strong>リファクタリング</strong> を適用します。最後に <strong>ポリモーフィズム</strong> の応用として <strong>特殊ケースの導入</strong> の適用による <strong>Null Object パターン</strong> を使った <strong>オープン・クローズドの原則</strong> に従った安全なコードの追加方法を解説します。</p><h4 id="モジュールの分割"><a href="#モジュールの分割" class="headerlink" title="モジュールの分割"></a>モジュールの分割</h4><p>仕上げは、<strong>モノリシック</strong> なファイルから個別のクラスモジュールへの分割を <strong>ドメインオブジェクト</strong> の抽出を通して <strong>ドメインモデル</strong> へと整理することにより <strong>モジュール分割</strong> を実現することを体験してもらいます。最後に <strong>良いコード</strong> と <strong>良い設計</strong> について考えます。</p><h5 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h5><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/beac3f11-f8c8-e8a5-7e09-ea0dda7e6693.png" alt="diag-c63943e73aed75ba31adf85779eaf481.png"></p><h5 id="After"><a href="#After" class="headerlink" title="After"></a>After</h5><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/b4adb851-0e0d-a5eb-f490-cddd272822cc.png" alt="diag-84a49e2f281dfc169055d0bfc4b4aeb6.png"></p><a id="more"></a><h2 id="オブジェクト指向から始めるテスト駆動開発"><a href="#オブジェクト指向から始めるテスト駆動開発" class="headerlink" title="オブジェクト指向から始めるテスト駆動開発"></a>オブジェクト指向から始めるテスト駆動開発</h2><h3 id="テスト駆動開発"><a href="#テスト駆動開発" class="headerlink" title="テスト駆動開発"></a>テスト駆動開発</h3><p>エピソード 1 ので作成したプログラムに以下の仕様を追加します。</p><p>仕様</p><pre><code>1 から 100 までの数をプリントするプログラムを書け。ただし 3 の倍数のときは数の代わりに｢Fizz｣と、5 の倍数のときは｢Buzz｣とプリントし、3 と 5 両方の倍数の場合には｢FizzBuzz｣とプリントすること。タイプごとに出力を切り替えることができる。タイプ１は通常、タイプ２は数字のみ、タイプ３は FizzBuzz の場合のみをプリントする。</code></pre><p>早速開発に取り掛かりましょう。エピソード 2 で開発環境の自動化をしているので以下のコマンドを実行するだけで開発を始めることができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rake</span><br></pre></td></tr></table></figure><p><code>guard</code> が起動するとコンソールが使えなくなるのでもう一つコンソールを開いておきましょう。もしくは <code>.</code> を使うことで <code>guard</code> 内でコンソールのコマンドを呼び出すことができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[1] guard(main)&gt; . ls</span><br><span class="line">coverage  Gemfile.lock  lib      provisioning  README.md  tmp</span><br><span class="line">Gemfile   Guardfile     main.rb  Rakefile      <span class="built_in">test</span>       Vagrantfile</span><br><span class="line">[2] guard(main)&gt; . <span class="built_in">pwd</span></span><br><span class="line">/workspace/tdd_rb</span><br><span class="line">[3] guard(main)&gt; . git status</span><br></pre></td></tr></table></figure><h4 id="TODO-リスト作成"><a href="#TODO-リスト作成" class="headerlink" title="TODO リスト作成"></a>TODO リスト作成</h4><p>まずは追加仕様を <strong>TODO リスト</strong> に落とし込んでいきます。</p><p>TODO リスト</p><ul><li><p>タイプ 1 の場合</p><ul><li><p>数を文字列にして返す</p><ul><li>1 を渡したら文字列”1”を返す</li></ul></li></ul></li></ul><h4 id="タイプ-1-の場合"><a href="#タイプ-1-の場合" class="headerlink" title="タイプ 1 の場合"></a>タイプ 1 の場合</h4><p><strong>テストファースト</strong> <strong>アサートファースト</strong> で最初に失敗するテストから始めます。テストを追加しましょう。</p><p>ここでは既存の <code>FizzBuzz.generate</code> メソッドにタイプを <strong>引数</strong> として追加することで対応できるように変更してみたいと思います。まず、 <code>fizz_buzz_test.rb</code> ファイルに以下のテストコードを追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'タイプごとに出力を切り替えることができる'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">        assert_equal <span class="string">'1'</span>, FizzBuzz.generate(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'配列や繰り返し処理を理解する'</span> <span class="keyword">do</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">05:32:51 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest to /workspace/tdd_rb/coverage. 4 / 11 LOC (36.36%) covered.</span><br><span class="line">Started with run options --guard --seed 37049</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_1を渡したら文字列1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005623e6a24260 @name="タイプごとに出力を切り替えることができる::タイプ1の場合"&gt;, 0.0019176720088580623]</span></span><br><span class="line"> test_1を渡したら文字列1を返す<span class="comment">#タイプごとに出力を切り替えることができる::タイプ1の場合 (0.00s)</span></span><br><span class="line">Minitest::UnexpectedError:         ArgumentError: wrong number of arguments (given 2, expected 1)</span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:6:<span class="keyword">in</span> `generate<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:74:in `test_1を渡したら文字列1を返す'</span></span><br><span class="line"></span><br><span class="line">  25/25: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00796s</span><br><span class="line">25 tests, 26 assertions, 0 failures, 1 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>ArgumentError: wrong number of arguments (given 2, expected 1)</code> <strong>引数</strong> が違うと指摘されていますね。 <code>FizzBuzz.generate</code> メソッドの引数の変更したいのですが既存のテストを壊したくないのでここは <strong>デフォルト引数</strong> 使ってみましょう。</p><blockquote><p>メソッドの引数にはデフォルト値を指定する定義方法があります。これは、メソッドの引数を省略した場合に割り当てられる値です。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">class FizzBuzz</span><br><span class="line">  MAX_NUMBER = 100</span><br><span class="line"></span><br><span class="line">  def self.generate(number, <span class="built_in">type</span> = 1)</span><br><span class="line">    is_fizz = number.modulo(3).zero?</span><br><span class="line">    is_buzz = number.modulo(5).zero?</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  end</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">05:32:52 - INFO - Inspecting Ruby code style: <span class="built_in">test</span>/fizz_buzz_test.rb Guardfile</span><br><span class="line"> 2/2 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">2 files inspected, no offenses detected</span><br><span class="line">05:32:54 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/loading_background.png coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/border.png</span><br><span class="line"> 0/0 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">0 files inspected, no offenses detected</span><br><span class="line">05:37:29 - INFO - Inspecting Ruby code style: lib/fizz_buzz.rb</span><br><span class="line">lib/fizz_buzz.rb:6:29: W: [Corrected] Lint/UnusedMethodArgument: Unused method argument - <span class="built_in">type</span>. If it<span class="string">'s necessary, use _ or _type as an argument name to indicate that it won'</span>t be used.</span><br><span class="line">  def self.generate(number, <span class="built_in">type</span> = 1)</span><br><span class="line">                            ^^^^</span><br><span class="line"> 1/1 file |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">1 file inspected, 1 offense detected, 1 offense corrected</span><br><span class="line">05:37:31 - INFO - Inspecting Ruby code style: lib/fizz_buzz.rb</span><br><span class="line"> 1/1 file |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">1 file inspected, no offenses detected</span><br><span class="line">[1] guard(main)&gt;</span><br><span class="line">05:39:37 - INFO - Run all</span><br><span class="line">05:39:37 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest to /workspace/tdd_rb/coverage. 4 / 11 LOC (36.36%) covered.</span><br><span class="line">Started with run options --guard --seed 8607</span><br><span class="line"></span><br><span class="line">  25/25: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00723s</span><br><span class="line">25 tests, 27 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>ちなみにここでは 引数に <code>type=1</code> と入力したのですがコードフォーマットによって以下のように自動修正されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">class FizzBuzz</span><br><span class="line">  MAX_NUMBER = 100</span><br><span class="line"></span><br><span class="line">  def self.generate(number, _type = 1)</span><br><span class="line">    is_fizz = number.modulo(3).zero?</span><br><span class="line">    is_buzz = number.modulo(5).zero?</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  end</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>case 式</strong> を使って <strong>引数</strong> を判定できるように変更しましょう。ちなみに <code>_type</code> をメソッド内で変数として使うと警告されるので <code>type</code> に変更しています。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number, type = <span class="number">1</span>)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Started with run options --seed 51330</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Progress: |=============================================================|</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00828s</span><br><span class="line">25 tests, 27 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">04:27:12 - INFO - Inspecting Ruby code style: lib/fizz_buzz.rb</span><br><span class="line"> 1/1 file |=================== 100 ====================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">1 file inspected, no offenses detected</span><br><span class="line">04:27:13 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/loading_background.png coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/border.png</span><br><span class="line"> 0/0 files |=================== 100 ===================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">0 files inspected, no offenses detected</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストは無事通りました。ここでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'test: タイプ1の場合'</span></span><br></pre></td></tr></table></figure><p>追加仕様の取っ掛かりができました。既存のテストを流用したいので先程作成したテストを削除して以下のように新しいグループ内に既存テストコードを移動しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Fizz'</span>, @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @fizzbuzz.generate(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.generate(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          @result = FizzBuzz.generate_list</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @result.first</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の最後は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @result.last</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の2番目は文字列の<span class="title">Fizz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Fizz'</span>, @result[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の4番目は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @result[<span class="number">4</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の14番目は文字列の<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @result[<span class="number">14</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストコードが壊れていないことを確認したらコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: メソッドのインライン化'</span></span><br></pre></td></tr></table></figure><p>TODO リスト</p><ul><li><p>タイプ 1 の場合</p><ul><li><p>数を文字列にして返す</p><ul><li><del>1 を渡したら文字列”1”を返す</del></li></ul></li><li><p>3 の倍数のときは数の代わりに｢Fizz｣と返す_</p><ul><li><del>3 を渡したら文字列”Fizz”を返す</del></li></ul></li><li><p>5 の倍数のときは｢Buzz｣と返す_</p><ul><li><del>5 を渡したら文字列”Buzz”を返す</del></li></ul></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す_</p><ul><li><del>15 を渡したら文字列”FizzBuzz”を返す</del></li></ul></li></ul></li><li><p>タイプ 2 の場合</p><ul><li><p>数を文字列にして返す</p><ul><li>1 を渡したら文字列”1”を返す</li></ul></li><li><p>3 の倍数のときは数を文字列にして返す</p><ul><li>3 を渡したら文字列”3”を返す</li></ul></li><li><p>5 の倍数のときは数を文字列にして返す</p><ul><li>5 を渡したら文字列”5”を返す</li></ul></li><li><p>3 と 5 両方の倍数の場合には数を文字列にして返す</p><ul><li>15 を渡したら文字列”15”を返す</li></ul></li></ul></li><li><p>タイプ 3 の場合</p><ul><li><p>数を文字列にして返す</p><ul><li>1 を渡したら文字列”1”を返す</li></ul></li><li><p>3 の倍数のときは数を文字列にして返す</p><ul><li>3 を渡したら文字列”3”を返す</li></ul></li><li><p>5 の倍数のときは数を文字列にして返す</p><ul><li>5 を渡したら文字列”5”を返す</li></ul></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p><ul><li>15 を渡したら文字列”FizzBuzz”を返す</li></ul></li></ul></li></ul><h4 id="タイプ-2-の場合"><a href="#タイプ-2-の場合" class="headerlink" title="タイプ 2 の場合"></a>タイプ 2 の場合</h4><p>TODO リスト</p><ul><li><p><del>タイプ 1 の場合</del></p></li><li><p>タイプ 2 の場合</p><ul><li><p>数を文字列にして返す</p><ul><li>1 を渡したら文字列”1”を返す</li></ul></li><li><p>3 の倍数のときは数を文字列にして返す</p><ul><li>3 を渡したら文字列”3”を返す</li></ul></li><li><p>5 の倍数のときは数を文字列にして返す</p><ul><li>5 を渡したら文字列”5”を返す</li></ul></li><li><p>3 と 5 両方の倍数の場合には数を文字列にして返す</p><ul><li>15 を渡したら文字列”15”を返す</li></ul></li></ul></li><li><p>タイプ 3 の場合</p><ul><li><p>数を文字列にして返す</p><ul><li>1 を渡したら文字列”1”を返す</li></ul></li><li><p>3 の倍数のときは数を文字列にして返す</p><ul><li>3 を渡したら文字列”3”を返す</li></ul></li><li><p>5 の倍数のときは数を文字列にして返す</p><ul><li>5 を渡したら文字列”5”を返す</li></ul></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p><ul><li>15 を渡したら文字列”FizzBuzz”を返す</li></ul></li></ul></li></ul><p>続いて、タイプ 2 の場合に取り掛かりましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">FAIL[<span class="string">"test_1を渡したら文字列1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005555ec747100 @name="数を文字列にして返す::タイプ2の場合::その他の場合"&gt;, 0.002283181995153427]</span></span><br><span class="line"> test_1を渡したら文字列1を返す<span class="comment">#数を文字列にして返す::タイプ2の場合::その他の場合 (0.00s)</span></span><br><span class="line">        Expected: <span class="string">"1"</span></span><br><span class="line">          Actual: nil</span><br><span class="line">        /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:75:<span class="keyword">in</span> `test_1を渡したら文字列1を返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  24/24: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00437s</span></span><br><span class="line"><span class="string">24 tests, 26 assertions, 1 failures, 0 errors, 0 skips</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>まだ <strong>引数</strong> に 2 を渡した場合は何もしないので <strong>case 式</strong> に 2 を渡した場合の処理を追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number, type = <span class="number">1</span>)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Started with run options --seed 19625</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Progress: |=============================================================================|</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00894s</span><br><span class="line">24 tests, 26 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストが通ったのでテストケースを追加します。ここはタイプ 1 の場合をコピーして編集すれば良いでしょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.generate(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.generate(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列15を返す</span></span><br><span class="line">          assert_equal <span class="string">'15'</span>, @fizzbuzz.generate(<span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest to /workspace/tdd_rb/coverage. 4 / 13 LOC (30.77%) covered.</span><br><span class="line">Started with run options --guard --seed 898</span><br><span class="line"></span><br><span class="line">  27/27: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00900s</span><br><span class="line">27 tests, 29 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">06:27:40 - INFO - Inspecting Ruby code style of all files</span><br><span class="line"><span class="built_in">test</span>/fizz_buzz_test.rb:11:3: C: Metrics/BlockLength: Block has too many lines. [70/62]</span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span> ...</span><br><span class="line">  ^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"> 7/7 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, 1 offense detected</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストは通りましたが何やら警告が表示されるようになりました。　<br><a href="https://rubocop.readthedocs.io/en/latest/cops_metrics/#metricsblocklength" target="_blank" rel="noopener">Metrics/BlockLength:Block has too many lines.</a> これは <code>数を文字列にして返す</code> テストケースのコードブロックが長いという警告のようですがテストコードはチェックの対象から外しておきたいので <code>.rubocop_todo.yml</code> に以下コードを追加してチェック対象から外しておきます。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Offense count: 2</span></span><br><span class="line"><span class="comment"># Configuration parameters: CountComments, ExcludedMethods.</span></span><br><span class="line"><span class="comment"># ExcludedMethods: refine</span></span><br><span class="line"><span class="attr">Metrics/BlockLength:</span></span><br><span class="line">  <span class="attr">Max:</span> <span class="number">62</span></span><br><span class="line">  <span class="attr">Exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"test/fizz_buzz_test.rb"</span></span><br></pre></td></tr></table></figure><p>ちなみに <code>guard(main)&gt;</code> にカーソルを合わせてエンターキーを押すと自動化タスクが実行されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[1] guard(main)&gt;</span><br><span class="line">02:03:15 - INFO - Run all</span><br><span class="line">/home/gitpod/.rvm/rubies/ruby-2.6.3/bin/ruby -w -I<span class="string">"lib"</span> -I<span class="string">"/workspace/.rvm/gems/rake-13.0.1/lib"</span> <span class="string">"/workspace/.rvm/gems/rake-13.0.1/lib/rake/rake_test_loader.rb"</span> <span class="string">"./test/fizz_buzz_test.rb"</span></span><br><span class="line">/home/gitpod/.rvm/rubies/ruby-2.6.3/bin/ruby -w -I<span class="string">"lib"</span> -I<span class="string">"/workspace/.rvm/gems/rake-13.0.1/lib"</span> <span class="string">"/workspace/.rvm/gems/rake-13.0.1/lib/rake/rake_test_loader.rb"</span> <span class="string">"./test/fizz_buzz_test.rb"</span></span><br><span class="line">Started with run options --seed 47335</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Progress: |==============================================================================|</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00781s</span><br><span class="line">27 tests, 29 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">Started with run options --seed 47825</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Progress: |==============================================================================|</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00761s</span><br><span class="line">27 tests, 29 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">02:03:17 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 13 / 13 LOC (100.0%) covered.</span><br><span class="line">Started with run options --guard --seed 17744</span><br><span class="line"></span><br><span class="line">  27/27: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00789s</span><br><span class="line">27 tests, 29 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">02:03:17 - INFO - Inspecting Ruby code style of all files</span><br><span class="line"> 7/7 files |=========================== 100 ============================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, no offenses detected</span><br><span class="line">02:03:19 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/border.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/loading_background.png</span><br><span class="line"> 0/0 files |=========================== 100 ============================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">0 files inspected, no offenses detected</span><br><span class="line">[1] guard(main)&gt;</span><br></pre></td></tr></table></figure><p>警告は消えたのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'test: タイプ2の場合'</span></span><br></pre></td></tr></table></figure><p>TODO リスト</p><ul><li><p><del>タイプ 1 の場合</del></p></li><li><p>タイプ 2 の場合</p><ul><li><p>数を文字列にして返す</p><ul><li><del>1 を渡したら文字列”1”を返す</del></li></ul></li><li><p>3 の倍数のときは数を文字列にして返す</p><ul><li><del>3 を渡したら文字列”3”を返す</del></li></ul></li><li><p>5 の倍数のときは数を文字列にして返す</p><ul><li><del>5 を渡したら文字列”5”を返す</del></li></ul></li><li><p>3 と 5 両方の倍数の場合には数を文字列にして返す</p><ul><li><del>15 を渡したら文字列”15”を返す</del></li></ul></li></ul></li><li><p>タイプ 3 の場合</p><ul><li><p>数を文字列にして返す</p><ul><li>1 を渡したら文字列”1”を返す</li></ul></li><li><p>3 の倍数のときは数を文字列にして返す</p><ul><li>3 を渡したら文字列”3”を返す</li></ul></li><li><p>5 の倍数のときは数を文字列にして返す</p><ul><li>5 を渡したら文字列”5”を返す</li></ul></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p><ul><li>15 を渡したら文字列”FizzBuzz”を返す</li></ul></li></ul></li></ul><h4 id="タイプ-3-の場合"><a href="#タイプ-3-の場合" class="headerlink" title="タイプ 3 の場合"></a>タイプ 3 の場合</h4><p>TODO リスト</p><ul><li><p><del>タイプ 1 の場合</del></p></li><li><p><del>タイプ 2 の場合</del></p></li><li><p>タイプ 3 の場合</p><ul><li><p>数を文字列にして返す</p><ul><li>1 を渡したら文字列”1”を返す</li></ul></li><li><p>3 の倍数のときは数を文字列にして返す</p><ul><li>3 を渡したら文字列”3”を返す</li></ul></li><li><p>5 の倍数のときは数を文字列にして返す</p><ul><li>5 を渡したら文字列”5”を返す</li></ul></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p><ul><li>15 を渡したら文字列”FizzBuzz”を返す</li></ul></li></ul></li></ul><p>続いて、タイプ 3 の場合ですがやることは同じなので今回は一気にテストを書いてみましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.generate(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.generate(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.generate(<span class="number">15</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> FAIL[<span class="string">"test_1を渡したら文字列1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005642171ea5a0 @name="数を文字列にして返す::タイプ3の場合::その他の場合"&gt;, 0.003375133004738018]</span></span><br><span class="line"> test_1を渡したら文字列1を返す<span class="comment">#数を文字列にして返す::タイプ3の場合::その他の場合 (0.00s)</span></span><br><span class="line">        Expected: <span class="string">"1"</span></span><br><span class="line">          Actual: nil</span><br><span class="line">        /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:123:<span class="keyword">in</span> `test_1を渡したら文字列1を返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> FAIL["test_5を渡したら文字列5を返す", #&lt;Minitest::Reporters::Suite:0x000056421723af78 @name="数を文字列にして返す::タイプ3の場合::五の倍数の場合"&gt;, 0.003832244998193346]</span></span><br><span class="line"><span class="string"> test_5を渡したら文字列5を返す#数を文字列にして返す::タイプ3の場合::五の倍数の場合 (0.00s)</span></span><br><span class="line"><span class="string">        Expected: "5"</span></span><br><span class="line"><span class="string">          Actual: nil</span></span><br><span class="line"><span class="string">        /workspace/tdd_rb/test/fizz_buzz_test.rb:111:in `test_5を渡したら文字列5を返す'</span></span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_3を渡したら文字列3を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x0000564217297340 @name="数を文字列にして返す::タイプ3の場合::三の倍数の場合"&gt;, 0.0043466729985084385]</span></span><br><span class="line"> test_3を渡したら文字列3を返す<span class="comment">#数を文字列にして返す::タイプ3の場合::三の倍数の場合 (0.00s)</span></span><br><span class="line">        Expected: <span class="string">"3"</span></span><br><span class="line">          Actual: nil</span><br><span class="line">        /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:105:<span class="keyword">in</span> `test_3を渡したら文字列3を返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> FAIL["test_15を渡したら文字列FizzBuzzを返す", #&lt;Minitest::Reporters::Suite:0x00005642174dec98 @name="数を文字列にして返す::タイプ3の場合::三と五の倍数の場合"&gt;, 0.006096020006225444]</span></span><br><span class="line"><span class="string"> test_15を渡したら文字列FizzBuzzを返す#数を文字列にして返す::タイプ3の場合::三と五の倍数の場合 (0.01s)</span></span><br><span class="line"><span class="string">        Expected: "FizzBuzz"</span></span><br><span class="line"><span class="string">          Actual: nil</span></span><br><span class="line"><span class="string">        /workspace/tdd_rb/test/fizz_buzz_test.rb:117:in `test_15を渡したら文字列FizzBuzzを返す'</span></span><br><span class="line"></span><br><span class="line">  31/31: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00650s</span><br><span class="line">31 tests, 33 assertions, 4 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>case 式</strong> に処理を追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number, type = <span class="number">1</span>)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Started with run options --seed 12137</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Progress: |=============================================================================|</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01662s</span><br><span class="line">31 tests, 33 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">05:06:44 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/loading_background.png coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/border.png lib/fizz_buzz.rb</span><br><span class="line">lib/fizz_buzz.rb:6:3: C: Metrics/CyclomaticComplexity: Cyclomatic complexity <span class="keyword">for</span> generate is too high. [10/8]</span><br><span class="line">  def self.generate(number, <span class="built_in">type</span> = 1) ...</span><br><span class="line">  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:6:3: C: Metrics/PerceivedComplexity: Perceived complexity <span class="keyword">for</span> generate is too high. [8/7]</span><br><span class="line">  def self.generate(number, <span class="built_in">type</span> = 1) ...</span><br><span class="line">  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"> 1/1 file |=========================== 100 ============================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">1 file inspected, 2 offenses detected</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストは通りましたが新しい警告が表示されるようになりました。とりあえずコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'test: タイプ3の場合'</span></span><br></pre></td></tr></table></figure><p>処理の追加により一部重複が発生しました。ここは、 <strong>ステートメントのスライド</strong> を適用して重複をなくしておきましょう。</p><blockquote><p>ステートメントのスライド</p><p>旧：重複した条件記述の断片の統合</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>重複した条件記述の断片の統合</p><p>条件式のすべて分岐に同じコードの断片がある。</p><p>それを式の外側に移動する。</p><p>— 新装版 リファクタリング</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number, type = <span class="number">1</span>)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number, type = <span class="number">1</span>)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>警告は消えていませんがプログラムは壊れていないことが確認できたのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: ステートメントのスライド'</span></span><br></pre></td></tr></table></figure><p>TODO リスト</p><ul><li><p><del>タイプ 1 の場合</del></p></li><li><p><del>タイプ 2 の場合</del></p></li><li><p>タイプ 3 の場合</p><ul><li><p>数を文字列にして返す</p><ul><li><del>1 を渡したら文字列”1”を返す</del></li></ul></li><li><p>3 の倍数のときは数を文字列にして返す</p><ul><li><del>3 を渡したら文字列”3”を返す</del></li></ul></li><li><p>5 の倍数のときは数を文字列にして返す</p><ul><li><del>5 を渡したら文字列”5”を返す</del></li></ul></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p><ul><li><del>15 を渡したら文字列”FizzBuzz”を返す</del></li></ul></li></ul></li></ul><h4 id="それ以外のタイプの場合"><a href="#それ以外のタイプの場合" class="headerlink" title="それ以外のタイプの場合"></a>それ以外のタイプの場合</h4><p>追加仕様には対応しましたがタイプ 1,2,3 以外の値が <strong>引数</strong> として渡された場合はどうしましょうか？ 現状では <code>nil</code> を返しますがこのような例外ケースも考慮する必要があります。</p><p>TODO リスト</p><ul><li><p><del>タイプ 1 の場合</del></p></li><li><p><del>タイプ 2 の場合</del></p></li><li><p><del>タイプ 3 の場合</del></p></li><li><p>それ以外のタイプの場合</p></li></ul><p><strong>例外処理</strong> を追加します。まず、例外のテストですが以下の様に書きます。</p><blockquote><p>例外とは記述したプログラムが想定していない値を受け取ったり、何らかの障害が発生した場合に処理を中断して、例外オブジェクトを生成して呼び出し元のメソッドに処理を戻す機構です。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>例外を返す</span></span><br><span class="line">        e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">          @fizzbuzz.generate(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'該当するタイプは存在しません'</span>, e.message</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> FAIL[<span class="string">"test_例外を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x0000558a26888e60 @name="数を文字列にして返す::それ以外のタイプの場合"&gt;, 0.003033002998563461]</span></span><br><span class="line"> test_例外を返す<span class="comment">#数を文字列にして返す::それ以外のタイプの場合 (0.00s)</span></span><br><span class="line">        RuntimeError expected but nothing was raised.</span><br><span class="line">        /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:134:<span class="keyword">in</span> `test_例外を返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00609s</span></span><br><span class="line"><span class="string">32 tests, 34 assertions, 1 failures, 0 errors, 0 skips</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p><strong>case 式</strong> に該当しないタイプが指定された場合は <strong>例外を発生させる</strong> ようにします。</p><blockquote><p>例外を明示的に発生させるには「raise」を使います。raise には発生させたい例外クラスを指定するのですが、何も指定しない場合は RuntimeError オブジェクトが生成されます。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number, type = <span class="number">1</span>)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">07:04:53 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 16 / 16 LOC (100.0%) covered.</span><br><span class="line">Started with run options --guard --seed 32508</span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00600s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストが通ったのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'test: それ以外のタイプの場合'</span></span><br></pre></td></tr></table></figure><p>TODO リスト</p><ul><li><p><em>タイプ 1 の場合</em></p></li><li><p><em>タイプ 2 の場合</em></p></li><li><p><em>タイプ 3 の場合</em></p></li><li><p><em>それ以外のタイプの場合</em></p></li></ul><p><strong>TODO リスト</strong><br>をすべて完了しました。追加仕様を満たすプログラムは出来ましたがまだ改善の余地がありそうですね。以降ではオブジェクト指向アプローチによるコードのリファクタリングを解説していきたいと思います。</p><h3 id="オブジェクト指向"><a href="#オブジェクト指向" class="headerlink" title="オブジェクト指向"></a>オブジェクト指向</h3><h4 id="手続き型プログラム"><a href="#手続き型プログラム" class="headerlink" title="手続き型プログラム"></a>手続き型プログラム</h4><p><strong>オブジェクト指向</strong> の解説の前に以下のコードを御覧ください。いわゆる <strong>手続き型</strong> で書かれたコードですが、これも追加仕様を満たしています。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">MAX_NUMBER = <span class="number">100</span></span><br><span class="line">type = <span class="number">1</span></span><br><span class="line">list = []</span><br><span class="line"></span><br><span class="line">MAX_NUMBER.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  r = <span class="string">''</span></span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">case</span> type</span><br><span class="line">  <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span></span><br><span class="line">      r = <span class="string">'FizzBuzz'</span></span><br><span class="line">    <span class="keyword">elsif</span> i % <span class="number">3</span> == <span class="number">0</span></span><br><span class="line">      r = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">elsif</span> i % <span class="number">5</span> == <span class="number">0</span></span><br><span class="line">      r = <span class="string">'Buzz'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      r = i.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">    r = i.to_s</span><br><span class="line">  <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span></span><br><span class="line">      r = <span class="string">'FizzBuzz'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      r = i.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    r = <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  list.push(r)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts list</span><br></pre></td></tr></table></figure><p>処理の流れをフローチャートにしたものです、実態はコードに記述されている内容を記号に置き換えて人間が読めるようにしたものです。</p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/964a4749-a319-a323-5b6b-3e9cc31d72e4.png" alt="diag-c465147b957dba9fdfaa1a1196d29378.png"></p><h4 id="オブジェクト指向プログラム-1"><a href="#オブジェクト指向プログラム-1" class="headerlink" title="オブジェクト指向プログラム"></a>オブジェクト指向プログラム</h4><p>続いて、これまでに作ってきたコードがこちらになります。上記の <strong>手続き型コード</strong> との大きな違いとして <code>class</code> というキーワードでくくられている部分があります。</p><blockquote><p>クラスとは、大まかに説明すると何らかの値と処理（メソッド）をひとかたまりにしたものです。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number, type = <span class="number">1</span>)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><a href="https://ja.wikipedia.org/wiki/%E7%B5%B1%E4%B8%80%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E" target="_blank" rel="noopener">UML</a> を使って上記のコードの構造をクラス図として表現しました。</p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/beac3f11-f8c8-e8a5-7e09-ea0dda7e6693.png" alt="diag-c63943e73aed75ba31adf85779eaf481.png"></p><p>更にシーケンス図を使って上記のコードの振る舞いを表現しました。</p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/d4b24b58-1d0b-1ffe-f0ab-76968012a0f3.png" alt="diag-4cda3860e38bd75023756d182d6db0b7.png"></p><p><strong>手続き型コード</strong> のフローチャートと比べてどう思われましたか？具体的な記述が少なくデータや処理の概要だけを表現しているけど FizzBuzz のルールを知っている人であれば何をやろうとしているかのイメージはつかみやすいのではないでしょうか？だから何？と思われるかもしれませんが現時点では <strong>オブジェクト指向</strong> において <strong>抽象化</strong> がキーワードだという程度の認識で十分です。</p><p>オブジェクト指向の理解を深める取り掛かりにはこちらの記事を参照してください。</p><ul><li><a href="https://qiita.com/nrslib/items/73bf176147192c402049" target="_blank" rel="noopener">オブジェクト指向のいろは</a></li></ul><p>オブジェクト指向の詳細は控えるとして、ここでは <strong>カプセル化</strong> <strong>ポリモフィズム</strong> <strong>継承</strong> というオブジェクト指向プログラムで原則とされる概念をリファクタリングを通して体験してもらい、オブジェクト指向プログラムの感覚を掴んでもらうことを目的に解説を進めていきたいと思います。</p><h3 id="カプセル化"><a href="#カプセル化" class="headerlink" title="カプセル化"></a>カプセル化</h3><h4 id="フィールドのカプセル化"><a href="#フィールドのカプセル化" class="headerlink" title="フィールドのカプセル化"></a>フィールドのカプセル化</h4><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/beac3f11-f8c8-e8a5-7e09-ea0dda7e6693.png" alt="diag-c63943e73aed75ba31adf85779eaf481.png"></p><p>まず、データとロジックを１つのクラスにまとめていくためのリファクタリングを実施していくとします。<code>FizzBuzz</code> クラスに FizzBuzz 配列を保持できるようして以下のように取得できるようにしたいと思います。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">          fizzbuzz.generate_list</span><br><span class="line">          @result = fizzbuzz.list</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>まず、 <strong>インスタンス変数</strong> 追加します。次に <code>self</code> キーワードを外して <strong>クラスメソッド</strong> から <strong>インスタンスメソッド</strong> に変更します。</p><blockquote><p>クラスメソッドはいくつか定義方法がありますが、どの方法を使ってもクラスメソッドとして定義されれば「クラス名.メソッド名」という形で呼び出せます。</p><p>— かんたん Ruby</p></blockquote><blockquote><p>インスタンスメソッドはコンストラクタと同じようにクラス内で def キーワードを使ってメソッドを定義するだけで作成できます。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number, type = <span class="number">1</span>)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">list</span></span></span><br><span class="line">    @list</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number, type = <span class="number">1</span>)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_15を渡したら文字列FizzBuzzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005613555ed120 @name="数を文字列にして返す::タイプ3の場合::三と五の倍数の場合"&gt;, 0.0041351839900016785]</span></span><br><span class="line"> test_15を渡したら文字列FizzBuzzを返す<span class="comment">#数を文字列にして返す::タイプ3の場合::三と五の倍数の場合 (0.00s)</span></span><br><span class="line">Minitest::UnexpectedError:         NoMethodError: undefined method `generate<span class="string">' for FizzBuzz:Class</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:117:in `test_15を渡したら文字列FizzBuzzを返す'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>FizzBuzz 配列を <strong>インスタンス変数</strong> <code>@list</code> に <strong>代入</strong> して <strong>インスタンス変数</strong>経由で取得できるように変更しました。変更にあたり <strong>クラスメソッド</strong> <code>FizzBuzz.generate</code> と <code>FizzBuzz.generate_list</code> を <strong>インスタンスメソッド</strong> に変更しています。それに伴ってテストが失敗して <code>NoMethodError: undefined method `generate&#39;</code> と表示されるようになってしまいました。<strong>インスタンスメソッド</strong> が使えるようにするため　<code>new</code> メソッドを使って FizzBuzz クラスの <strong>インスタンス</strong> を作り FizzBuzz 配列を <strong>インスタンス変数</strong> 経由で取得するようにテストコードを変更します。</p><blockquote><p>クラスとして定義された情報を元に具体的な値を伴ったオブジェクトを作成することをインスタンス化と呼び、生成されたオブジェクトのことをインスタンスと呼びます。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzz.new</span><br><span class="line">          fizzbuzz.generate_list</span><br><span class="line">          @result = fizzbuzz.list</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">07:17:36 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 5 / 17 LOC (29.41%) covered.</span><br><span class="line">Started with run options --guard --seed 7701</span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00616s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストが直りました。<strong>クラスメソッド</strong> <strong>インスタンスメソッド</strong> <strong>インスタンス変数</strong> <strong>インスタンス</strong> などいろんな単語が出てきて戸惑ってしまったかもしれませんが、ピンとこないうちは <strong>クラス</strong> に値や状態を保持させるためには <strong>インスタンス化</strong> する必要があってそのためには <code>new</code> メソッドを使わないといけないのね程度の理解で十分です。大概のことは手を動かしているうちにピンと来るようになります。</p><p><strong>インスタンス変数</strong> に直接アクセスしているのでここは <strong>アクセッサメソッド</strong> を使って <strong>フィールドのカプセル化</strong> を適用しておきます。</p><blockquote><p>オブジェクト指向ではクラス内の値をカプセル化することが重要ですが、時には内部で保持しているインスタンス変数を参照や更新できる方が良い場合もあります。複雑な処理ではなく、単にインスタンス変数にアクセスするためのメソッドのことを、アクセッサメソッドと呼びます。</p><p>— かんたん Ruby</p></blockquote><blockquote><p>フィールドのカプセル化</p><p>公開フィールドがある。</p><p>それを非公開にして、そのアクセサを用意する。</p><p>— 新装版 リファクタリング</p></blockquote><p>自動実行の結果、以下のように書き換えられている部分を変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuz</span>、</span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">　<span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:list</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストが動作して既存のコードが壊れていないことが確認できたのでここでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: フィールドのカプセル化'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/38d2567b-295a-1db9-5878-e410bfb51d2a.png" alt="diag-102c44abf73ca5bda6fd8b87cc722ac9.png"></p><p>引き続き、FizzBuzz 配列は保持できるようになりましたがタイプごとに出力される配列のパターンは違います。FizzBuzz クラスにタイプを持たる必要があります。ここでは <strong>コンストラクタ</strong> を使って <strong>インスタンス化</strong> する際に <strong>インスタンス変数</strong> に <strong>代入</strong> するようにします。Ruby では <strong>initialize</strong> というメソッドを使って初期化処理を実行します。</p><blockquote><p>クラスをインスタンス化した時に初期化処理を行うシチュエーションはよくあります。このような初期化処理を行うメソッドをコンストラクタと呼び、Ruby では initialize という特別なメソッドを用意することで実現できます。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:list</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ERROR[<span class="string">"test_3を渡したら文字列3を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005564e21e85b0 @name="数を文字列にして返す::タイプ3の場合::三の倍数の場合"&gt;, 0.004276092993677594]</span></span><br><span class="line"> test_3を渡したら文字列3を返す<span class="comment">#数を文字列にして返す::タイプ3の場合::三の倍数の場合 (0.00s)</span></span><br><span class="line">Minitest::UnexpectedError:         ArgumentError: wrong number of arguments (given 0, expected 1)</span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:7:<span class="keyword">in</span> `initialize<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:101:in `new'</span></span><br><span class="line">            /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:101:<span class="keyword">in</span> `setup<span class="string">'</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>テストが失敗して引数が違うというエラーが表示される用になりました。<code>new</code> メソッドの <strong>引数</strong> にタイプを渡すようにテストを変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzz.new(<span class="number">1</span>)</span><br><span class="line">          fizzbuzz.generate_list</span><br><span class="line">          @result = fizzbuzz.list</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">4</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">07:28:38 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 6 / 19 LOC (31.58%) covered.</span><br><span class="line">Started with run options --guard --seed 46661</span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00793s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストは直りましたがまだ <strong>インスタンス変数</strong> のタイプが使われていないので使うようにプロダクトコードを変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:list</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number, _type = <span class="number">1</span>)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> @type</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>FizzBuzz.gnerate</code> メソッドの <strong>引数</strong> から <code>type</code> を削除します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:list</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ERROR[<span class="string">"test_15を渡したら文字列FizzBuzzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x0000564e16c14200 @name="数を文字列にして返す::タイプ3の場合::三と五の倍数の場合"&gt;, 0.01706391001062002]</span></span><br><span class="line"> test_15を渡したら文字列FizzBuzzを返す<span class="comment">#数を文字列にして返す::タイプ3の場合::三と五の倍数の場合 (0.02s)</span></span><br><span class="line">Minitest::UnexpectedError:         ArgumentError: wrong number of arguments (given 2, expected 1)</span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:11:<span class="keyword">in</span> `generate<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:118:in `test_15を渡したら文字列FizzBuzzを返す'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>続いて、<code>FizzBuzz#generate</code> メソッドから不要になった <strong>引数</strong> <code>type</code><br>を削除したところテストが壊れたのでテストコードを修正します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">  ...</span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.generate(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列15を返す</span></span><br><span class="line">          assert_equal <span class="string">'15'</span>, @fizzbuzz.generate(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.generate(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.generate(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">4</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>例外を返す</span></span><br><span class="line">        e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">          @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'該当するタイプは存在しません'</span>, e.message</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">07:34:57 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 15 / 19 LOC (78.95%) covered.</span><br><span class="line">Started with run options --guard --seed 59116</span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00700s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>インスタンス変数</strong> の <code>@type</code> も <strong>アクセッサメソッド</strong> を使って <strong>フィールドのカプセル化</strong> を適用しておきます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:list</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Started with run options --guard --seed 56315</span><br><span class="line"></span><br><span class="line">  32/32: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01069s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>コミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: フィールドのカプセル化'</span></span><br></pre></td></tr></table></figure><h4 id="setter-の削除"><a href="#setter-の削除" class="headerlink" title="setter の削除"></a>setter の削除</h4><p>FizzBuzz 配列を取得する <strong>アクセッサメソッド</strong> は現在このように定義されています。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:type</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>以下のようにテストコードを変更したらどうなるでしょうか？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzz.new(<span class="number">1</span>)</span><br><span class="line">          fizzbuzz.generate_list</span><br><span class="line">          @result = fizzbuzz.list</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzz.new(<span class="number">1</span>)</span><br><span class="line">          fizzbuzz.generate_list</span><br><span class="line">          fizzbuzz.list = []</span><br><span class="line">          @result = fizzbuzz.list</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> FAIL[<span class="string">"test_配列の2番目は文字列のFizzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x0000563c29a8a8c0 @name="数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す"&gt;, 0.005137628992088139]</span></span><br><span class="line"> test_配列の2番目は文字列のFizzを返す<span class="comment">#数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す (0.01s)</span></span><br><span class="line">        Expected: <span class="string">"Fizz"</span></span><br><span class="line">          Actual: nil</span><br><span class="line">        /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:58:<span class="keyword">in</span> `test_配列の2番目は文字列のFizzを返す<span class="string">'</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>FizzBuzz 配列が初期化されてしまいました。<strong>アクセッサメソッド</strong> に参照のための <strong>getter</strong> と 更新するための <strong>setter</strong> が許可されているため <strong>カプセル化</strong> が破られてしまいました。ここは <strong>setter の削除</strong> を適用して外部からの更新を出来ないようにしておきましょう。</p><blockquote><p>getter を定義するには、「attr_reader」を使います。このメソッドにインスタンス変数の「@」を除いた名称をシンボル表現にしたものを列挙します。複数ある場合はカンマで区切って複数の値を指定することができます。</p><p>— かんたん Ruby</p></blockquote><blockquote><p>setter を定義するには、「attr_writer」を使います。このメソッドも attr_reader と同じくインスタンス変数名の「@」を除いた名称をシンボル表現にしたものを列挙します。複数ある場合はカンマで区切って複数の値を指定することができます。</p><p>— かんたん Ruby</p></blockquote><blockquote><p>getter/setter の両方を定義する場合、そのインスタンスは属しているクラス外から自由に参照や更新ができてしまいます。これはカプセル化の観点には反した挙動なので、できる限り attr_reader だけで済ませられないか検討しましょう。</p><p>— かんたん Ruby</p></blockquote><blockquote><p>setter の削除</p><p>setter が用意されているということは、フィールドが変更される可能性があることを意味します。オブジェクトを生成した後でフィールドを変更したくないなら、setter は用意しません（加えて、フィールドを変更不可にします）。そうすることで、フィールドはコンストラクタでのみで設定され、変更させないという意図が明確になって、フィールドが変更される可能性を、たいていは排除できます。</p><p>— リファクタリング(第 2 版)</p></blockquote><p>Ruby では以下のようにして <strong>インスタンス変数</strong> を読み取り専用にします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:type</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR[<span class="string">"test_配列の2番目は文字列のFizzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x000055b32efd75f0 @name="数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す"&gt;, 0.008614362974185497]</span></span><br><span class="line"> test_配列の2番目は文字列のFizzを返す<span class="comment">#数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す (0.01s)</span></span><br><span class="line">Minitest::UnexpectedError:         NoMethodError: undefined method `list=<span class="string">' for #&lt;FizzBuzz:0x000055b32ee8c678&gt;</span></span><br><span class="line"><span class="string">        Did you mean?  list</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:45:in `setup'</span></span><br></pre></td></tr></table></figure><p>更新メソッドは存在しませんというエラーに変わったことが確認できたのでテストを元にもどします。</p><p>同様に <strong>インスタンス変数</strong> の <code>@type</code> も読み取り専用にします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">04:32:06 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 22 / 22 LOC (100.0%) covered.</span><br><span class="line">Started with run options --guard --seed 20902</span><br><span class="line"></span><br><span class="line">  32/32: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00920s</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストが壊れていないことを確認したらコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: setterの削除'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/ee9e4f7d-6d39-04a5-e8fe-3308d7c510d8.png" alt="diag-a8b45c800de2a31873f9eba1feac2184.png"></p><h3 id="ポリモーフィズム"><a href="#ポリモーフィズム" class="headerlink" title="ポリモーフィズム"></a>ポリモーフィズム</h3><h4 id="ポリモーフィズムによる条件記述の置き換え-1"><a href="#ポリモーフィズムによる条件記述の置き換え-1" class="headerlink" title="ポリモーフィズムによる条件記述の置き換え 1"></a>ポリモーフィズムによる条件記述の置き換え 1</h4><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/ee9e4f7d-6d39-04a5-e8fe-3308d7c510d8.png" alt="diag-a8b45c800de2a31873f9eba1feac2184.png"></p><p>リファクタリングによりデータとロジックを１つのクラスにまとめて <strong>カプセル化</strong> を進めることが出来ました。しかし、以下の警告メッセージが表示されたままです。<strong>ポリモーフィズム</strong> を使ったロジックのリファクタリングを実施していきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">07:53:29 - INFO - Inspecting Ruby code style: <span class="built_in">test</span>/fizz_buzz_test.rb lib/fizz_buzz.rb</span><br><span class="line">lib/fizz_buzz.rb:11:3: C: Metrics/CyclomaticComplexity: Cyclomatic complexity <span class="keyword">for</span> generate is too high. [10/8]</span><br><span class="line">  def generate(number) ...</span><br><span class="line">  ^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:11:3: C: Metrics/PerceivedComplexity: Perceived complexity <span class="keyword">for</span> generate is too high. [8/7]</span><br><span class="line">  def generate(number) ...</span><br><span class="line">  ^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"> 2/2 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">2 files inspected, 2 offenses detected</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="https://ja.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E7%9A%84%E8%A4%87%E9%9B%91%E5%BA%A6" target="_blank" rel="noopener">循環的複雑度</a> が高く可読性が低く複雑なコードと警告されているようです。対象となっている　<code>FizzBuzz#generate</code> を確認してみましょう。</p><ul><li><p><a href="https://rubocop.readthedocs.io/en/latest/cops_metrics/#metricscyclomaticcomplexity" target="_blank" rel="noopener">Metrics/CyclomaticComplexity</a></p></li><li><p><a href="https://rubocop.readthedocs.io/en/latest/cops_metrics/#metricsperceivedcomplexity" target="_blank" rel="noopener">Metrics/PerceivedComplexity</a></p></li></ul><!-- end list --><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> @type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>コードの不吉な臭いである <strong>スイッチ文</strong> に該当するコードのようなのでここはリファクタリングカタログに従って <strong>ポリモーフィズムによる条件記述の置き換え</strong> を適用していきましょう。比較的大きなリファクタリングなのでいくつかのステップに分けて進めていきます。</p><blockquote><p>スイッチ文</p><p>オブジェクト指向プログラミングのメリットして、スイッチ文が従来にくらべて少なくなるということがあります。スイッチ文は重複したコードを生み出す問題児です。コードのあちらこちらに同じようなスイッチ文が見られることがあります。これでは新たな分岐を追加したときに、すべてのスイッチ文を探して似たような変更をしていかなければなりません。オブジェクト指向ではポリモーフィズムを使い、この問題をエレガントに解決できます。</p><p>— 新装版 リファクタリング</p></blockquote><blockquote><p>重複したスイッチ文</p><p>最近はポリモーフィズムも一般的となり、15 年前に比べると switch 文が単純に赤信号というわけでもなくなりました。また、多くのプログラミング言語が、基本データ型以外をサポートする、より洗練された switch 文を提供してきています。そこで、今後問題とするのは、重複した switch 文のみとします。switch/case 文や、ネストした if/else 文の形で、コードのさまざまな箇所に同じ条件分岐ロジックが書かれていれば、それは「不吉な臭い」です。重複した条件分岐が問題なのは、新たな分岐を追加したら、すべての重複した条件分岐を探して更新指定かなけれけならないからです。ポリモーフィズムは、そうした単調な繰り返しに誘うダークフォースに対抗するための、洗練された武器です。コードベースをよりモダンにしていきましょう。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>ポリモーフィズムによる条件記述の置き換え</p><p>オブジェクトのタイプによって異なる振る舞いを選択する条件記述がある。</p><p>条件記述の各アクション部をサブクラスでオーバーライドするメソッドに移動する。元のメソッドは abstract にする。</p><p>— 新装版 リファクタリング</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span>;</span> <span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span>;</span> <span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span>;</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>まず、タイプごとのクラスを定義します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create</span><span class="params">(type)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      FizzBuzzType01.new</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      FizzBuzzType02.new</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      FizzBuzzType03.new</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>次に、タイプごとのクラスを <strong>インスタンス化</strong> する <strong>ファクトリメソッド</strong> を FizzBuzz クラスに追加します。この時点では新しいクラスとメソッドの追加だけなのでテストは壊れていないはずです（警告は出ていますが・・・）。ここでコミットしておきますがリファクタリング作業としては <a href="https://ja.wikipedia.org/wiki/%E4%BB%95%E6%8E%9B%E5%93%81" target="_blank" rel="noopener">仕掛</a> なので WIP(Work In Progress)をメッセージに追加してコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor(WIP): ポリモーフィズムによる条件記述の置き換え'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/abe9acc4-11e7-a82a-f236-87753512f82e.png" alt="diag-c83e15398192d4cb68c948dfda55870b.png"></p><h4 id="ポリモーフィズムによる条件記述の置き換え-2"><a href="#ポリモーフィズムによる条件記述の置き換え-2" class="headerlink" title="ポリモーフィズムによる条件記述の置き換え 2"></a>ポリモーフィズムによる条件記述の置き換え 2</h4><p>続いて、各タイプクラスに <strong>インスタンスメソッド</strong> を実装します。ここでは <strong>case 式</strong> の各処理をコピー&amp;ペーストしています。カット&amp;ペーストするとプロダクトコードが壊れたままリファクタリングを進めることになるのでここは慎重に進めていきます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span>;</span> <span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span>;</span> <span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span>;</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>警告は出ますがテストは壊れていないのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor(WIP): ポリモーフィズムによる条件記述の置き換え'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/87bc8d77-c195-852c-e517-86272f494ab7.png" alt="diag-c9ffad9b803420dabdb72a8eaf15cb72.png"></p><h4 id="ポリモーフィズムによる条件記述の置き換え-3"><a href="#ポリモーフィズムによる条件記述の置き換え-3" class="headerlink" title="ポリモーフィズムによる条件記述の置き換え 3"></a>ポリモーフィズムによる条件記述の置き換え 3</h4><p>これで準備は整いましたのでテストコードの <code>setup</code> メソッドを <strong>ファクトリメソッド</strong> の呼び出しに変更します。以下の部分は変更してはいけません。理由はわかりますか？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzz.new(<span class="number">1</span>)</span><br><span class="line">          fizzbuzz.generate_list</span><br><span class="line">          @result = fizzbuzz.list</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.create(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.create(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.create(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.create(<span class="number">4</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>例外を返す</span></span><br><span class="line">        e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">          @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'該当するタイプは存在しません'</span>, e.message</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">08:14:14 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 26 / 42 LOC (61.9%) covered.</span><br><span class="line">Started with run options --guard --seed 37585</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_例外を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x000056317940fa28 @name="数を文字列にして返す::それ以外のタイプの場合"&gt;, 0.0037079370085848495]</span></span><br><span class="line"> test_例外を返す<span class="comment">#数を文字列にして返す::それ以外のタイプの場合 (0.00s)</span></span><br><span class="line">Minitest::UnexpectedError:         RuntimeError: 該当するタイプは存在しません</span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:20:<span class="keyword">in</span> `create<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:132:in `setup'</span></span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00685s</span><br><span class="line">32 tests, 33 assertions, 0 failures, 1 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>失敗するテストがありますね、該当するコードを確認したところ例外が発生するタイミングが変わってしまったので以下のように変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.create(<span class="number">4</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>例外を返す</span></span><br><span class="line">        e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">          @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'該当するタイプは存在しません'</span>, e.message</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>例外を返す</span></span><br><span class="line">        e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">          FizzBuzz.create(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'該当するタイプは存在しません'</span>, e.message</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">08:18:08 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 37 / 42 LOC (88.1%) covered.</span><br><span class="line">Started with run options --guard --seed 40171</span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00559s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>コミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor(WIP): ポリモーフィズムによる条件記述の置き換え'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/1048a22a-49cd-7f28-f688-69a62e61c5a9.png" alt="diag-852794d6dd3e17ad001905a500b520e3.png"></p><h4 id="ポリモーフィズムによる条件記述の置き換え-4"><a href="#ポリモーフィズムによる条件記述の置き換え-4" class="headerlink" title="ポリモーフィズムによる条件記述の置き換え 4"></a>ポリモーフィズムによる条件記述の置き換え 4</h4><p>タイプごとに FizzBuzz を生成するクラスを用意したので FizzBuzz クラスから呼び出せるようにしましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>まず、<strong>コンストラクタ</strong> から <strong>クラスメソッド</strong> の <strong>ファクトリメソッド</strong> を呼び出して <strong>インスタンス変数</strong> の <code>type</code> にタイプクラスの <strong>参照</strong> を <strong>代入</strong> します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = FizzBuzz.create(type)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ERROR[<span class="string">"test_配列の14番目は文字列のFizzBuzzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x000055670a343110 @name="数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す"&gt;, 0.006740843993611634]</span></span><br><span class="line"> test_配列の14番目は文字列のFizzBuzzを返す<span class="comment">#数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す (0.01s)</span></span><br><span class="line">Minitest::UnexpectedError:         RuntimeError: 該当するタイプは存在しません</span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:42:<span class="keyword">in</span> `generate<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/lib/fizz_buzz.rb:48:in `block in generate_list'</span></span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:48:<span class="keyword">in</span> `each<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/lib/fizz_buzz.rb:48:in `map'</span></span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:48:<span class="keyword">in</span> `generate_list<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:44:in `setup'</span></span><br></pre></td></tr></table></figure><p>テストが失敗して沢山エラーが表示するようになりましたが落ち着いてください。次に <strong>インスタンスメソッド</strong> <code>FizzBuzz#generate_list</code> 内の <code>FizzBuzz#generate</code> メソッド呼び出しを <strong>インスタンス変数</strong> <code>type</code> が参照するタイプクラスのメソッド <code>FizzBuzzTypeXX#generate</code> を呼び出すように変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = FizzBuzz.create(type)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> @type.generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Started with run options --seed 13878</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Progress: |=====================================================================================================|</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00960s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">05:54:49 - INFO - Inspecting Ruby code style: lib/fizz_buzz.rb</span><br><span class="line">lib/fizz_buzz.rb:24:3: C: Metrics/CyclomaticComplexity: Cyclomatic complexity <span class="keyword">for</span> generate is too high. [10/8]</span><br><span class="line">  def generate(number) ...</span><br><span class="line">  ^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:24:3: C: Metrics/PerceivedComplexity: Perceived complexity <span class="keyword">for</span> generate is too high. [8/7]</span><br><span class="line">  def generate(number) ...</span><br><span class="line">  ^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"> 1/1 file |======================================= 100 ========================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">1 file inspected, 2 offenses detected</span><br></pre></td></tr></table></figure><p>再びテストが通るようになりました。始めのうちはコードを少し変更しただけでなんで動くようになったの？と思うかもしれませんがこれが <strong>ポリモーフィズム</strong> の威力です。この概念を感覚としてつかんで使いこなせるようになることがオブジェクト指向プログラミングの第一歩です。感覚は意識して手を動かしていればそのうちつかめます（多分）。</p><p><strong>ポリモーフィズムによる条件記述の置き換え</strong> が完了したので WIP を外してコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor ポリモーフィズムによる条件記述の置き換え'</span></span><br></pre></td></tr></table></figure><h4 id="State-Strategy-によるタイプコードの置き換え"><a href="#State-Strategy-によるタイプコードの置き換え" class="headerlink" title="State/Strategy によるタイプコードの置き換え"></a>State/Strategy によるタイプコードの置き換え</h4><p>仕上げは　<strong>State/Strategy によるタイプコードの置き換え</strong> を適用して、警告メッセージを消すとしましょう。</p><blockquote><p>State/Strategy によるタイプコードの置き換え</p><p>クラスの振る舞いに影響するタイプコードがあるが、サブクラス化はできない。</p><p>状態オブジェクトでタイプコードを置き換える</p><p>— 新装版 リファクタリング</p></blockquote><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/1048a22a-49cd-7f28-f688-69a62e61c5a9.png" alt="diag-852794d6dd3e17ad001905a500b520e3.png"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = FizzBuzz.create(type)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create</span><span class="params">(type)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      FizzBuzzType01.new</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      FizzBuzzType02.new</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      FizzBuzzType03.new</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> @type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line"></span><br><span class="line">      number.to_s</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> @type.generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>まず、<code>FizzBuzz#generate</code> のメソッド呼び出しを <strong>インスタンス変数</strong> <code>type</code> が参照するタイプクラスのメソッド <code>FizzBuzzTypeXX#generate</code> に <strong>委譲</strong> するように変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    @type.generate(number)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> @type.generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Started with run options --seed 49543</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Progress: |=====================================================================================================|</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00925s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">06:34:27 - INFO - Inspecting Ruby code style: lib/fizz_buzz.rb</span><br><span class="line"> 1/1 file |======================================= 100 ========================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">1 file inspected, no offenses detected</span><br><span class="line">06:34:29 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/loading_background.png coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/border.png</span><br><span class="line"> 0/0 files |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">0 files inspected, no offenses detecte</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>警告が消えました。しかもテストは壊れていないようです。実は <code>FizzBuzz#generate</code> メソッドはどこからも使われていないためテストも壊れることが無いのですがこれでは不要なメソッドになってしまうので <strong>移譲の隠蔽</strong> を実施して、ロジックを <strong>カプセル化</strong> します。</p><blockquote><p>委譲の隠蔽</p><p>オブジェクト指向について最初に教わる時、カプセル化とはフィールドを隠すことだと習うでしょう。しかし経験を積むにつれて、他にもカプセル化できるものがあることに気づきます。</p><p>— リファクタリング(第 2 版)</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    @type.generate(number)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストも FizzBuzz インスタンス経由で実行するように修正しておきます。これですべての呼び出しが <code>new</code> メソッド経由となりテストコードに一貫性を取り戻すことが出来ました。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzz.new(<span class="number">1</span>)</span><br><span class="line">          fizzbuzz.generate_list</span><br><span class="line">          @result = fizzbuzz.list</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>例外を返す</span></span><br><span class="line">        e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">          FizzBuzz.new(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'該当するタイプは存在しません'</span>, e.message</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">08:32:17 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 32 / 32 LOC (100.0%) covered.</span><br><span class="line">Started with run options --guard --seed 63863</span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00564s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">08:32:18 - INFO - Inspecting Ruby code style of all files</span><br><span class="line"> 7/7 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, no offenses detected</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>ポリモーフィズム</strong> の感覚がつかめないうちは <code>FizzBuzz#generate</code> のコードが一行になったのに既存のテストも壊れず動いていることが不思議に思うかもしれません。しかしコードとしては FizzBuzz クラスの <code>generate</code> メソッドは任意のタイプクラスの <code>generate</code> メソッドを呼び出しているだけで処理の詳細は理解しなくても振る舞いを理解できる <strong>抽象化</strong> された読みやすいコードになりました。静的コード解析も可読性が高くシンプルなコードとみなしてくれているようです。さて、警告メッセージもなくなり、テストも壊れていないのでコミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: State/Strategyによるタイプコードの置き換え'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/1048a22a-49cd-7f28-f688-69a62e61c5a9.png" alt="diag-852794d6dd3e17ad001905a500b520e3.png"></p><h3 id="継承"><a href="#継承" class="headerlink" title="継承"></a>継承</h3><p>分割したタイプクラスのメソッドに重複する処理があるので <strong>継承</strong> を使ってリファクタリングしましょう。ここでは <strong>スーパークラスの抽出</strong>を適用します。</p><blockquote><p>スーパークラスの抽出</p><p>似通った特性を持つ２つのクラスがある。</p><p>スーパークラスを作成して、共通の特性を移動する。</p><p>— 新装版 リファクタリング</p></blockquote><h4 id="スーパークラスの抽出"><a href="#スーパークラスの抽出" class="headerlink" title="スーパークラスの抽出"></a>スーパークラスの抽出</h4><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/1048a22a-49cd-7f28-f688-69a62e61c5a9.png" alt="diag-852794d6dd3e17ad001905a500b520e3.png"></p><p>まずは、タイプクラスのスーパークラスとなる <code>FizzBuzzType</code> クラスを作成して各タイプクラスに継承させます。</p><blockquote><p>クラスベースのオブジェクト指向言語の多くはクラスの継承機能を有しています。クラスの継承とはあるクラスを元として、新しいクラスを定義することです。この時、継承元となるクラスを親クラスやスーパークラスと呼び、継承したクラスのことを子クラスやサブクラスと呼びます。</p><p>— かんたん Ruby</p></blockquote><p>Ruby の <strong>クラスの継承</strong> は以下のように書きます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span>;</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span>;</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span> &lt; FizzBuzzType</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span> &lt; FizzBuzzType</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span> &lt; FizzBuzzType</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>スーパークラス <code>FizzBuzzType</code> を定義して各サブクラスに継承させます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">08:42:24 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 33 / 33 LOC (100.0%) covered.</span><br><span class="line">Started with run options --guard --seed 43548</span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00860s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">08:42:25 - INFO - Inspecting Ruby code style of all files</span><br><span class="line"> 7/7 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, no offenses detected</span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/9e68539c-0b82-d0b7-3ede-4f6892399abf.png" alt="diag-df749de89e01204bc0eab92419515a4c.png"></p><p>次に <code>is_fizz</code> <code>is_buzz</code> 部分を共通メソッドとしてスーパークラスに定義して各タイプクラスで呼び出すように変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span>;</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_fizz</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_buzz</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz(number) &amp;&amp; is_buzz(number)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz(number)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz(number)</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz(number) &amp;&amp; is_buzz(number)</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">08:50:16 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 33 / 33 LOC (100.0%) covered.</span><br><span class="line">Started with run options --guard --seed 45685</span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01073s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">08:50:17 - INFO - Inspecting Ruby code style of all files</span><br><span class="line">lib/fizz_buzz.rb:35:7: C: Naming/PredicateName: Rename is_fizz to fizz?.</span><br><span class="line">  def is_fizz(number)</span><br><span class="line">      ^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:39:7: C: Naming/PredicateName: Rename is_buzz to buzz?.</span><br><span class="line">  def is_buzz(number)</span><br><span class="line">      ^^^^^^^</span><br><span class="line"> 7/7 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, 2 offenses detected</span><br></pre></td></tr></table></figure><p>テストが壊れていないことが確認できたのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: スーパークラスの抽出'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/ee6b125d-dc1f-3069-5f0c-c698ffe251be.png" alt="diag-119864cf3ef287a3cb00d3a5ae7f7768.png"></p><h4 id="メソッド名の変更"><a href="#メソッド名の変更" class="headerlink" title="メソッド名の変更"></a>メソッド名の変更</h4><p><strong>スーパークラスの抽出</strong> を実施したところまた警告メッセージが表示されるようになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">08:50:19 - INFO - Inspecting Ruby code styl</span><br><span class="line">e: coverage/assets/0.10.2/colorbox/loading_background.png coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/border.png lib/fizz_buzz.rb</span><br><span class="line">lib/fizz_buzz.rb:35:7: C: Naming/PredicateName: Rename is_fizz to fizz?.</span><br><span class="line">  def is_fizz(number)</span><br><span class="line">      ^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:39:7: C: Naming/PredicateName: Rename is_buzz to buzz?.</span><br><span class="line">  def is_buzz(number)</span><br><span class="line">      ^^^^^^^</span><br><span class="line"> 1/1 file |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">1 file inspected, 2 offenses detected</span><br></pre></td></tr></table></figure><p><a href="https://rubocop.readthedocs.io/en/latest/cops_naming/#namingpredicatename" target="_blank" rel="noopener">Naming/PredicateName</a> Ruby の  ネーミングとしてはよろしくないようなので指示に従って <strong>メソッド名の変更</strong> を実施しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_fizz</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_buzz</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz(number) &amp;&amp; is_buzz(number)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz(number)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz(number)</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz(number) &amp;&amp; is_buzz(number)</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fizz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buzz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> fizz?(number) &amp;&amp; buzz?(number)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> fizz?(number)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> buzz?(number)</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> fizz?(number) &amp;&amp; buzz?(number)</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Progress: |====================================================================================================|</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01144s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">08:53:35 - INFO - Inspecting Ruby code style: lib/fizz_buzz.rb</span><br><span class="line"> 1/1 file |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">1 file inspected, no offenses detected</span><br></pre></td></tr></table></figure><p>作業としては難しくないのでミスタイプしないように（まあ、ミスタイプしてもテストが教えてくれますが・・・）変更してコミットしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: メソッド名の変更'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/431fe33d-a0fc-669b-e26d-ec514e9959b5.png" alt="diag-f06a12d01484b03fa6f2f85b062a3cf0.png"></p><h4 id="メソッドの移動"><a href="#メソッドの移動" class="headerlink" title="メソッドの移動"></a>メソッドの移動</h4><p><code>FizzBuzz</code> クラスの <strong>ファクトリメソッド</strong> ですが <strong>特性の横恋慕</strong> の臭いがするので <strong>メソッドの移動</strong> を実施します。</p><blockquote><p>特性の横恋慕</p><p>オブジェクト指向には、処理および処理に必要なデータを１つにまとめてしまうという重要な考え方があります。あるメソッドが、自分のクラスより他のクラスに興味を持つような場合には、古典的な誤りを犯しています。</p><p>— 新装版 リファクタリング</p></blockquote><blockquote><p>メソッドの移動</p><p>あるクラスでメソッドが定義されているが、現在または将来において、そのクラスの特性よりも他のクラスの特性の方が、そのメソッドを使ったり、そのメソッドから使われたりすることが多い。</p><p>同様の本体を持つ新たなメソッドを、それを最も多用するクラスに作成する。元のメソッドは、単純な委譲とするか、またはまるごと取り除く。</p><p>— 新装版 リファクタリング</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = FizzBuzz.create(type)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create</span><span class="params">(type)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      FizzBuzzType01.new</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      FizzBuzzType02.new</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      FizzBuzzType03.new</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    @type.generate(number)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fizz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buzz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>クラスメソッド</strong> <code>FizzBuzz.create</code> をカット&amp;ペーストして <code>FizzBuzzType.create</code> に移動します。 <code>FizzBuzz</code> の <strong>コンストラクタ</strong> で呼び出している <strong>クラスメソッド</strong> を <code>FizzBuzzType.create</code> に変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = FizzBuzzType.create(type)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    @type.generate(number)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create</span><span class="params">(type)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      FizzBuzzType01.new</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      FizzBuzzType02.new</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      FizzBuzzType03.new</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fizz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buzz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">08:59:27 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 33 / 33 LOC (100.0%) covered.</span><br><span class="line">Started with run options --guard --seed 19583</span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00688s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">08:59:28 - INFO - Inspecting Ruby code style of all files</span><br><span class="line"> 7/7 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, no offenses detected</span><br></pre></td></tr></table></figure><p>テストが壊れていないことを確認したらコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: メソッドの移動'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/f90701c2-c6d1-2ee1-b290-531bef33f282.png" alt="diag-c24dbdafdc4766204e9b3fba9938dbba.png"></p><h3 id="値オブジェクト"><a href="#値オブジェクト" class="headerlink" title="値オブジェクト"></a>値オブジェクト</h3><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/f90701c2-c6d1-2ee1-b290-531bef33f282.png" alt="diag-c24dbdafdc4766204e9b3fba9938dbba.png"></p><h4 id="オブジェクトによるプリミティブの置き換え"><a href="#オブジェクトによるプリミティブの置き換え" class="headerlink" title="オブジェクトによるプリミティブの置き換え"></a>オブジェクトによるプリミティブの置き換え</h4><p><code>FizzBuzz</code> クラスを <strong>インスタンス化</strong> するには以下のように書きます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fizz_buzz = FizzBuzz.new(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>クラスとして定義された情報を元に具体的な値を伴ったオブジェクトを作成することをインスタンス化と呼び、生成されたオブジェクトのことをインスタンスと呼びます。</p><p>— かんたん Ruby</p></blockquote><p><strong>コンストラクタ</strong> の <strong>引数</strong> に渡される <code>1</code> は何を表しているのでしょうか？もちろんタイプですが初めてこのコードを見る人にはわからないでしょう。このような整数、浮動小数点、文字列などの基本データ（プリミティブ）型の使い方からは  <strong>基本データ型への執着</strong>の臭いがします。 <strong>オブジェクトによるプリミティブの置き換え</strong> を実施してコードの意図を明確にしましょう。</p><blockquote><p>基本データ型への執着</p><p>オブジェクト指向のメリットとして、基本データ型とそれより大きなクラスとの境界を取り除くということがあります。プログラミング言語の組み込み（built-in）型と区別できないような小さなクラスを自分で定義することが容易です。</p><p>— 新装版 リファクタリング</p></blockquote><blockquote><p>基本データ型への執着</p><p>興味深いことに、多くのプログラマは、対象としているドメインに役立つ、貨幣、座標、範囲などの基本的な型を導入するのを嫌がる傾向があります。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>オブジェクトによるデータ値の置き換え</p><p>追加のデータや振る舞いが必要なデータ項目がある。</p><p>そのデータ項目をオブジェクトに変える。</p><p>— 新装版 リファクタリング</p></blockquote><blockquote><p>オブジェクトによるプリミティブの置き換え</p><p>旧：オブジェクトによるデータ値の置き換え</p><p>旧：クラスによるタイプコードの置き換え</p><p>— リファクタリング(第 2 版)</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = FizzBuzzType.create(type)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>コンストラクタ</strong> で引き渡されるタイプは整数ではなくタイプクラスの <strong>インスタンス</strong> に変更します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_1を渡したら文字列1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005654f32602c0 @name="数を文字列にして返す::タイプ3の場合::その他の場合"&gt;, 0.00241121300496161]</span></span><br><span class="line"> test_1を渡したら文字列1を返す<span class="comment">#数を文字列にして返す::タイプ3の場合::その他の場合 (0.00s)</span></span><br><span class="line">Minitest::UnexpectedError:         NoMethodError: undefined method `generate<span class="string">' for 3:Integer</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/lib/fizz_buzz.rb:12:in `generate'</span></span><br><span class="line">            /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:125:<span class="keyword">in</span> `test_1を渡したら文字列1を返す<span class="string">'</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>テストが失敗しました。 <strong>コンストラクタ</strong> の引数を整数からタイプクラスの <strong>インスタンス</strong> に変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzz.new(<span class="number">1</span>)</span><br><span class="line">          fizzbuzz.generate_list</span><br><span class="line">          @result = fizzbuzz.list</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>例外を返す</span></span><br><span class="line">        e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">          FizzBuzz.new(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'該当するタイプは存在しません'</span>, e.message</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>ここで注意するのは <code>それ以外のタイプの場合</code> ですが例外を投げなくなります。静的に型付けされた言語なら型チェックエラーになるのですが Ruby は動的に型付けされる言語のため <code>FizzBuzz#generate</code> メソッド実行までエラーになりません。そこで例外を投げる <code>FizzBuzzType#create</code> メソッドに変更しておきます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(FizzBuzzType01.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzz.new(FizzBuzzType01.new)</span><br><span class="line">          fizzbuzz.generate_list</span><br><span class="line">          @result = fizzbuzz.list</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(FizzBuzzType02.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(FizzBuzzType03.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>例外を返す</span></span><br><span class="line">        e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">          FizzBuzzType.create(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'該当するタイプは存在しません'</span>, e.message</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>それ以外のタイプの場合は <strong>ファクトリメソッド</strong> 経由でないと <strong>例外</strong> を出さなくなるので注意してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">09:09:40 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 30 / 33 LOC (90.91%) covered.</span><br><span class="line">Started with run options --guard --seed 17452</span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00687s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>初めてコードを見る人でもテストコードを見ればコードの意図が読み取れるようになりましたのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: オブジェクトによるプリミティブの置き換え'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/f90701c2-c6d1-2ee1-b290-531bef33f282.png" alt="diag-c24dbdafdc4766204e9b3fba9938dbba.png"></p><h4 id="マジックナンバーの置き換え"><a href="#マジックナンバーの置き換え" class="headerlink" title="マジックナンバーの置き換え"></a>マジックナンバーの置き換え</h4><p>まだプリミティグ型を使っている部分があります。ここは <strong>マジックナンバーの置き換え</strong> を実施して可読性を上げておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create</span><span class="params">(type)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">      FizzBuzzType01.new</span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span></span><br><span class="line">      FizzBuzzType02.new</span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span></span><br><span class="line">      FizzBuzzType03.new</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">  TYPE_01 = <span class="number">1</span></span><br><span class="line">  TYPE_02 = <span class="number">2</span></span><br><span class="line">  TYPE_03 = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create</span><span class="params">(type)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_01</span><br><span class="line">      FizzBuzzType01.new</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_02</span><br><span class="line">      FizzBuzzType02.new</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_03</span><br><span class="line">      FizzBuzzType03.new</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">09:18:51 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 33 / 36 LOC (91.67%) covered.</span><br><span class="line">Started with run options --guard --seed 41124</span><br><span class="line"></span><br><span class="line">  32/32: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00909s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストは壊れていないのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: マジックナンバーの置き換え'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/055ea1c9-54db-543f-9e1d-b0fdfedc2fef.png" alt="diag-be7c345eb3b4de2cc3b4530da0d96f5d.png"></p><h4 id="オブジェクトによるプリミティブの置き換え-1"><a href="#オブジェクトによるプリミティブの置き換え-1" class="headerlink" title="オブジェクトによるプリミティブの置き換え"></a>オブジェクトによるプリミティブの置き換え</h4><p>次に <strong>基本データ型への執着</strong> の臭いがする箇所として <code>FizzBuzz#generate</code> メソッドが返す FizzBuzz の値が文字型である点です。文字列の代わりに <strong>値オブジェクト</strong> <code>FizzBuzzValue</code> クラスを定義します。</p><blockquote><p>値の種類ごとに専用の型を用意するとコードが安定し、コードの意図が明確になります。このように、値を扱うための専用クラスを作るやり方を値オブジェクト（ValueObject）と呼びます。</p><p>— 現場で役立つシステム設計の原則</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValue</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:number</span>, <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(number, value)</span></span></span><br><span class="line">    @number = number</span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    <span class="string">"<span class="subst">#&#123;@number&#125;</span>:<span class="subst">#&#123;@value&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">==</span><span class="params">(other)</span></span></span><br><span class="line">    @number == other.number &amp;&amp; @value == other.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">alias</span> eql? ==</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>各タイプクラスの <code>generate</code> メソッドが文字列のプリミティブ型を返しているので <strong>値オブジェクト</strong> <code>FizzBuzzValue</code> を返すように変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> fizz?(number) &amp;&amp; buzz?(number)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> fizz?(number)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> buzz?(number)</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> fizz?(number) &amp;&amp; buzz?(number)</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'FizzBuzz'</span>) <span class="keyword">if</span> fizz?(number) &amp;&amp; buzz?(number)</span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'Fizz'</span>) <span class="keyword">if</span> fizz?(number)</span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'Buzz'</span>) <span class="keyword">if</span> buzz?(number)</span><br><span class="line"></span><br><span class="line">    FizzBuzzValue.new(number, number.to_s)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    FizzBuzzValue.new(number, number.to_s)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'FizzBuzz'</span>) <span class="keyword">if</span> fizz?(number) &amp;&amp; buzz?(number)</span><br><span class="line"></span><br><span class="line">    FizzBuzzValue.new(number, number.to_s)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> FAIL[<span class="string">"test_配列の2番目は文字列のFizzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x000055feccc65ab8 @name="数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す"&gt;, 0.012104410998290405]</span></span><br><span class="line"> test_配列の2番目は文字列のFizzを返す<span class="comment">#数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す (0.01s)</span></span><br><span class="line">        --- expected</span><br><span class="line">        +++ actual</span><br><span class="line">        @@ -1 +1 @@</span><br><span class="line">        -<span class="string">"Fizz"</span></span><br><span class="line">        +<span class="comment">#&lt;FizzBuzzValue:0xXXXXXX @number=3, @value="Fizz"&gt;</span></span><br><span class="line">        /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:57:<span class="keyword">in</span> `test_配列の2番目は文字列のFizzを返す<span class="string">'</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>変更によりテストが失敗しました。エラー内容を見てみると文字列からオブジェクトを返しているためアサーションが失敗しているようです。ここは、<strong>値オブジェクト</strong> の <strong>アクセッサメソッド</strong> を経由して取得した値をアサーション対象に変更しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(FizzBuzzType01.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Fizz'</span>, @fizzbuzz.generate(<span class="number">3</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @fizzbuzz.generate(<span class="number">5</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.generate(<span class="number">15</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzz.new(FizzBuzzType01.new)</span><br><span class="line">          fizzbuzz.generate_list</span><br><span class="line">          @result = fizzbuzz.list</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @result.first.value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の最後は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @result.last.value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の2番目は文字列の<span class="title">Fizz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Fizz'</span>, @result[<span class="number">2</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の4番目は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @result[<span class="number">4</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の14番目は文字列の<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @result[<span class="number">14</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(FizzBuzzType02.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.generate(<span class="number">3</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.generate(<span class="number">5</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列15を返す</span></span><br><span class="line">          assert_equal <span class="string">'15'</span>, @fizzbuzz.generate(<span class="number">15</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzz.new(FizzBuzzType03.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.generate(<span class="number">3</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.generate(<span class="number">5</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.generate(<span class="number">15</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>).value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>例外を返す</span></span><br><span class="line">        e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">          FizzBuzzType.create(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'該当するタイプは存在しません'</span>, e.message</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">08:49:28 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 41 / 46 LOC (89.13%) covered.</span><br><span class="line">Started with run options --guard --seed 25972</span><br><span class="line"></span><br><span class="line">  32/32: [==================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00619s</span><br><span class="line">32 tests, 35 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">08:49:29 - INFO - Inspecting Ruby code style of all files</span><br><span class="line"> 7/7 files |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, no offenses detected</span><br><span class="line">08:49:30 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/loading_background.png coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/border.png</span><br><span class="line"> 0/0 files |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">0 files inspected, no offenses detected</span><br></pre></td></tr></table></figure><p>テストコードをそれほど変更することなく <strong>値オブジェクト</strong> を返すリファクタリングが出来ました。コミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: オブジェクトによるプリミティブの置き換え'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/230b50d5-9f01-5e41-18fc-998be9c52c46.png" alt="diag-719d1727313ce1fe35a0a3eaeca9a624.png"></p><h4 id="学習用テスト"><a href="#学習用テスト" class="headerlink" title="学習用テスト"></a>学習用テスト</h4><p><strong>値オブジェクト</strong> の理解を深めるために <strong>学習用テスト</strong> を追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'FizzBuzzValue'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @fizzbuzz = FizzBuzz.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じで値である</span></span><br><span class="line">      value1 = @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">      value2 = @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">      assert value1.eql?(value2)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_to_string</span>メソッド</span></span><br><span class="line">      value = @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'3:Fizz'</span>, value.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'test: 学習用テスト'</span></span><br></pre></td></tr></table></figure><h3 id="ファーストクラスコレクション"><a href="#ファーストクラスコレクション" class="headerlink" title="ファーストクラスコレクション"></a>ファーストクラスコレクション</h3><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/230b50d5-9f01-5e41-18fc-998be9c52c46.png" alt="diag-719d1727313ce1fe35a0a3eaeca9a624.png"></p><h4 id="コレクションのカプセル化"><a href="#コレクションのカプセル化" class="headerlink" title="コレクションのカプセル化"></a>コレクションのカプセル化</h4><p><strong>値オブジェクト</strong> を扱う FizzBuzz リストですが <strong>コレクションのカプセル化</strong> を適用して <strong>ファーストクラスコレクション</strong> オブジェクトを追加しましょう。</p><blockquote><p>コレクションのカプセル化</p><p>メソッドがコレクションを返している。</p><p>読み取り専用のビューを返して、追加と削除のメソッドを提供する。</p><p>— 新装版 リファクタリング</p></blockquote><blockquote><p>このように、コレクション型のデータとロジックを特別扱いにして、コレクションを１つだけ持つ専用クラスを作るやり方をコレクションオブジェクトあるいはファーストクラスコレクションと呼びます。</p><p>— 現場で役立つシステム設計の原則</p></blockquote><p>まず、 <strong>ファーストクラスコレクション</strong> クラスを追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzList</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(list)</span></span></span><br><span class="line">    @value = list</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    @value.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(value)</span></span></span><br><span class="line">    FizzBuzzList.new(@value + value)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>FizzBuzz 配列を <strong>ファーストクラスコレクション</strong> から取得するように変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">    @list = FizzBuzzList.new([])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = @list.add((<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> @type.generate(n) &#125;)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>なんだか紛らわしい書き方になってしましました。配列を作るのに以前の配列を元に新しい配列を作るとか回りくどいことをしないで既存の配列を使い回せばいいじゃんと思うかもしれませんが <strong>変更可能なデータ</strong> はバグの原因となる傾向があります。変更可能な <strong>ミュータブル</strong> な変数ではなく 永続的に変更されない <strong>イミュータブル</strong> な変数を使うように心がけましょう。</p><blockquote><p>変更可能なデータ</p><p>データの変更はしばし予期せぬ結果結果や、厄介なバグを引き起こします。他で違う値を期待していることに気づかないままに、ソフトウェアのある箇所で値を変更してしまえば、それだけで動かなくなってしまいます。これは値が変わる条件がまれにしかない場合、特に見つけにくいバグとなります。そのため、ソフトウェア開発の一つの潮流である関数型プログラミングは、データは不変であるべきで、更新時は常に元にデータ構造のコピーを返すようにし、元データには手を触れないという思想に基づいています。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>値オブジェクトと同じようにコレクションオブジェクトも、できるだけ「不変」スタイルで設計します。そのほうがプログラムが安定します。</p><p>— 現場で役立つシステム設計の原則</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ERROR[<span class="string">"test_配列の14番目は文字列のFizzBuzzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005561331b7940 @name="FizzBuzz::数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す"&gt;, 0.011710233025951311]</span></span><br><span class="line"> test_配列の14番目は文字列のFizzBuzzを返す<span class="comment">#FizzBuzz::数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す (0.01s)</span></span><br><span class="line">Minitest::UnexpectedError:         NoMethodError: undefined method `[]<span class="string">' for #&lt;FizzBuzzList:0x0000556133198ba8 @value=[]&gt;</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:66:in `test_配列の14番目は文字列のFizzBuzzを返す'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>ファーストクラスコレクション</strong> 経由で取得するようになったので <strong>アクセッサメソッド</strong> を変更する必要があります。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:list</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">    @list = FizzBuzzList.new([])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:type</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">list</span></span></span><br><span class="line">    @list.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">    @list = FizzBuzzList.new([])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">09:12:46 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 53 / 56 LOC (94.64%) covered.</span><br><span class="line">Started with run options --guard --seed 61051</span><br><span class="line"></span><br><span class="line">  34/34: [==================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01285s</span><br><span class="line">34 tests, 37 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">09:12:47 - INFO - Inspecting Ruby code style of all files</span><br><span class="line"> 7/7 files |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, no offenses detected</span><br><span class="line">09:12:48 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/loading_background.png coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/border.png</span><br><span class="line"> 0/0 files |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">0 files inspected, no offenses detected</span><br></pre></td></tr></table></figure><p>テストが直ったのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: コレクションのカプセル化'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/9c7d1661-11c3-f495-e41b-b3ed7f8eb940.png" alt="diag-f753577a92fab80607a2e63cf53e8389.png"></p><h4 id="学習用テスト-1"><a href="#学習用テスト-1" class="headerlink" title="学習用テスト"></a>学習用テスト</h4><p><strong>ファーストクラスコレクション</strong> を理解するため <strong>学習用テスト</strong> を追加しておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'FizzBuzzValueList'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @fizzbuzz = FizzBuzz.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しいインスタンスが作られる</span></span><br><span class="line">      list1 = @fizzbuzz.generate_list</span><br><span class="line">      list2 = list1.add(list1.value)</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="number">100</span>, list1.value.count</span><br><span class="line">      assert_equal <span class="number">200</span>, list2.value.count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: 学習用テスト'</span></span><br></pre></td></tr></table></figure><h3 id="オブジェクト指向設計-1"><a href="#オブジェクト指向設計-1" class="headerlink" title="オブジェクト指向設計"></a>オブジェクト指向設計</h3><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/9c7d1661-11c3-f495-e41b-b3ed7f8eb940.png" alt="diag-f753577a92fab80607a2e63cf53e8389.png"></p><p><strong>値オブジェクト</strong> 及び <strong>ファーストクラスコレクション</strong> の適用で <strong>基本データ型への執着</strong> の臭いはなくなりました。今度は設計の観点から全体を眺めてみましょう。ここで気になるのが <code>FizzBuzz</code> クラスです。このクラスは他のクラスと比べてやることが多いようです。このようなクラスは <strong>単一責任の原則</strong> に違反している可能性があります。そこで <strong>デザインパターン</strong> の１つである <strong>Command パターン</strong> を使ったリファクタリングである <strong>メソッドオブジェクトによるメソッドの置き換え</strong> 適用してみようと思います。</p><blockquote><p>SRP:<br>単一責任の原則</p><p>かつて単一責任の原則(SRP)は、以下のように語られてきた。</p><pre><code>モジュールを変更する理由はたったひとつだけであるべきである</code></pre><p>ソフトウェアシステムに手を加えるのは、ユーザーやステークホルダーを満足させるためだ。この「ユーザーやステークホルダー」こそが、単一責任の原則（SRP）を指す「変更する理由」である。つまり、この原則は以下のように言い換えられる。</p><pre><code>モジュールはたったひとりのユーザーやステークホルダーに対して責任を負うべきである。</code></pre><p>残念ながら「たったひとりのユーザーやステークホルダー」という表現は適切ではない。複数のユーザーやステークホルダーがシステムを同じように変更したいと考えることもある。ここでは、変更を望む人たちをひとまとめにしたグループとして扱いたい。このグループのことをアクターと呼ぶことにしよう。<br>これを踏まえると、最終的な単一責任の原則（SRP）は以下のようになる。</p><pre><code>モジュールはたったひとつのアクターに対して責任を負うべきである。</code></pre><p>さて、ここでいう「モジュール」とは何のことだろう？端的に言えば、モジュールとはソースファイルのことである。たいていの場合は、この定義で問題ないだろう。だが、ソースファイル以外のところにコードを格納する言語や開発環境も存在する。そのような場合の「モジュール」は、いくつかの関数やデータをまとめた凝集性のあるものだと考えよう。</p><p>「凝集性のある」という言葉が単一責任の原則（SRP）を匂わせる。凝集性が、ひとつのアクターに対する責務を負うコードをまとめるフォースとなる。</p><p>— Clean Architecture 達人に学ぶソフトウェアの構造と設計</p></blockquote><blockquote><p>Command パターン</p><p>処理の呼び出しが、シンプルなメソッド呼び出しよりも複雑になってきたときはどうすればよいだろうか—処理のためのオブジェクトを作成し、それを起動するようにしよう。</p><p>— テスト駆動開発</p></blockquote><blockquote><p>メソッドオブジェクトによるメソッドの置き換え</p><p>長いメソッドで、「メソッドの抽出」を適用できないようなローカル変数の使い方をしている。</p><p>メソッド自身をオブジェクトとし、すべてのローカル変数をそのオブジェクトのフィールドとする。そうすれば、そのメソッドを同じオブジェクト中のメソッド群に分解できる。</p><p>— 新装版 リファクタリング</p></blockquote><h4 id="メソッドオブジェクトによるメソッドの置き換え"><a href="#メソッドオブジェクトによるメソッドの置き換え" class="headerlink" title="メソッドオブジェクトによるメソッドの置き換え"></a>メソッドオブジェクトによるメソッドの置き換え</h4><p>まず、<strong>値オブジェクト</strong> の <code>FizzBuzzValue</code> を返す責務だけを持った <strong>メソッドオブジェクト</strong> を抽出します。Ruby のような動的言語では必要が無いのですが <strong>Command パターン</strong> の説明のため <strong>インターフェイス</strong> にあたるスーパークラスを継承した <strong>メソッドオブジェクト</strong> を定義します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzCommand</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">execute</span>;</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValueCommand</span> &lt; FizzBuzzCommand</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(number)</span></span></span><br><span class="line">    @type.generate(number).value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストコードを <code>FizzBuzzValueCommand</code> を呼び出すように変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzzValueCommand.new(FizzBuzzType01.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Fizz'</span>, @fizzbuzz.execute(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @fizzbuzz.execute(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.execute(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.execute(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzz.new(FizzBuzzType01.new)</span><br><span class="line">          fizzbuzz.generate_list</span><br><span class="line">          @result = fizzbuzz.list</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @result.first.value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の最後は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @result.last.value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の2番目は文字列の<span class="title">Fizz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Fizz'</span>, @result[<span class="number">2</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の4番目は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @result[<span class="number">4</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の14番目は文字列の<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @result[<span class="number">14</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzzValueCommand.new(FizzBuzzType02.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.execute(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.execute(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列15を返す</span></span><br><span class="line">          assert_equal <span class="string">'15'</span>, @fizzbuzz.execute(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.execute(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzzValueCommand.new(FizzBuzzType03.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.execute(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.execute(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.execute(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.execute(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>例外を返す</span></span><br><span class="line">        e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">          FizzBuzzType.create(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'該当するタイプは存在しません'</span>, e.message</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">09:56:19 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 60 / 63 LOC (95.24%) covered.</span><br><span class="line">Started with run options --guard --seed 27353</span><br><span class="line"></span><br><span class="line">  35/35: [==================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00692s</span><br><span class="line">35 tests, 39 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">09:56:20 - INFO - Inspecting Ruby code style of all files</span><br><span class="line"> 7/7 files |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, no offenses detected</span><br><span class="line">09:56:21 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/loading_background.png coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/border.png</span><br><span class="line"> 0/0 files |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p><code>FizzBuzzValueCommand</code> の抽出ができたのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: メソッドオブジェクトによるメソッドの置き換え'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/29eee45e-037a-04be-ff2f-e2696e1ab4d3.png" alt="diag-ee5628564b01a6264bda537c84b0458b.png"></p><h4 id="メソッドオブジェクトによるメソッドの置き換え-1"><a href="#メソッドオブジェクトによるメソッドの置き換え-1" class="headerlink" title="メソッドオブジェクトによるメソッドの置き換え"></a>メソッドオブジェクトによるメソッドの置き換え</h4><p>続いて、<strong>ファーストクラスコレクション</strong> を扱う <code>FizzBuzzList</code> を返す責務だけを持った <strong>メソッドオブジェクト</strong> を抽出します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzListCommand</span> &lt; FizzBuzzCommand</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(number)</span></span></span><br><span class="line">    FizzBuzzList.new((<span class="number">1</span>..number).map &#123; <span class="params">|i|</span> @type.generate(i) &#125;).value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストコードを <strong>FizzBuzzListCommand</strong> 経由から実行するように変更します</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">        describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">          <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">            fizzbuzz = FizzBuzz.new(FizzBuzzType01.new)</span><br><span class="line">            fizzbuzz.generate_list</span><br><span class="line">            @result = fizzbuzz.list</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzzListCommand.new(FizzBuzzType01.new)</span><br><span class="line">          @result = fizzbuzz.execute(<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">01:27:54 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 61 / 66 LOC (92.42%) covered.</span><br><span class="line">Started with run options --guard --seed 62253</span><br><span class="line"></span><br><span class="line">  35/35: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00652s</span><br><span class="line">35 tests, 39 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストが通ったのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: メソッドオブジェクトによるメソッドの置き換え'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/d94351bd-23d9-6081-baa4-8f71ab75d3de.png" alt="diag-4a094b5dcd7f922c01a8ad5b39f6839d.png"></p><h4 id="デッドコードの削除"><a href="#デッドコードの削除" class="headerlink" title="デッドコードの削除"></a>デッドコードの削除</h4><p><code>FizzBuzz</code> クラスの責務は各 <strong>メソッドオブジェクト</strong> が実行するようになったので削除しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">    @list = FizzBuzzList.new([])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">list</span></span></span><br><span class="line">    @list.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    @type.generate(number)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    @list = @list.add((<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> @type.generate(n) &#125;)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ERROR[<span class="string">"test_同じで値である"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x0000562fd34f7848 @name="FizzBuzzValue"&gt;, 0.008059715997660533]</span></span><br><span class="line"> test_同じで値である<span class="comment">#FizzBuzzValue (0.01s)</span></span><br><span class="line">Minitest::UnexpectedError:         NameError: uninitialized constant FizzBuzzTest::FizzBuzz</span><br><span class="line">            /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:225:<span class="keyword">in</span> `setup<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ERROR["test_to_stringメソッド", #&lt;Minitest::Reporters::Suite:0x0000562fd37694a0 @name="FizzBuzzValue"&gt;, 0.01728590900893323]</span></span><br><span class="line"><span class="string"> test_to_stringメソッド#FizzBuzzValue (0.02s)</span></span><br><span class="line"><span class="string">Minitest::UnexpectedError:         NameError: uninitialized constant FizzBuzzTest::FizzBuzz</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:225:in `setup'</span></span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_新しいインスタンスが作られる"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x0000562fd39be070 @name="FizzBuzzValueList"&gt;, 0.028008958004647866]</span></span><br><span class="line"> test_新しいインスタンスが作られる<span class="comment">#FizzBuzzValueList (0.03s)</span></span><br><span class="line">Minitest::UnexpectedError:         NameError: uninitialized constant FizzBuzzTest::FizzBuzz</span><br><span class="line">            /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:244:<span class="keyword">in</span> `setup<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">========================================|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.03539s</span></span><br><span class="line"><span class="string">35 tests, 35 assertions, 0 failures, 3 errors, 0 skips</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>テストが失敗しました。これは <strong>学習用テスト</strong> で <code>FizzBuzz</code> クラスを使っている箇所があるからですね。 <strong>メソッドオブジェクト</strong> 呼び出しに変更しておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  describe <span class="string">'FizzBuzzValue'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @fizzbuzz = FizzBuzz.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じで値である</span></span><br><span class="line">      value1 = @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">      value2 = @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">      assert value1.eql?(value2)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_to_string</span>メソッド</span></span><br><span class="line">      value = @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'3:Fizz'</span>, value.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'FizzBuzzValueList'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @fizzbuzz = FizzBuzz.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しいインスタンスが作られる</span></span><br><span class="line">      list1 = @fizzbuzz.generate_list</span><br><span class="line">      list2 = list1.add(list1.value)</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="number">100</span>, list1.value.count</span><br><span class="line">      assert_equal <span class="number">200</span>, list2.value.count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'FizzBuzzValue'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じで値である</span></span><br><span class="line">      value1 = FizzBuzzValue.new(<span class="number">1</span>, <span class="string">'1'</span>)</span><br><span class="line">      value2 = FizzBuzzValue.new(<span class="number">1</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">      assert value1.eql?(value2)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_to_string</span>メソッド</span></span><br><span class="line">      value = FizzBuzzValue.new(<span class="number">3</span>, <span class="string">'Fizz'</span>)</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'3:Fizz'</span>, value.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'FizzBuzzValueList'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しいインスタンスが作られる</span></span><br><span class="line">      command = FizzBuzzListCommand.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">      array = command.execute(<span class="number">100</span>)</span><br><span class="line">      list1 = FizzBuzzList.new(array)</span><br><span class="line">      list2 = list1.add(array)</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="number">100</span>, list1.value.count</span><br><span class="line">      assert_equal <span class="number">200</span>, list2.value.count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">01:35:22 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 50 / 56 LOC (89.29%) covered.</span><br><span class="line">Started with run options --guard --seed 10411</span><br><span class="line"></span><br><span class="line">  35/35: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00704s</span><br><span class="line">35 tests, 39 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>不要なコードを残しておくとメンテナンスの時に削除していいのかわからなくなり可読性を落とし原因となります。削除できる時に削除しておきましょう。後で必要になったとしてもバージョン管理システムを使えば問題ありません。ということでコミットします。</p><blockquote><p>デッドコードの削除</p><p>コードが使用されなくなったら削除すべきです。そのコードが将来必要になるかもしれないなどという心配はしません。必要になったらいつでも、バージョン管理システムから再び掘り起こせるからです。</p><p>（中略）</p><p>デッドコードのコメントアウトは、かつては一般的な習慣でした。それは、バージョン管理システムが広く使用される以前の時代や、使いづらかった時代には有用でした。現在では、とても小さなコードベースでもバージョン管理システムに置けるため、もはや必要のない習慣です。</p><p>— リファクタリング(第 2 版)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: デッドコードの削除'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/9a745e4a-4f98-9723-1b94-e116805604fd.png" alt="diag-55cb49d0a54190528d027b3768e4aa29.png"></p><h4 id="デザインパターン"><a href="#デザインパターン" class="headerlink" title="デザインパターン"></a>デザインパターン</h4><p><strong>メソッドオブジェクトによるメソッドの置き換え</strong> リファクタリングの結果として <strong>Command パターン</strong> という <strong>デザインパターン</strong> を適用しました。実はこれまでにも <strong>オブジェクトによるプリミティブの置き換え</strong> では <strong>Value Object パターン</strong> を <strong>ポリモーフィズムによる条件記述の置き換え</strong> では <strong>Factory Method パターン</strong> をそして、 <strong>委譲の隠蔽</strong> の実施による <strong>State/Strategy によるタイプコードの置き換え</strong> では <strong>Strategy パターン</strong> を適用しています。</p><p><a href="https://ja.wikipedia.org/wiki/Command_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" target="_blank" rel="noopener">Command パターン</a></p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/742f33e5-d884-2a28-104a-6d311bccd060.png" alt="diag-3f9e53f62bd2f1b3bfe0f476521170ca.png"></p><blockquote><p>Value Object パターン</p><p>広く共有されるものの、同一インスタンスであることはさほど重要でないオブジェクトを設計するにはどうしたらよいだろうか—-オブジェクト作成時に状態を設定したら、その後決して変えないようにする。オブジェクトへの操作は必ず新しいオブジェクトを返すようにしよう。</p><p>— テスト駆動開発</p></blockquote><blockquote><p>Factory Method パターン</p><p>オブジェクト作成に柔軟性をもたせたいときは、どうすればよいだろうか—単にコンストラクタで作るのではなく、メソッドを使ってオブジェクトを作成しよう。</p><p>— テスト駆動開発</p></blockquote><p><a href="https://ja.wikipedia.org/wiki/Strategy_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" target="_blank" rel="noopener">Strategy パターン</a></p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/b4fad4c5-8268-6ed7-0338-7a6ff98ea6ce.png" alt="diag-4969f773bcc5408d3afec24f14c006d3.png"></p><p>作成したコードはパターンと完全に一致しているわけではありませんし、Ruby のような動的言語ではもっと簡単な実現方法もありますがここでは先人の考えた設計パターンというものがありオブジェクト指向設計の <a href="https://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%87%E3%82%A3%E3%82%AA%E3%83%A0" target="_blank" rel="noopener">イデオム</a> として使えること。そしてテスト駆動開発では一般的な設計アプローチとは異なる形で導かれているということくらいを頭に残しておけば結構です。どのパターンをいつ適用するかはリファクタリングを繰り返しているうちに思いつくようになってきます（多分）。</p><blockquote><p>ただ、書籍『デザインパターン』（通称 Gof 本）の  大ヒットは、その反面、それらパターンを表現する方法の多様性を奪ってしまった。Gof 本には、設計をフェーズとして扱うという暗黙の前提があるように見受けられる。つまり、リファクタリングを設計行為として捉えていない。TDD における設計は、デザインパターンを少しだけ違う側面から捉えなければならない。</p><p>— テスト駆動開発</p></blockquote><p>あと、設計の観点から今回 <strong>単一責任の原則</strong> に従って <code>FizzBuzz</code> クラスを <strong>メソッドオブジェクト</strong> に分割して削除しました。</p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/eeb0db27-d842-1058-09b1-e35244464cf1.png" alt="diag-51044325ad9691ebfe6e60879f6c95e7.png"></p><p>もし、新しい処理を追加する必要が発生した場合はどうしましょうか？ <code>FizzBuzzCommand</code> インターフェイスを実装した <strong>メソッドオブジェクト</strong> を追加しましょう。</p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/da6aaae2-b8fb-a5ed-4441-289d52f0ec51.png" alt="diag-ea3196c5b1015bd1c10121bc92095fcb.png"></p><p>もし、新しいタイプが必要になったらどうしましょうか？ <code>FizzBuzzType</code> クラスを継承した新しいタイプクラスを追加しましょう。</p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/ab873b26-19f9-2f3a-b7d0-54c14842c341.png" alt="diag-479f7874fa6e2b242ebd5a2f54730e37.png"></p><p>このように既存のコードを変更することなく振る舞いを変更できるので <strong>オープン・クローズドの原則</strong> を満たした設計といえます。</p><blockquote><p>OCP:オープン・クローズドの原則</p><p>「オープン・クローズドの原則（OCP）」は、1988 年に Bertrand Maeer が提唱した以下のような原則だ。</p><pre><code>ソフトウェアの構成要素は拡張に対しては開いていて、修正に対しては閉じていなければならない。　　　　　　　　　　　　『アジャイルソフトウェア開発の奥義　第2版』（SBクリエイティブ）より引用</code></pre><p>言い換えれば、ソフトウェアの振る舞いは、既存の成果物を変更せず拡張できるようにすべきである、ということだ。</p><p>— Clean Architecture 達人に学ぶソフトウェアの構造と設計</p></blockquote><h3 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h3><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/9a745e4a-4f98-9723-1b94-e116805604fd.png" alt="diag-55cb49d0a54190528d027b3768e4aa29.png"></p><p>ここまでは、正常系をリファクタリングして設計を改善してきました。しかし、アプリケーションは例外系も考慮する必要があります。続いて、<strong>アサーションの導入</strong> を適用した例外系のリファクタリングに取り組むとしましょう。</p><blockquote><p>アサーションの導入</p><p>前提を明示するためのすぐれたテクニックとして、アサーションを記述する方法があります。</p><p>— リファクタリング(第 2 版)</p></blockquote><h4 id="アサーションの導入"><a href="#アサーションの導入" class="headerlink" title="アサーションの導入"></a>アサーションの導入</h4><p>まず、 <strong>メソッドオブジェクト</strong> の <code>FizzBuzzValueCommand</code> にマイナスの値が渡された場合の振る舞いをどうするか考えます。ここでは正の値のみ許可する振る舞いにしたいので以下のテストコードを追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">...</span><br><span class="line">  describe <span class="string">'例外ケース'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>値は正の値のみ許可する</span></span><br><span class="line">      assert_raises Assertions::AssertionFailedError <span class="keyword">do</span></span><br><span class="line">        FizzBuzzValueCommand.new(</span><br><span class="line">          FizzBuzzType.create(FizzBuzzType::TYPE_01)</span><br><span class="line">        ).execute(-<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ERROR[<span class="string">"test_値は正の値のみ許可する"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fadf30c45d8 @name="例外ケース"&gt;, 0.006546000000525964]</span></span><br><span class="line"> test_値は正の値のみ許可する<span class="comment">#例外ケース (0.01s)</span></span><br><span class="line">Minitest::UnexpectedError:         NameError: uninitialized constant FizzBuzzTest::Assertions</span><br><span class="line">            /Users/k2works/Projects/sandbox/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:249:<span class="keyword">in</span> `test_値は正の値のみ許可する<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  36/36: [=========================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.03159s</span></span><br><span class="line"><span class="string">36 tests, 39 assertions, 0 failures, 1 errors, 0 skips</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>テストを通すためアサーションモジュールを追加します。Ruby では <strong>モジュール</strong> を使います。</p><blockquote><p>モジュールはクラスと非常によく似ていますが、以下の二点が異なります。</p><ul><li><p>モジュールはインスタンス化できない</p></li><li><p>本章後半可能なのは include や extend が可能なのはモジュールだけ</p></li></ul><p>それ以外のクラスメソッドや定数の定義などはクラスと同じように定義することができます。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Assertions</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AssertionFailedError</span> &lt; StandardError;</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">assert</span><span class="params">(&amp;condition)</span></span></span><br><span class="line">    raise AssertionFailedError, <span class="string">'Assertion Failed'</span> <span class="keyword">unless</span> condition.call</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValue</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>アサーションモジュールを追加してエラーはなくなりましたがテストは失敗したままです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> FAIL[<span class="string">"test_値は正の値のみ許可する"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fdcfc0c2548 @name="例外ケース"&gt;, 0.005800000000817818]</span></span><br><span class="line"> test_値は正の値のみ許可する<span class="comment">#例外ケース (0.01s)</span></span><br><span class="line">        Assertions::AssertionFailedError expected but nothing was raised.</span><br><span class="line">        /Users/k2works/Projects/sandbox/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:249:<span class="keyword">in</span> `test_値は正の値のみ許可する<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">============================================================================================================|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00621s</span></span><br><span class="line"><span class="string">36 tests, 40 assertions, 1 failures, 0 errors, 0 skips</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>追加したモジュールを <code>FizzBuzzValue</code> クラスをに <strong>Mix-in</strong> します。そして、<strong>コンストラクタ</strong> 実行時に数値は 0 以上であるアサーションを追加します。</p><blockquote><p>Ruby での継承は一種類、単一継承しか実行できませんが、複数のクラスを継承する多重継承の代わりに Mix-in というメソッドの共有方法を提供します。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValue</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:number</span>, <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(number, value)</span></span></span><br><span class="line">    @number = number</span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValue</span></span></span><br><span class="line">  <span class="keyword">include</span> Assertions</span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:number</span>, <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(number, value)</span></span></span><br><span class="line">    assert &#123; number &gt;= <span class="number">0</span> &#125;</span><br><span class="line">    @number = number</span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Started with run options --seed 37354</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Progress: |====================================================================================================|</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01433s</span><br><span class="line">36 tests, 40 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>アサーションが機能するようになりました、コミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: アサーションの導入'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/bbe4d4ea-87a5-ff7d-c7b5-07867aabff16.png" alt="diag-31809a5e0bf909bd8ffd6bf80e82857a.png"></p><p>次は、<strong>メソッドオブジェクト</strong> の <code>FizzBuzzListCommand</code> の実行時に 100 件以上指定された場合の振る舞いをどうするか考えます。ここでは 100 までを許可する振る舞いにします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'例外ケース'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>値は正の値のみ許可する</span></span><br><span class="line">      assert_raises Assertions::AssertionFailedError <span class="keyword">do</span></span><br><span class="line">        FizzBuzzValueCommand.new(</span><br><span class="line">          FizzBuzzType.create(FizzBuzzType::TYPE_01)</span><br><span class="line">        ).execute(-<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_100</span>より多い数を許可しない</span></span><br><span class="line">      assert_raises Assertions::AssertionFailedError <span class="keyword">do</span></span><br><span class="line">        FizzBuzzListCommand.new(</span><br><span class="line">          FizzBuzzType.create(FizzBuzzType::TYPE_01)</span><br><span class="line">        ).execute(<span class="number">101</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>FizzBuzzList</code> にアサーションモジュールを <strong>Mix-in</strong> します。<strong>コンストラクタ</strong> 実行時に配列のサイズは 100 までというアサーションを追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzList</span></span></span><br><span class="line">  <span class="keyword">include</span> Assertions</span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(list)</span></span></span><br><span class="line">    assert &#123; list.count &lt;= <span class="number">100</span> &#125;</span><br><span class="line">    @value = list</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ERROR[<span class="string">"test_新しいインスタンスが作られる"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005558ca6e8e80 @name="FizzBuzzValueList"&gt;, 0.010412617004476488]</span></span><br><span class="line"> test_新しいインスタンスが作られる<span class="comment">#FizzBuzzValueList (0.01s)</span></span><br><span class="line">Minitest::UnexpectedError:         Assertions::AssertionFailedError: Assertion Failed</span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:58:<span class="keyword">in</span> `assert<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/lib/fizz_buzz.rb:88:in `initialize'</span></span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:97:<span class="keyword">in</span> `new<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/lib/fizz_buzz.rb:97:in `add'</span></span><br><span class="line">            /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:259:<span class="keyword">in</span> `test_新しいインスタンスが作られる<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">====================================================================================================|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.01238s</span></span><br><span class="line"><span class="string">36 tests, 38 assertions, 0 failures, 1 errors, 0 skips</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>追加したテストはパスするようになりましたが既存のテストコードでエラーが出るようになりました。該当するテストコードを見たところ 100 件より多い <strong>学習用テスト</strong> で <strong>ファーストクラスコレクション</strong> を作ろうとしたため <code>AssertionFailedError</code> を発生させたようです。テストコードを修正しておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'FizzBuzzValueList'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しいインスタンスが作られる</span></span><br><span class="line">      command = FizzBuzzListCommand.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">      array = command.execute(<span class="number">100</span>)</span><br><span class="line">      list1 = FizzBuzzList.new(array)</span><br><span class="line">      list2 = list1.add(array)</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="number">100</span>, list1.value.count</span><br><span class="line">      assert_equal <span class="number">200</span>, list2.value.count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>最初は 50 件作るように変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'FizzBuzzValueList'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しいインスタンスが作られる</span></span><br><span class="line">      command = FizzBuzzListCommand.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">      array = command.execute(<span class="number">50</span>)</span><br><span class="line">      list1 = FizzBuzzList.new(array)</span><br><span class="line">      list2 = list1.add(array)</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="number">100</span>, list1.value.count</span><br><span class="line">      assert_equal <span class="number">200</span>, list2.value.count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>アサーションエラーはなくなりましたが期待した値と違うと指摘されています。テストコードのアサーションを修正します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> FAIL[<span class="string">"test_新しいインスタンスが作られる"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x0000556b5137c780 @name="FizzBuzzValueList"&gt;, 0.003735148988198489]</span></span><br><span class="line"> test_新しいインスタンスが作られる<span class="comment">#FizzBuzzValueList (0.00s)</span></span><br><span class="line">        Expected: 100</span><br><span class="line">          Actual: 50</span><br><span class="line">        /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:261:<span class="keyword">in</span> `test_新しいインスタンスが作られる<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  36/36: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00837s</span></span><br><span class="line"><span class="string">36 tests, 39 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'FizzBuzzValueList'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しいインスタンスが作られる</span></span><br><span class="line">      command = FizzBuzzListCommand.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">      array = command.execute(<span class="number">50</span>)</span><br><span class="line">      list1 = FizzBuzzList.new(array)</span><br><span class="line">      list2 = list1.add(array)</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="number">50</span>, list1.value.count</span><br><span class="line">      assert_equal <span class="number">200</span>, list2.value.count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>２つ目のアサーションに引っかかってしまいました。こちらも修正します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> FAIL[<span class="string">"test_新しいインスタンスが作られる"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x0000563a0c4fc2b0 @name="FizzBuzzValueList"&gt;, 0.005684088013367727]</span></span><br><span class="line"> test_新しいインスタンスが作られる<span class="comment">#FizzBuzzValueList (0.01s)</span></span><br><span class="line">        Expected: 200</span><br><span class="line">          Actual: 100</span><br><span class="line">        /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:262:<span class="keyword">in</span> `test_新しいインスタンスが作られる<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  36/36: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00809s</span></span><br><span class="line"><span class="string">36 tests, 40 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'FizzBuzzValueList'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しいインスタンスが作られる</span></span><br><span class="line">      command = FizzBuzzListCommand.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">      array = command.execute(<span class="number">50</span>)</span><br><span class="line">      list1 = FizzBuzzList.new(array)</span><br><span class="line">      list2 = list1.add(array)</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="number">50</span>, list1.value.count</span><br><span class="line">      assert_equal <span class="number">100</span>, list2.value.count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">01:58:57 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 61 / 64 LOC (95.31%) covered.</span><br><span class="line">Started with run options --guard --seed 44956</span><br><span class="line"></span><br><span class="line">  36/36: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00717s</span><br><span class="line">36 tests, 40 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>仕様変更による反映  が出来たのでコミットしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: アサーションの導入'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/29ff3f05-d607-1549-19e8-dd10cd9d845a.png" alt="diag-6390574a6b0b9b04721636e71b66aea3.png"></p><p><strong>アサーションの導入</strong> とは別のアプローチとして <strong>例外</strong> を返す方法もあります。 <strong>例外によるエラーコードの置き換え</strong> を適用してアサーションモジュールを削除しましょう。</p><blockquote><p>例外によるエラーコードの置き換え</p><p>エラーを示す特別なコードをメソッドがリターンしている。</p><p>代わりに例外を発生させる。</p><p>— 新装版 リファクタリング</p></blockquote><h4 id="例外によるエラーコードの置き換え"><a href="#例外によるエラーコードの置き換え" class="headerlink" title="例外によるエラーコードの置き換え"></a>例外によるエラーコードの置き換え</h4><p>アサーションモジュールを削除してアサーション部分を <strong>例外</strong> に変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Assertions</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AssertionFailedError</span> &lt; StandardError;</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">assert</span><span class="params">(&amp;condition)</span></span></span><br><span class="line">    raise AssertionFailedError, <span class="string">'Assertion Failed'</span> <span class="keyword">unless</span> condition.call</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValue</span></span></span><br><span class="line">  <span class="keyword">include</span> Assertions</span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:number</span>, <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(number, value)</span></span></span><br><span class="line">    assert &#123; number &gt;= <span class="number">0</span> &#125;</span><br><span class="line">    @number = number</span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzList</span></span></span><br><span class="line">  <span class="keyword">include</span> Assertions</span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(list)</span></span></span><br><span class="line">    assert &#123; list.count &lt;= <span class="number">100</span> &#125;</span><br><span class="line">    @value = list</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValue</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:number</span>, <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(number, value)</span></span></span><br><span class="line">    raise <span class="string">'正の値のみ有効です'</span> <span class="keyword">if</span> number &lt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    @number = number</span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzList</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(list)</span></span></span><br><span class="line">    raise <span class="string">'上限は100件までです'</span> <span class="keyword">if</span> list.count &gt; <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    @value = list</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ERROR[<span class="string">"test_値は正の値のみ許可する"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x000055d30f0b8a50 @name="FizzBuzz::数を文字列にして返す::例外ケース"&gt;, 0.004186890990240499]</span></span><br><span class="line"> test_値は正の値のみ許可する<span class="comment">#FizzBuzz::数を文字列にして返す::例外ケース (0.00s)</span></span><br><span class="line">Minitest::UnexpectedError:         NameError: uninitialized constant FizzBuzzTest::Assertions</span><br><span class="line">            /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:143:<span class="keyword">in</span> `test_値は正の値のみ許可する<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ERROR["test_100より多い数を許可しない", #&lt;Minitest::Reporters::Suite:0x000055d30f114210 @name="FizzBuzz::数を文字列にして返す::例外ケース"&gt;, 0.008254560001660138]</span></span><br><span class="line"><span class="string"> test_100より多い数を許可しない#FizzBuzz::数を文字列にして返す::例外ケース (0.01s)</span></span><br><span class="line"><span class="string">Minitest::UnexpectedError:         NameError: uninitialized constant FizzBuzzTest::Assertions</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:151:in `test_100より多い数を許可しない'</span></span><br><span class="line"></span><br><span class="line">  37/37: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01731s</span><br><span class="line">37 tests, 39 assertions, 0 failures, 2 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>アサーションモジュールを削除したのでエラーが発生しています。テストコードを修正しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'例外ケース'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>値は正の値のみ許可する</span></span><br><span class="line">      assert_raises Assertions::AssertionFailedError <span class="keyword">do</span></span><br><span class="line">        FizzBuzzValueCommand.new(</span><br><span class="line">          FizzBuzzType.create(FizzBuzzType::TYPE_01)</span><br><span class="line">        ).execute(-<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_100</span>より多い数を許可しない</span></span><br><span class="line">      assert_raises Assertions::AssertionFailedError <span class="keyword">do</span></span><br><span class="line">        FizzBuzzListCommand.new(</span><br><span class="line">          FizzBuzzType.create(FizzBuzzType::TYPE_01)</span><br><span class="line">        ).execute(<span class="number">101</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  describe <span class="string">'例外ケース'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>値は正の値のみ許可する</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        FizzBuzzValueCommand.new(</span><br><span class="line">          FizzBuzzType.create(FizzBuzzType::TYPE_01)</span><br><span class="line">        ).execute(-<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'正の値のみ有効です'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_100</span>より多い数を許可しない</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        FizzBuzzListCommand.new(</span><br><span class="line">          FizzBuzzType.create(FizzBuzzType::TYPE_01)</span><br><span class="line">        ).execute(<span class="number">101</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'上限は100件までです'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">02:13:46 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 55 / 58 LOC (94.83%) covered.</span><br><span class="line">Started with run options --guard --seed 55179</span><br><span class="line"></span><br><span class="line">  37/37: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00738s</span><br><span class="line">37 tests, 43 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>再びテストが通るようになったのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor:  例外によるエラーコードの置き換え'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/946fb41e-b83f-cae4-78d3-effdff059f93.png" alt="diag-cd1dbf997043a35c9bb55b407c0a2af9.png"></p><h4 id="アルゴリズムの置き換え"><a href="#アルゴリズムの置き換え" class="headerlink" title="アルゴリズムの置き換え"></a>アルゴリズムの置き換え</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">02:13:46 - INFO - Inspecting Ruby code style: <span class="built_in">test</span>/fizz_buzz_test.rb lib/fizz_buzz.rb</span><br><span class="line">lib/fizz_buzz.rb:58:26: C: Style/NumericPredicate: Use number.negative? instead of number &lt; 0.</span><br><span class="line">    raise <span class="string">'正の値のみ有効です'</span> <span class="keyword">if</span> number &lt; 0</span><br><span class="line">                         ^^^^^^^^^^</span><br><span class="line"> 2/2 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">2 files inspected, 1 offense detected</span><br></pre></td></tr></table></figure><p>テストは通りますが警告が表示されるようになりました。 <code>Style/NumericPredicate: Use number.negative? instead of number &lt; 0.</code> とのことなので <strong>アルゴリズムの置き換え</strong> を適用しておきましょう。</p><blockquote><p>アルゴリズムの取り替え</p><p>アルゴリズムをよりわかりやすいものに置き換えたい</p><p>メソッドの本体を新たなアルゴリズムで置き換える。</p><p>— 新装版 リファクタリング</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValue</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:number</span>, <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(number, value)</span></span></span><br><span class="line">    raise <span class="string">'正の値のみ有効です'</span> <span class="keyword">if</span> number &lt; <span class="number">0</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValue</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:number</span>, <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(number, value)</span></span></span><br><span class="line">    raise <span class="string">'正の値のみ有効です'</span> <span class="keyword">if</span> number.negative?</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">02:18:31 - INFO - Inspecting Ruby code style: lib/fizz_buzz.rb</span><br><span class="line"> 1/1 file |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">1 file inspected, no offenses detected</span><br></pre></td></tr></table></figure><p>警告が消えたのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: アルゴリズムの置き換え'</span></span><br></pre></td></tr></table></figure><h4 id="マジックナンバーの置き換え-1"><a href="#マジックナンバーの置き換え-1" class="headerlink" title="マジックナンバーの置き換え"></a>マジックナンバーの置き換え</h4><p>件数に <strong>リテラル</strong> を使っています。ここは <strong>マジックナンバーの置き換え</strong> を適用するべきですね。</p><blockquote><p>シンボリック定数によるマジックナンバーの置き換え</p><p>特別な意味を持った数字のリテラルがある。</p><p>定数を作り、それにふさわしい名前をつけて、そのリテラルを置き換える。</p><p>— 新装版 リファクタリング</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzList</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(list)</span></span></span><br><span class="line">    raise <span class="string">'上限は100件までです'</span> <span class="keyword">if</span> list.count &gt; <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    @value = list</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>式展開</strong> を使ってメッセージ内容も定数から参照するようにしましょう。</p><blockquote><p>式展開</p><p>式展開とは、「#{}」の書式で文字列中に何らかの変数や式を埋め込むことが可能な機能です。これは、ダブルクオートを使用した場合のみの機能です。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzList</span></span></span><br><span class="line">  MAX_COUNT = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(list)</span></span></span><br><span class="line">    raise <span class="string">"上限は<span class="subst">#&#123;MAX_COUNT&#125;</span>件までです"</span> <span class="keyword">if</span> list.count &gt; MAX_COUNT</span><br><span class="line"></span><br><span class="line">    @value = list</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストは壊れていないようですが <code>MAX_COUNT</code> を変更したらテストが失敗するか確認しておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzList</span></span></span><br><span class="line">  MAX_COUNT = <span class="number">10</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ERROR[<span class="string">"test_配列の14番目は文字列のFizzBuzzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x000055942ab5e230 @name="FizzBuzz::数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す"&gt;, 0.008073228993453085]</span></span><br><span class="line"> test_配列の14番目は文字列のFizzBuzzを返す<span class="comment">#FizzBuzz::数を文字列にして返す::タイプ1の場合::1から100までのFizzBuzzの配列を返す (0.01s)</span></span><br><span class="line">Minitest::UnexpectedError:         RuntimeError: 上限は10件までです</span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:80:<span class="keyword">in</span> `initialize<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/lib/fizz_buzz.rb:112:in `new'</span></span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:112:<span class="keyword">in</span> `execute<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:45:in `setup'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>想定通りのエラーが発生したのでコードを元に戻してコミットしましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzList</span></span></span><br><span class="line">  MAX_COUNT = <span class="number">100</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Started with run options --seed 5525</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Progress: |====================================================================================================|</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01262s</span><br><span class="line">37 tests, 43 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: マジックナンバーの置き換え'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/946fb41e-b83f-cae4-78d3-effdff059f93.png" alt="diag-cd1dbf997043a35c9bb55b407c0a2af9.png"></p><h4 id="特殊ケースの導入"><a href="#特殊ケースの導入" class="headerlink" title="特殊ケースの導入"></a>特殊ケースの導入</h4><p>最後に <strong>ポリモーフィズム</strong> の応用としてタイプクラスが未定義の場合に <strong>例外</strong> ではなく未定義のタイプクラスを返す <strong>特殊ケースの導入</strong> を適用してみましょう。</p><blockquote><p>ヌルオブジェクトの導入</p><p>null 値のチェックが繰り返し現れる。</p><p>その null 値をヌルオブジェクトで置き換える。</p><p>— 新装版 リファクタリング</p></blockquote><blockquote><p>特殊ケースの導入</p><p>旧：ヌルオブジェクトの導入</p><p>特殊ケースの処理を要する典型的な値が null なので、このパターンをヌルオブジェクトパターンと呼ぶことがあります、しかし、通常の特殊ケースとアプローチは同じです。いわばヌルオブジェクトは「特殊ケース」の特殊ケースです。</p><p>— リファクタリング(第 2 版)</p></blockquote><p>まず、それ以外のタイプの場合の振る舞いを変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>例外を返す</span></span><br><span class="line">        e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">          FizzBuzzType.create(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'該当するタイプは存在しません'</span>, e.message</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">   describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>未定義のタイプを返す</span></span><br><span class="line">        fizzbuzz = FizzBuzzType.create(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'未定義'</span>, fizzbuzz.to_s</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ERROR[<span class="string">"test_未定義のタイプを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005593e21297d0 @name="数を文字列にして返す::それ以外のタイプの場合"&gt;, 0.0065623498521745205]</span></span><br><span class="line"> test_未定義のタイプを返す<span class="comment">#数を文字列にして返す::それ以外のタイプの場合 (0.01s)</span></span><br><span class="line">Minitest::UnexpectedError:         RuntimeError: 該当するタイプは存在しません</span><br><span class="line">            /workspace/tdd_rb/lib/fizz_buzz.rb:17:<span class="keyword">in</span> `create<span class="string">'</span></span><br><span class="line"><span class="string">            /workspace/tdd_rb/test/fizz_buzz_test.rb:131:in `test_未定義のタイプを返す'</span></span><br><span class="line"></span><br><span class="line">  37/37: [==================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00780s</span><br><span class="line">37 tests, 41 assertions, 0 failures, 1 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>現時点では <strong>例外</strong> を投げるので未定義タイプ <code>FizzBuzzTypeNotDefined</code> を作成して <strong>ファクトリメソッド</strong> を変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">  TYPE_01 = <span class="number">1</span></span><br><span class="line">  TYPE_02 = <span class="number">2</span></span><br><span class="line">  TYPE_03 = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create</span><span class="params">(type)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_01</span><br><span class="line">      FizzBuzzType01.new</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_02</span><br><span class="line">      FizzBuzzType02.new</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_03</span><br><span class="line">      FizzBuzzType03.new</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      raise <span class="string">'該当するタイプは存在しません'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fizz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buzz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span> &lt; FizzBuzzType</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">  TYPE_01 = <span class="number">1</span></span><br><span class="line">  TYPE_02 = <span class="number">2</span></span><br><span class="line">  TYPE_03 = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create</span><span class="params">(type)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_01</span><br><span class="line">      FizzBuzzType01.new</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_02</span><br><span class="line">      FizzBuzzType02.new</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_03</span><br><span class="line">      FizzBuzzType03.new</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      FizzBuzzTypeNotDefined.new</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTypeNotDefined</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    FizzBuzzValue.new(number, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    <span class="string">'未定義'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValue</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Started with run options --seed 33939</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Progress: |=====================================================================================================|</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01193s</span><br><span class="line">37 tests, 42 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">06:46:48 - INFO - Inspecting Ruby code style: lib/fizz_buzz.rb</span><br><span class="line"> 1/1 file |======================================= 100 ========================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">1 file inspected, no offenses detected</span><br><span class="line">06:46:49 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/border.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/loading_background.png</span><br><span class="line"> 0/0 files |======================================= 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">0 files inspected, no offenses detected</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストが通るようになりました。 <strong>メソッドオブジェクト</strong> から実行された場合の振る舞いも明記しておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>未定義のタイプを返す</span></span><br><span class="line">        fizzbuzz = FizzBuzzType.create(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'未定義'</span>, fizzbuzz.to_s</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>空の文字列を返す</span></span><br><span class="line">        type = FizzBuzzType.create(<span class="number">4</span>)</span><br><span class="line">        command = FizzBuzzValueCommand.new(type)</span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">''</span>, command.execute(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">06:48:54 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 62 / 65 LOC (95.38%) covered.</span><br><span class="line">Started with run options --guard --seed 18202</span><br><span class="line"></span><br><span class="line">  38/38: [==================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00747s</span><br><span class="line">38 tests, 43 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>FizzBuzzTypeNotDefined</code> オブジェクトは <strong>Null Object パターン</strong> を適用したものです。</p><blockquote><p>Null Object パターン</p><p>特殊な状況をオブジェクトで表現するにはどうすればよいだろうか—その特殊な状況を表現するオブジェクトを作り、通常のオブジェクトと同じプロトコル（メソッド群）を実装しよう。</p><p>— テスト駆動開発</p></blockquote><p><strong>オープン・クローズドの原則</strong> に従って未定義のタイプである <strong>Null Object</strong> を安全に追加することができたのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: 特殊ケースの導入'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/ca6f3d49-ca33-7e5a-5d72-7dd715f0eb12.png" alt="diag-88e1d9090efb8e346a8986204d1decac.png"></p><h3 id="モジュール分割"><a href="#モジュール分割" class="headerlink" title="モジュール分割"></a>モジュール分割</h3><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/ca6f3d49-ca33-7e5a-5d72-7dd715f0eb12.png" alt="diag-88e1d9090efb8e346a8986204d1decac.png"></p><p>クラスモジュールの抽出によってアプリケーションの構造が <strong>抽象化</strong> された結果、視覚的に把握できるようになりました。ここでアプリケーションを実行してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">main.rb:5:<span class="keyword">in</span> `&lt;main&gt;<span class="string">': uninitialized constant FizzBuzz (NameError)</span></span><br><span class="line"><span class="string">Did you mean?  FizzBuzzType</span></span><br></pre></td></tr></table></figure><p>エラーが出ています、これはアプリケーションの構成が変わったためです。クライアントプログラムをアプリケーションの変更に合わせて修正します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz.rb'</span></span><br><span class="line"></span><br><span class="line">puts FizzBuzz.generate_list</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line">require <span class="string">'./lib/fizz_buzz.rb'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span> = FizzBuzzListCommand.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">command.execute(100).each &#123; |i| puts i.value &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">Fizz</span><br><span class="line">4</span><br><span class="line">Buzz</span><br><span class="line">...</span><br><span class="line">Fizz</span><br></pre></td></tr></table></figure><p>クライアントプログラムが直ったのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'fix: プリントする'</span></span><br></pre></td></tr></table></figure><h4 id="ドメインモデル"><a href="#ドメインモデル" class="headerlink" title="ドメインモデル"></a>ドメインモデル</h4><p><code>fizz_buzz.rb</code> ファイル内のクラスモジュールをファイルとして分割していきます。まずは <strong>ドメインオブジェクト</strong> を抽出して <strong>ドメインモデル</strong> として整理しましょう。既存のテストを壊さないように１つづつコピー&amp;ペーストしていきます。</p><blockquote><p>関連する業務データと業務ロジックを１つにまとめたこのようなオブジェクトをドメインオブジェクトと呼びます。</p><p>「ドメイン」とは、対象領域とか問題領域という意味です。業務アプリケーションの場合、そのアプリケーションが対象となる業務活動全体がドメインです。業務活動という問題領域（ドメイン）で扱うデータと業務ロジックを、オブジェクトとして表現したものドメインオブジェクトです。ドメインオブジェクトは、業務データと業務ロジックを密接に関係づけます。</p><p>— 現場で役立つシステム設計の原則</p></blockquote><blockquote><p>このように業務アプリケーションの対象領域（ドメイン）をオブジェクトのモデルとして整理したものをドメインモデルと呼びます。</p><p>— 現場で役立つシステム設計の原則</p></blockquote><pre><code>/main.rb  |--lib/      |       -- fizz_buzz.rb  |--test/      |       -- fizz_buzz_test.rb/main.rb  |--lib/      |      domain/           |           model/               |               -- fizz_buzz_value.rb               -- fizz_buzz_list.rb           type/               |               -- fizz_buzz_type.rb               -- fizz_buzz_type_01.rb               -- fizz_buzz_type_02.rb               -- fizz_buzz_type_03.rb               -- fizz_buzz_type_not_defined.rb       -- fizz_buzz.rb  |--test/      |       -- fizz_buzz_test.rb</code></pre><p><strong>値オブジェクトクラス</strong> と <strong>タイプクラス</strong> を <code>domain</code> フォルダ以下に配置します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValue</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:number</span>, <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(number, value)</span></span></span><br><span class="line">    raise <span class="string">'正の値のみ有効です'</span> <span class="keyword">if</span> number.negative?</span><br><span class="line"></span><br><span class="line">    @number = number</span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    <span class="string">"<span class="subst">#&#123;@number&#125;</span>:<span class="subst">#&#123;@value&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">==</span><span class="params">(other)</span></span></span><br><span class="line">    @number == other.number &amp;&amp; @value == other.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">alias</span> eql? ==</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzList</span></span></span><br><span class="line">  MAX_COUNT = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(list)</span></span></span><br><span class="line">    raise <span class="string">"上限は<span class="subst">#&#123;MAX_COUNT&#125;</span>件までです"</span> <span class="keyword">if</span> list.count &gt; MAX_COUNT</span><br><span class="line"></span><br><span class="line">    @value = list</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    @value.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(value)</span></span></span><br><span class="line">    FizzBuzzList.new(@value + value)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">  TYPE_01 = <span class="number">1</span></span><br><span class="line">  TYPE_02 = <span class="number">2</span></span><br><span class="line">  TYPE_03 = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create</span><span class="params">(type)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_01</span><br><span class="line">      FizzBuzzType01.new</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_02</span><br><span class="line">      FizzBuzzType02.new</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_03</span><br><span class="line">      FizzBuzzType03.new</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      FizzBuzzTypeNotDefined.new</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fizz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buzz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'FizzBuzz'</span>) <span class="keyword">if</span> fizz?(number) &amp;&amp; buzz?(number)</span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'Fizz'</span>) <span class="keyword">if</span> fizz?(number)</span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'Buzz'</span>) <span class="keyword">if</span> buzz?(number)</span><br><span class="line"></span><br><span class="line">    FizzBuzzValue.new(number, number.to_s)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    FizzBuzzValue.new(number, number.to_s)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'FizzBuzz'</span>) <span class="keyword">if</span> fizz?(number) &amp;&amp; buzz?(number)</span><br><span class="line"></span><br><span class="line">    FizzBuzzValue.new(number, number.to_s)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTypeNotDefined</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    FizzBuzzValue.new(number, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    <span class="string">'未定義'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">07:29:03 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/border.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/loading_background.png lib/domain/<span class="built_in">type</span>/fizz_buzz_type_not_defined.rb lib/domain/<span class="built_in">type</span>/fizz_buzz_type_03.rb lib/domain/<span class="built_in">type</span>/fizz_buzz_type_02.rb lib/domain/<span class="built_in">type</span>/fizz_buzz_type_01.rb lib/domain/<span class="built_in">type</span>/fizz_buzz_type.rb lib/domain/model/fizz_buzz_list.rb lib/domain/model/fizz_buzz_value.rb</span><br><span class="line">lib/domain/<span class="built_in">type</span>/fizz_buzz_type_not_defined.rb:3:1: C: Style/Documentation: Missing top-level class documentation comment.</span><br><span class="line">class FizzBuzzTypeNotDefined &lt; FizzBuzzType</span><br><span class="line">^^^^^</span><br><span class="line">lib/domain/<span class="built_in">type</span>/fizz_buzz_type_03.rb:3:1: C: Style/Documentation: Missing top-level class documentation comment.</span><br><span class="line">class FizzBuzzType03 &lt; FizzBuzzType</span><br><span class="line">^^^^^</span><br><span class="line">lib/domain/<span class="built_in">type</span>/fizz_buzz_type_02.rb:3:1: C: Style/Documentation: Missing top-level class documentation comment.</span><br><span class="line">class FizzBuzzType02 &lt; FizzBuzzType</span><br><span class="line">^^^^^</span><br><span class="line">lib/domain/<span class="built_in">type</span>/fizz_buzz_type_01.rb:3:1: C: Style/Documentation: Missing top-level class documentation comment.</span><br><span class="line">class FizzBuzzType01 &lt; FizzBuzzType</span><br><span class="line">^^^^^</span><br><span class="line">lib/domain/<span class="built_in">type</span>/fizz_buzz_type.rb:3:1: C: Style/Documentation: Missing top-level class documentation comment.</span><br><span class="line">class FizzBuzzType</span><br><span class="line">^^^^^</span><br><span class="line">lib/domain/model/fizz_buzz_list.rb:3:1: C: Style/Documentation: Missing top-level class documentation comment.</span><br><span class="line">class FizzBuzzList</span><br><span class="line">^^^^^</span><br><span class="line">lib/domain/model/fizz_buzz_value.rb:3:1: C: Style/Documentation: Missing top-level class documentation comment.</span><br><span class="line">class FizzBuzzValue</span><br><span class="line">^^^^^</span><br><span class="line"> 7/7 files |======================== 100 =========================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, 7 offenses detected</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストは壊れていないようですが警告が出るようになりました。まだ仕掛ですが一旦コミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor(WIP): モジュール分割'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/3da7c995-b63a-7864-7091-a0f43d3c99b1.png" alt="diag-5f47ca3306a2dc4364311b77c4b5cea3.png"></p><h4 id="アプリケーション"><a href="#アプリケーション" class="headerlink" title="アプリケーション"></a>アプリケーション</h4><p>続いて <strong>アプリケーション層</strong> の分割を行います。</p><blockquote><p>データクラスと機能クラスを分ける手続き型の設計では、アプリケーション層のクラスに業務ロジックの詳細を記述します。</p><p>— 現場で役立つシステム設計の原則</p></blockquote><pre><code>/main.rb  |--lib/      |      domain/           |           model/               |               -- fizz_buzz_value.rb               -- fizz_buzz_list.rb           type/               |               -- fizz_buzz_type.rb               -- fizz_buzz_type_01.rb               -- fizz_buzz_type_02.rb               -- fizz_buzz_type_03.rb       -- fizz_buzz.rb  |--test/      |       -- fizz_buzz_test.rb/main.rb  |--lib/      |     application/           |           -- fizz_buzz_command.rb           -- fizz_buzz_value_command.rb           -- fizz_buzz_list_command.rb     domain/           |           model/               |               -- fizz_buzz_value.rb               -- fizz_buzz_list.rb           type/               |               -- fizz_buzz_type.rb               -- fizz_buzz_type_01.rb               -- fizz_buzz_type_02.rb               -- fizz_buzz_type_03.rb       -- fizz_buzz.rb  |--test/      |       -- fizz_buzz_test.rb</code></pre><p>ここでは <strong>ドメインオブジェクト</strong> を操作する <strong>メソッドオブジェクト</strong> を <code>application</code> フォルダ以下に配置します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzCommand</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">execute</span>;</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValueCommand</span> &lt; FizzBuzzCommand</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(number)</span></span></span><br><span class="line">    @type.generate(number).value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzListCommand</span> &lt; FizzBuzzCommand</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(number)</span></span></span><br><span class="line">    FizzBuzzList.new((<span class="number">1</span>..number).map &#123; <span class="params">|i|</span> @type.generate(i) &#125;).value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストは壊れていないのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor(WIP): モジュール分割'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/b4adb851-0e0d-a5eb-f490-cddd272822cc.png" alt="diag-84a49e2f281dfc169055d0bfc4b4aeb6.png"></p><h4 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h4><p>アプリケーションのメイン部分は分割できました。続いてテストも分割しましょう。</p><pre><code>/main.rb  |--lib/      |     application/           |           -- fizz_buzz_command.rb           -- fizz_buzz_value_command.rb           -- fizz_buzz_list_command.rb     domain/           |           model/               |               -- fizz_buzz_value.rb               -- fizz_buzz_list.rb           type/               |               -- fizz_buzz_type.rb               -- fizz_buzz_type_01.rb               -- fizz_buzz_type_02.rb               -- fizz_buzz_type_03.rb       -- fizz_buzz.rb  |--test/      |       -- fizz_buzz_test.rb/main.rb  |--lib/      |     application/           |           -- fizz_buzz_command.rb           -- fizz_buzz_value_command.rb           -- fizz_buzz_list_command.rb     domain/           |           model/               |               -- fizz_buzz_value.rb               -- fizz_buzz_list.rb           type/               |               -- fizz_buzz_type.rb               -- fizz_buzz_type_01.rb               -- fizz_buzz_type_02.rb               -- fizz_buzz_type_03.rb       -- fizz_buzz.rb  |--test/      |      application/           |           -- fizz_buzz_value_command_test.rb           -- fizz_buzz_list_command_test.rb      domain/           |           model/                 |                 -- fizz_buzz_value_test.rb                 -- fizz_buzz_list_test.rb      |       -- learning_test.rb</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValueCommandTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzzValueCommand.new(FizzBuzzType01.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Fizz'</span>, @fizzbuzz.execute(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @fizzbuzz.execute(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.execute(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.execute(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzzValueCommand.new(FizzBuzzType02.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.execute(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.execute(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列15を返す</span></span><br><span class="line">          assert_equal <span class="string">'15'</span>, @fizzbuzz.execute(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.execute(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzzValueCommand.new(FizzBuzzType03.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.execute(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.execute(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.execute(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.execute(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>未定義のタイプを返す</span></span><br><span class="line">        fizzbuzz = FizzBuzzType.create(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'未定義'</span>, fizzbuzz.to_s</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>空の文字列を返す</span></span><br><span class="line">        type = FizzBuzzType.create(<span class="number">4</span>)</span><br><span class="line">        command = FizzBuzzValueCommand.new(type)</span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">''</span>, command.execute(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'例外ケース'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>値は正の値のみ許可する</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        FizzBuzzValueCommand.new(</span><br><span class="line">          FizzBuzzType.create(FizzBuzzType::TYPE_01)</span><br><span class="line">        ).execute(-<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'正の値のみ有効です'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzListCommandTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzzListCommand.new(FizzBuzzType01.new)</span><br><span class="line">          @result = fizzbuzz.execute(<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @result.first.value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の最後は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @result.last.value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の2番目は文字列の<span class="title">Fizz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Fizz'</span>, @result[<span class="number">2</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の4番目は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @result[<span class="number">4</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の14番目は文字列の<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @result[<span class="number">14</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'例外ケース'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_100</span>より多い数を許可しない</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        FizzBuzzListCommand.new(</span><br><span class="line">          FizzBuzzType.create(FizzBuzzType::TYPE_01)</span><br><span class="line">        ).execute(<span class="number">101</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'上限は100件までです'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValueTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じで値である</span></span><br><span class="line">    value1 = FizzBuzzValue.new(<span class="number">1</span>, <span class="string">'1'</span>)</span><br><span class="line">    value2 = FizzBuzzValue.new(<span class="number">1</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">    assert value1.eql?(value2)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_to_string</span>メソッド</span></span><br><span class="line">    value = FizzBuzzValue.new(<span class="number">3</span>, <span class="string">'Fizz'</span>)</span><br><span class="line"></span><br><span class="line">    assert_equal <span class="string">'3:Fizz'</span>, value.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzListTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しいインスタンスが作られる</span></span><br><span class="line">    command = FizzBuzzListCommand.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">    array = command.execute(<span class="number">50</span>)</span><br><span class="line">    list1 = FizzBuzzList.new(array)</span><br><span class="line">    list2 = list1.add(array)</span><br><span class="line"></span><br><span class="line">    assert_equal <span class="number">50</span>, list1.value.count</span><br><span class="line">    assert_equal <span class="number">100</span>, list2.value.count</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LearningTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'配列や繰り返し処理を理解する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>繰り返し処理</span></span><br><span class="line">      $stdout = StringIO.new</span><br><span class="line">      [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].each &#123; <span class="params">|i|</span> p i * i &#125;</span><br><span class="line">      output = $stdout.string</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">"1\n"</span> + <span class="string">"4\n"</span> + <span class="string">"9\n"</span>, output</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_select</span>メソッドで特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].select(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_find_all</span>メソッドで特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].find_all(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たさない要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].reject(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">1.1</span>, <span class="number">3.3</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_map</span>メソッドで新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.map(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_collect</span>メソッドで新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.collect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_find</span>メソッドで配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.find(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_detect</span>メソッドで配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.detect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定した評価式で並び変えた配列を返す</span></span><br><span class="line">      result1 = <span class="string">%w[2 4 13 3 1 10]</span>.sort</span><br><span class="line">      result2 = <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|a, b|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line">      result3 = <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|b, a|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">%w[1 10 13 2 3 4]</span>, result1</span><br><span class="line">      assert_equal <span class="string">%w[1 2 3 4 10 13]</span>, result2</span><br><span class="line">      assert_equal <span class="string">%w[13 10 4 3 2 1]</span>, result3</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry apricot]</span>.grep(<span class="regexp">/^a/</span>)</span><br><span class="line">      assert_equal <span class="string">%w[apple apricot]</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である間までの要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>].take_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である以降の要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>].drop_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_inject</span>メソッドで畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].inject(<span class="number">0</span>) &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_reduce</span>メソッドで畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>ファイル分割でテストは壊れていないようですが警告がたくさん出てきました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">test</span>/learning_test.rb:70:14: C: Naming/AsciiIdentifiers: Use only ascii symbols <span class="keyword">in</span> identifiers.</span><br><span class="line">    def test_ブロック内の条件式が真である間までの要素を返す</span><br><span class="line">             ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/learning_test.rb:75:9: C: Naming/MethodName: Use snake_case <span class="keyword">for</span> method names.</span><br><span class="line">    def test_ブロック内の条件式が真である以降の要素を返す</span><br><span class="line">        ^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/learning_test.rb:75:14: C: Naming/AsciiIdentifiers: Use only ascii symbols <span class="keyword">in</span> identifiers.</span><br><span class="line">    def test_ブロック内の条件式が真である以降の要素を返す</span><br><span class="line">             ^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/learning_test.rb:80:9: C: Naming/MethodName: Use snake_case <span class="keyword">for</span> method names.</span><br><span class="line">    def test_injectメソッドで畳み込み演算を行う</span><br><span class="line">        ^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/learning_test.rb:80:20: C: Naming/AsciiIdentifiers: Use only ascii symbols <span class="keyword">in</span> identifiers.</span><br><span class="line">    def test_injectメソッドで畳み込み演算を行う</span><br><span class="line">                   ^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/learning_test.rb:85:9: C: Naming/MethodName: Use snake_case <span class="keyword">for</span> method names.</span><br><span class="line">    def test_reduceメソッドで畳み込み演算を行う</span><br><span class="line">        ^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/learning_test.rb:85:20: C: Naming/AsciiIdentifiers: Use only ascii symbols <span class="keyword">in</span> identifiers.</span><br><span class="line">    def test_reduceメソッドで畳み込み演算を行う</span><br><span class="line">                   ^^^^^^^^^^^^^^</span><br><span class="line"> 15/15 files |======================= 100 ========================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">15 files inspected, 87 offenses detected</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>これらはテストコードに関する警告がほとんどなので <code>.rubocop.yml</code> を編集してチェック対象から外しておきましょう。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inherit_from:</span> <span class="string">.rubocop_todo.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Naming/AsciiIdentifiers:</span></span><br><span class="line">  <span class="attr">Exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"test/**/*"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Naming/MethodName:</span></span><br><span class="line">  <span class="attr">EnforcedStyle:</span> <span class="string">snake_case</span></span><br><span class="line">  <span class="attr">Exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"test/**/*"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Metrics/BlockLength:</span></span><br><span class="line">  <span class="attr">Max:</span> <span class="number">62</span></span><br><span class="line">  <span class="attr">Exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"test/**/*"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Documentation:</span></span><br><span class="line">  <span class="attr">Enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">08:21:55 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 144 / 215 LOC (66.98%) covered.</span><br><span class="line">Started with run options --guard --seed 55977</span><br><span class="line"></span><br><span class="line">  70/70: [=====================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01518s</span><br><span class="line">70 tests, 79 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">08:21:56 - INFO - Inspecting Ruby code style of all files</span><br><span class="line">/workspace/tdd_rb/.rubocop.yml: Warning: no department given <span class="keyword">for</span> Documentation.</span><br><span class="line"> 22/22 files |======================= 100 ========================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">22 files inspected, no offenses detected</span><br><span class="line">08:21:58 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/border.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/loading_background.png</span><br><span class="line">/workspace/tdd_rb/.rubocop.yml: Warning: no department given <span class="keyword">for</span> Documentation.</span><br><span class="line"> 0/0 files |======================== 100 =========================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">0 files inspected, no offenses detected</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>警告は消えました、仕上げに <code>fizz_buzz_test.rb</code> ファイルを削除します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">08:24:12 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest, Unit Tests to /workspace/tdd_rb/coverage. 135 / 201 LOC (67.16%) covered.</span><br><span class="line">Started with run options --guard --seed 40104</span><br><span class="line"></span><br><span class="line">  32/32: [=====================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00601s</span><br><span class="line">32 tests, 36 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">08:24:13 - INFO - Inspecting Ruby code style of all files</span><br><span class="line">/workspace/tdd_rb/.rubocop.yml: Warning: no department given <span class="keyword">for</span> Documentation.</span><br><span class="line"> 21/21 files |======================= 100 ========================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">21 files inspected, no offenses detected</span><br><span class="line">08:24:14 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/controls.png coverage/assets/0.10.2/colorbox/border.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/loading_background.png</span><br><span class="line">/workspace/tdd_rb/.rubocop.yml: Warning: no department given <span class="keyword">for</span> Documentation.</span><br><span class="line"> 0/0 files |======================== 100 =========================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">0 files inspected, no offenses detected</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストの分割も完了したのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor(WIP): モジュール分割'</span></span><br></pre></td></tr></table></figure><h4 id="エントリーポイント"><a href="#エントリーポイント" class="headerlink" title="エントリーポイント"></a>エントリーポイント</h4><p>仕上げはクラスモジュールのエントリーポイント作成とテストヘルパーの追加です。</p><pre><code>/main.rb  |--lib/      |     application/           |           -- fizz_buzz_command.rb           -- fizz_buzz_value_command.rb           -- fizz_buzz_list_command.rb     domain/           |           model/               |               -- fizz_buzz_value.rb               -- fizz_buzz_list.rb           type/               |               -- fizz_buzz_type.rb               -- fizz_buzz_type_01.rb               -- fizz_buzz_type_02.rb               -- fizz_buzz_type_03.rb       -- fizz_buzz.rb  |--test/      |      application/           |           -- fizz_buzz_value_command_test.rb           -- fizz_buzz_list_command._test.rb      domain/           |           model/                 |                 -- fizz_buzz_value_test.rb                 -- fizz_buzz_list_test.rb      |       -- learning_test.rb/main.rb  |--lib/      |     application/           |           -- fizz_buzz_command.rb           -- fizz_buzz_value_command.rb           -- fizz_buzz_list_command.rb     domain/           |           model/               |               -- fizz_buzz_value.rb               -- fizz_buzz_list.rb           type/               |               -- fizz_buzz_type.rb               -- fizz_buzz_type_01.rb               -- fizz_buzz_type_02.rb               -- fizz_buzz_type_03.rb       -- fizz_buzz.rb  |--test/      |      application/           |           -- fizz_buzz_value_command_test.rb           -- fizz_buzz_list_command._test.rb      domain/           |           model/                 |                 -- fizz_buzz_value_test.rb                 -- fizz_buzz_list_test.rb      |       -- learning_test.rb       -- test_helper.rb</code></pre><p><code>fizz_buzz.rb</code> ファイルの内容をクラスモジュール読み込みに変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./lib/application/fizz_buzz_command.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/application/fizz_buzz_value_command.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/application/fizz_buzz_list_command.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/domain/model/fizz_buzz_value.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/domain/model/fizz_buzz_list.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/domain/type/fizz_buzz_type.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/domain/type/fizz_buzz_type_01.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/domain/type/fizz_buzz_type_02.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/domain/type/fizz_buzz_type_03.rb'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/domain/type/fizz_buzz_type_not_defined.rb'</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">08:34:32 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest to /workspace/tdd_rb/coverage. 119 / 211 LOC (56.4%) covered.</span><br><span class="line">Started with run options --guard --seed 18696</span><br><span class="line"></span><br><span class="line">  32/32: [=====================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00561s</span><br><span class="line">32 tests, 36 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>コードカバレッジがうまく機能していないようなので、<code>test_helper.rb</code> を追加して共通部分を各テストファイルから読み込むように変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストタスクを実行したところ動作しなくなりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rake <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>テスト対象をテストディレクトリ内のすべてのテストコードに変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Rake::TestTask.new <span class="keyword">do</span> <span class="params">|test|</span></span><br><span class="line">  test.test_files = Dir[<span class="string">'./test/fizz_buzz_test.rb'</span>]</span><br><span class="line">  test.verbose = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Rake::TestTask.new <span class="keyword">do</span> <span class="params">|test|</span></span><br><span class="line">  test.test_files = Dir[<span class="string">'./test/**/*_test.rb'</span>]</span><br><span class="line">  test.verbose = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ rake <span class="built_in">test</span></span><br><span class="line">Started with run options --seed 46929</span><br><span class="line"></span><br><span class="line">  32/32: [=====================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00800s</span><br><span class="line">32 tests, 36 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストも壊れていないし警告も出ていません。モジュール分割完了です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: モジュール分割'</span></span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/7b7ead60-577c-fb59-6866-0b3c49b30112.png" alt="diag-c335939a7cce862d0b767629390a1852.png"></p><h3 id="ふりかえり"><a href="#ふりかえり" class="headerlink" title="ふりかえり"></a>ふりかえり</h3><p>今回、 <strong>オブジェクト指向プログラム</strong> から <strong>オブジェクト指向設計</strong> そして <strong>モジュール分割</strong> を <strong>テスト駆動開発</strong>を通じて実践しました。各トピックを振り返ってみましょう。</p><h4 id="オブジェクト指向プログラム-2"><a href="#オブジェクト指向プログラム-2" class="headerlink" title="オブジェクト指向プログラム"></a>オブジェクト指向プログラム</h4><p>エピソード 1 で作成したプログラムの追加仕様を <strong>テスト駆動開発</strong> で実装しました。 次に <strong>手続き型コード</strong> との比較から <strong>オブジェクト指向プログラム</strong> を構成する <strong>カプセル化</strong> <strong>ポリモフィズム</strong> <strong>継承</strong> という概念をコードベースの <strong>リファクタリング</strong> を通じて解説しました。</p><p>具体的には <strong>フィールドのカプセル</strong> から <strong>setter の削除</strong> を適用することにより <strong>カプセル化</strong> を実現しました。続いて、 <strong>ポリモーフィズムによる条件記述の置き換え</strong> から <strong>State/Strategy によるタイプコードの置き換え</strong> を適用することにより <strong>ポリモーフィズム</strong> の効果を体験しました。そして、 <strong>スーパークラスの抽出</strong> から <strong>メソッド名の変更</strong> <strong>メソッドの移動</strong> の適用を通して <strong>継承</strong> の使い方を体験しました。さらに <strong>値オブジェクト</strong> と <strong>ファーストクラス</strong> というオブジェクト指向プログラミングに必要なツールの使い方も学習しました。</p><h4 id="オブジェクト指向設計-2"><a href="#オブジェクト指向設計-2" class="headerlink" title="オブジェクト指向設計"></a>オブジェクト指向設計</h4><p>次に設計の観点から <strong>単一責任の原則</strong> に違反している <code>FizzBuzz</code> クラスを <strong>デザインパターン</strong> の 1 つである <strong>Command パターン</strong> を使ったリファクタリングである <strong>メソッドオブジェクトによるメソッドの置き換え</strong> を適用してクラスの責務を分割しました。オブジェクト指向設計のイデオムである <strong>デザインパターン</strong> として <strong>Command パターン</strong> 以外に <strong>Value Object パターン</strong> <strong>Factory Method パターン</strong> <strong>Strategy パターン</strong> を <strong>リファクタリング</strong> を適用する過程ですでに実現していたことを説明しました。そして、<strong>オープン・クローズドの原則</strong> を満たすコードに <strong>リファクタリング</strong> されたことで既存のコードを変更することなく振る舞いを変更できるようになりました。</p><p>加えて、正常系の設計を改善した後 <strong>アサーションの導入</strong> <strong>例外によるエラーコードの置き換え</strong> といった例外系の <strong>リファクタリング</strong> を適用しました。最後に <strong>ポリモーフィズム</strong> の応用として <strong>特殊ケースの導入</strong> の適用による <strong>Null Object パターン</strong> を使った <strong>オープン・クローズドの原則</strong> に従った安全なコードの追加方法を解説しました。</p><h4 id="モジュールの分割-1"><a href="#モジュールの分割-1" class="headerlink" title="モジュールの分割"></a>モジュールの分割</h4><p>仕上げに、<strong>モノリシック</strong> なファイルから個別のクラスモジュールへの分割を <strong>ドメインオブジェクト</strong> の抽出を通して <strong>ドメインモデル</strong> へと整理することにより <strong>モジュール分割</strong> を実現しました。最終的にプログラムからアプリケーションへと体裁を整えることが出来ました。以下が最終的なモジュール構造とコードです。</p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/7b7ead60-577c-fb59-6866-0b3c49b30112.png" alt="diag-c335939a7cce862d0b767629390a1852.png"></p><ul><li>Application</li></ul><p><strong>/main.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz.rb'</span></span><br><span class="line"></span><br><span class="line">command = FizzBuzzListCommand.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">command.execute(<span class="number">100</span>).each &#123; <span class="params">|i|</span> puts i.value &#125;</span><br></pre></td></tr></table></figure><p><strong>/lib/application/fizz_buzz_command.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzCommand</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">execute</span>;</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/application/fizz_buzz_value_command.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValueCommand</span> &lt; FizzBuzzCommand</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(number)</span></span></span><br><span class="line">    @type.generate(number).value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/application/fizz_buzz_list_command.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzListCommand</span> &lt; FizzBuzzCommand</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(type)</span></span></span><br><span class="line">    @type = type</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(number)</span></span></span><br><span class="line">    FizzBuzzList.new((<span class="number">1</span>..number).map &#123; <span class="params">|i|</span> @type.generate(i) &#125;).value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>Domain</li></ul><p><strong>/lib/domain/model/fizz_buzz_value.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValue</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:number</span>, <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(number, value)</span></span></span><br><span class="line">    raise <span class="string">'正の値のみ有効です'</span> <span class="keyword">if</span> number.negative?</span><br><span class="line"></span><br><span class="line">    @number = number</span><br><span class="line">    @value = value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    <span class="string">"<span class="subst">#&#123;@number&#125;</span>:<span class="subst">#&#123;@value&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">==</span><span class="params">(other)</span></span></span><br><span class="line">    @number == other.number &amp;&amp; @value == other.value</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">alias</span> eql? ==</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/domain/model/fizz_buzz_list.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzList</span></span></span><br><span class="line">  MAX_COUNT = <span class="number">100</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:value</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(list)</span></span></span><br><span class="line">    raise <span class="string">"上限は<span class="subst">#&#123;MAX_COUNT&#125;</span>件までです"</span> <span class="keyword">if</span> list.count &gt; MAX_COUNT</span><br><span class="line"></span><br><span class="line">    @value = list</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    @value.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(value)</span></span></span><br><span class="line">    FizzBuzzList.new(@value + value)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/domain/type/fizz_buzz_type.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType</span></span></span><br><span class="line">  TYPE_01 = <span class="number">1</span></span><br><span class="line">  TYPE_02 = <span class="number">2</span></span><br><span class="line">  TYPE_03 = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create</span><span class="params">(type)</span></span></span><br><span class="line">    <span class="keyword">case</span> type</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_01</span><br><span class="line">      FizzBuzzType01.new</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_02</span><br><span class="line">      FizzBuzzType02.new</span><br><span class="line">    <span class="keyword">when</span> FizzBuzzType::TYPE_03</span><br><span class="line">      FizzBuzzType03.new</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      FizzBuzzTypeNotDefined.new</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fizz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buzz?</span><span class="params">(number)</span></span></span><br><span class="line">    number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/domain/type/fizz_buzz_type_01.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType01</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'FizzBuzz'</span>) <span class="keyword">if</span> fizz?(number) &amp;&amp; buzz?(number)</span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'Fizz'</span>) <span class="keyword">if</span> fizz?(number)</span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'Buzz'</span>) <span class="keyword">if</span> buzz?(number)</span><br><span class="line"></span><br><span class="line">    FizzBuzzValue.new(number, number.to_s)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/domain/type/fizz_buzz_type_02.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType02</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    FizzBuzzValue.new(number, number.to_s)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/domain/type/fizz_buzz_type_03.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzType03</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> FizzBuzzValue.new(number, <span class="string">'FizzBuzz'</span>) <span class="keyword">if</span> fizz?(number) &amp;&amp; buzz?(number)</span><br><span class="line"></span><br><span class="line">    FizzBuzzValue.new(number, number.to_s)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/domain/type/fizz_buzz_type_not_defined.b.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTypeNotDefined</span> &lt; FizzBuzzType</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    FizzBuzzValue.new(number, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    <span class="string">'未定義'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>Test</li></ul><p><strong>/test/application/fizz_buzz_value_command_test.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValueCommandTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzzValueCommand.new(FizzBuzzType01.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Fizz'</span>, @fizzbuzz.execute(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @fizzbuzz.execute(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.execute(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.execute(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ2の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzzValueCommand.new(FizzBuzzType02.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.execute(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.execute(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列15を返す</span></span><br><span class="line">          assert_equal <span class="string">'15'</span>, @fizzbuzz.execute(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.execute(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'タイプ3の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @fizzbuzz = FizzBuzzValueCommand.new(FizzBuzzType03.new)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">          assert_equal <span class="string">'3'</span>, @fizzbuzz.execute(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列5を返す</span></span><br><span class="line">          assert_equal <span class="string">'5'</span>, @fizzbuzz.execute(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.execute(<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @fizzbuzz.execute(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'それ以外のタイプの場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>未定義のタイプを返す</span></span><br><span class="line">        fizzbuzz = FizzBuzzType.create(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">'未定義'</span>, fizzbuzz.to_s</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>空の文字列を返す</span></span><br><span class="line">        type = FizzBuzzType.create(<span class="number">4</span>)</span><br><span class="line">        command = FizzBuzzValueCommand.new(type)</span><br><span class="line"></span><br><span class="line">        assert_equal <span class="string">''</span>, command.execute(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'例外ケース'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>値は正の値のみ許可する</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        FizzBuzzValueCommand.new(</span><br><span class="line">          FizzBuzzType.create(FizzBuzzType::TYPE_01)</span><br><span class="line">        ).execute(-<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'正の値のみ有効です'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/test/application/fizz_buzz_list_command_test.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzListCommandTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'数を文字列にして返す'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'タイプ1の場合'</span> <span class="keyword">do</span></span><br><span class="line">      describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">          fizzbuzz = FizzBuzzListCommand.new(FizzBuzzType01.new)</span><br><span class="line">          @result = fizzbuzz.execute(<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">          assert_equal <span class="string">'1'</span>, @result.first.value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の最後は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @result.last.value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の2番目は文字列の<span class="title">Fizz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Fizz'</span>, @result[<span class="number">2</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の4番目は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'Buzz'</span>, @result[<span class="number">4</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の14番目は文字列の<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">          assert_equal <span class="string">'FizzBuzz'</span>, @result[<span class="number">14</span>].value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'例外ケース'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_100</span>より多い数を許可しない</span></span><br><span class="line">      e = assert_raises RuntimeError <span class="keyword">do</span></span><br><span class="line">        FizzBuzzListCommand.new(</span><br><span class="line">          FizzBuzzType.create(FizzBuzzType::TYPE_01)</span><br><span class="line">        ).execute(<span class="number">101</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">'上限は100件までです'</span>, e.message</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/test/domain/model/fizz_buzz_value_test.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzValueTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>同じで値である</span></span><br><span class="line">    value1 = FizzBuzzValue.new(<span class="number">1</span>, <span class="string">'1'</span>)</span><br><span class="line">    value2 = FizzBuzzValue.new(<span class="number">1</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">    assert value1.eql?(value2)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_to_string</span>メソッド</span></span><br><span class="line">    value = FizzBuzzValue.new(<span class="number">3</span>, <span class="string">'Fizz'</span>)</span><br><span class="line"></span><br><span class="line">    assert_equal <span class="string">'3:Fizz'</span>, value.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/test/domain/model/fizz_buzz_list_test.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzListTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しいインスタンスが作られる</span></span><br><span class="line">    command = FizzBuzzListCommand.new(FizzBuzzType.create(FizzBuzzType::TYPE_01))</span><br><span class="line">    array = command.execute(<span class="number">50</span>)</span><br><span class="line">    list1 = FizzBuzzList.new(array)</span><br><span class="line">    list2 = list1.add(array)</span><br><span class="line"></span><br><span class="line">    assert_equal <span class="number">50</span>, list1.value.count</span><br><span class="line">    assert_equal <span class="number">100</span>, list2.value.count</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/test/learning_test.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./test/test_helper'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LearningTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'配列や繰り返し処理を理解する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>繰り返し処理</span></span><br><span class="line">      $stdout = StringIO.new</span><br><span class="line">      [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].each &#123; <span class="params">|i|</span> p i * i &#125;</span><br><span class="line">      output = $stdout.string</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">"1\n"</span> + <span class="string">"4\n"</span> + <span class="string">"9\n"</span>, output</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_select</span>メソッドで特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].select(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_find_all</span>メソッドで特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].find_all(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たさない要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].reject(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">1.1</span>, <span class="number">3.3</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_map</span>メソッドで新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.map(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_collect</span>メソッドで新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.collect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_find</span>メソッドで配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.find(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_detect</span>メソッドで配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.detect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定した評価式で並び変えた配列を返す</span></span><br><span class="line">      result1 = <span class="string">%w[2 4 13 3 1 10]</span>.sort</span><br><span class="line">      result2 = <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|a, b|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line">      result3 = <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|b, a|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">%w[1 10 13 2 3 4]</span>, result1</span><br><span class="line">      assert_equal <span class="string">%w[1 2 3 4 10 13]</span>, result2</span><br><span class="line">      assert_equal <span class="string">%w[13 10 4 3 2 1]</span>, result3</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry apricot]</span>.grep(<span class="regexp">/^a/</span>)</span><br><span class="line">      assert_equal <span class="string">%w[apple apricot]</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である間までの要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>].take_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である以降の要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>].drop_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_inject</span>メソッドで畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].inject(<span class="number">0</span>) &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_reduce</span>メソッドで畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="良い設計"><a href="#良い設計" class="headerlink" title="良い設計"></a>良い設計</h4><p>エピソード 1 では <strong>良いコード</strong> について考えました。</p><blockquote><p>TDD は「より良いコードを書けば、よりうまくいく」という素朴で奇妙な仮設によって成り立っている</p><p>— テスト駆動開発</p></blockquote><blockquote><p>「動作するきれいなコード」。RonJeffries のこの簡潔な言葉が、テスト駆動開発(TDD)のゴールだ。動作するきれいなコードはあらゆる意味で価値がある。</p><p>— テスト駆動開発</p></blockquote><blockquote><p>良いコードかどうかは、変更がどれだけ容易なのかで決まる。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>コードは理解しやすくなければいけない。</p><p>— リーダブルコード</p></blockquote><p>本エピソードでは <strong>テスト駆動開発</strong> による <strong>オブジェクト指向プログラミング</strong> の <strong>リファクタリング</strong> を経てコードベースを改善してきました。そして <strong>オブジェクト指向設計</strong> により <strong>良いコード</strong> のプログラムを <strong>良い設計</strong> のアプリケーションへと進化させることができました。</p><blockquote><p>どこに何が書いてあるかをわかりやすくし、変更の影響を狭い範囲に閉じ込め、安定して動作する部品を柔軟に組み合わせながらソフトウェアを構築する技法がオブジェクト指向設計です。</p><p>— 現場で役立つシステム設計の原則</p></blockquote><blockquote><p>設計の良し悪しは、ソフトウェアを変更するときにはっきりします。</p><p>構造が入り組んだわかりづらいプログラムは内容の理解に時間がかかります。重複したコードをあちこちで修正する作業が増え、変更の副作用に悩まされます。</p><p>一方、うまく設計されたプログラムは変更が楽で安全です。変更すべき箇所がかんたんにわかり、変更するコード量が少なく、変更の影響を狭い範囲に限定できます。</p><p>プログラムの修正に３日かかるか、それとも半日で済むか。その違いを生むのが「設計」なのです。</p><p>— 現場で役立つシステム設計の原則</p></blockquote><p>では、いつ設計をしていたのでしょうか？ わかりますよね、このエピソードの始まりから終わりまで常に設計をしていたのです。</p><blockquote><p>TDD は分析技法であり、設計技法であり、実際には開発のすべてのアクティビティを構造化する技法なのだ。</p><p>— テスト駆動開発</p></blockquote><h2 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h2><ul><li><a href="https://qiita.com/nrslib/items/73bf176147192c402049" target="_blank" rel="noopener">オブジェクト指向のいろは</a></li></ul><h2 id="参考図書"><a href="#参考図書" class="headerlink" title="参考図書"></a>参考図書</h2><ul><li><p>テスト駆動開発 Kent Beck (著), 和田 卓人 (翻訳): オーム社; 新訳版 (2017/10/14)</p></li><li><p>新装版 リファクタリング―既存のコードを安全に改善する― (OBJECT TECHNOLOGY SERIES) Martin<br>Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章 (翻訳), その他: オーム社; 新装版<br>(2014/7/26)</p></li><li><p>リファクタリング(第 2 版): 既存のコードを安全に改善する (OBJECT TECHNOLOGY SERIES) Martin<br>Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章 (翻訳), その他: オーム社; 第 2 版<br>(2019/12/1)</p></li><li><p>リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)<br>Dustin Boswell (著), Trevor Foucher (著), 須藤 功平 (解説), 角 征典 (翻訳):<br>オライリージャパン; 初版八刷版 (2012/6/23)</p></li><li><p>Clean Code 　アジャイルソフトウェア達人の技 (アスキードワンゴ) Ｒｏｂｅｒｔ Ｃ．Ｍａｒｔｉｎ (著), 花井<br>志生 (著) ドワンゴ (2017/12/28)</p></li><li><p>現場で役立つシステム設計の原則 〜変更を楽で安全にするオブジェクト指向の実践技法 増田 亨 (著) 技術評論社<br>(2017/7/5)</p></li><li><p>かんたん Ruby (プログラミングの教科書) すがわらまさのり (著) 技術評論社 (2018/6/21)</p></li></ul><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&t=k2works0c-22&m=amazon&o=9&p=8&l=as1&IS1=1&detail=1&asins=4274217884&linkId=568f25b974af5645e862928a12c354e1&bc1=ffffff&lt1=_top&fc1=333333&lc1=0066c0&bg1=ffffff&f=ifr"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&t=k2works0c-22&m=amazon&o=9&p=8&l=as1&IS1=1&detail=1&asins=427405019X&linkId=08e705a5969e20f5129b4d3cefbcdb15&bc1=000000&lt1=_top&fc1=333333&lc1=0066c0&bg1=ffffff&f=ifr"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4274224546&linkId=5f857b58e988073ce92e0adcf1dd3ebb"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4873115655&linkId=82416afd8e4042cbfd2dc6d4b80653f1"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B078HYWY5X&linkId=920b3fce45a79c528e5be0b2140cce9c"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B073GSDBGT&linkId=84e5b25b776d7583da1d5addf2e24fa7"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4774198617&linkId=7858ddef815d9a093fcacb3a1208b774"></iframe>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
          <category> プログラミング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> テスト駆動開発 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>テスト駆動開発から始めるRuby入門 ~アルゴリズムのパフォーマンスチューニングとベンチマークを実践する~</title>
      <link href="/2020/04/18/1587440576/"/>
      <url>/2020/04/18/1587440576/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitpod.io/#https://github.com/hiroshima-arc/tdd_rb/tree/episode-x" target="_blank" rel="noopener">Open in Gitpod</a></p><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p>この記事は <a href="https://k2works.github.io/2020/04/16/1587009564/">テスト駆動開発から始める Ruby 入門 -2 時間で TDD とリファクタリングのエッセンスを体験する-</a> の外伝エピソードです。ちなみに前半の元ネタは <em>テスト駆動開発</em>の<em>付録 B フィボナッチ</em>を Ruby で実装したものです。後半はオリジナルエピソードでは言及できなかったアルゴリズムの <strong>プロファイリング</strong> と <strong>ベンチマーク</strong> の実施に関して解説しています。</p><p>前提として、<a href="https://k2works.github.io/2020/04/17/1587440287/">テスト駆動開発から始める Ruby 入門 -ソフトウェア開発の三種の神器を準備する-</a> で開発環境を構築したところから始まります。別途、<a href="https://gitpod.io/#https://github.com/hiroshima-arc/tdd_rb/tree/episode-x" target="_blank" rel="noopener">セットアップ済み環境</a> を用意していますのでこちらからだとすぐに始めることが出来ます。</p><p>前半の用語の詳細については <a href="https://k2works.github.io/2020/04/16/1587009564/">エピソード 1</a> で解説しています。後半の用語の詳細については <a href="https://k2works.github.io/2020/04/19/1587440874/">エピソード 3</a> で解説していますので興味があれば御一読ください。</p><a id="more"></a><h2 id="パフォーマンスチューニングから始めるテスト駆動開発"><a href="#パフォーマンスチューニングから始めるテスト駆動開発" class="headerlink" title="パフォーマンスチューニングから始めるテスト駆動開発"></a>パフォーマンスチューニングから始めるテスト駆動開発</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p><a href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A3%E3%83%9C%E3%83%8A%E3%83%83%E3%83%81%E6%95%B0" target="_blank" rel="noopener">フィボナッチ数</a> を計算するプログラムを <strong>テスト駆動開発</strong> で作ります。</p><p>初めに <strong>TODO リスト</strong> をプログラミング作業をリストアップします。次に、最初に失敗するテストを作成します。 その後 <strong>仮実装</strong>でベタ書き値を返すテストを実行します。 それから <strong>三角測量</strong> を使って慎重にアルゴリズムを一般化していきます。そして、 <strong>明白な実装</strong> によりアルゴリズムを完成させます。</p><p>アルゴリズムが完成したら <strong>リファクタリング</strong> を実施してコードベースを <strong>動作するきれいなコード</strong> に洗練していきます。</p><p><strong>動作するきれいなコード</strong> になったらパフォーマンスの検証をするためパフォーマンスチューニングを実施します。 パフォーマンスチューニングでは <strong>プロファイラ</strong>  を使ったプログラムのボトルネック調査を実施します。アルゴリズムのパフォーマンスを改善したら別途追加したアルゴリズムと <strong>ベンチマーク</strong> を実施してどのアルゴリズムを採用するかを決定します。</p><p>仕上げは、 <strong>モジュール分割</strong> により Ruby アプリケーションとしてリリースします。</p><h3 id="仕様"><a href="#仕様" class="headerlink" title="仕様"></a>仕様</h3><p>仕様は以下の通りです。</p><blockquote><p>n 番目のフィボナッチ数を Fn で表すと、Fn は再帰的に</p><p>F0 = 0,</p><p>F1 = 1,</p><p>Fn + 2 = Fn + Fn + 1 (n ≧ 0)</p><p>で定義される。これは、2 つの初期条件を持つ漸化式である。</p><p>この数列 (Fn)はフィボナッチ数列（フィボナッチすうれつ、（英: Fibonacci sequence）と呼ばれ、</p><p>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,<br>1597, 2584, 4181, 6765, 10946, …（オンライン整数列大辞典の数列 A45） と続く。最初の二項は 0, 1<br>であり、以後どの項もその直前の 2 つの項の和となっている。</p><p>— Wikipedia</p></blockquote><p>表形式にすると以下のようになります。</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td><td>18</td><td>19</td><td>…​</td></tr><tr><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>21</td><td>34</td><td>55</td><td>89</td><td>144</td><td>233</td><td>377</td><td>610</td><td>987</td><td>1597</td><td>2584</td><td>…​</td></tr></tbody></table><h3 id="TODO-リスト"><a href="#TODO-リスト" class="headerlink" title="TODO リスト"></a>TODO リスト</h3><blockquote><p>TODO リスト</p><p>何をテストすべきだろうか—-着手する前に、必要になりそうなテストをリストに書き出しておこう。</p><p>— テスト駆動開発</p></blockquote><p><strong>TODO リスト</strong> を書き出す取っ掛かりとして仕様で定義されている内容からプログラムで実施できる内容に分解してきましょう。仕様では以下のように定義されているので。</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td><td>18</td><td>19</td><td>…​</td></tr><tr><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>21</td><td>34</td><td>55</td><td>89</td><td>144</td><td>233</td><td>377</td><td>610</td><td>987</td><td>1597</td><td>2584</td><td>…​</td></tr></tbody></table><p>最初のタスクは <code>0を渡したら0を返す</code> 振る舞いをするプログラムを作ることにしましょう。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>…​</td></tr><tr><td>0</td><td>…​</td></tr></tbody></table><p>同様のパターンで他のタスクも切り出してみましょう。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>…​</td></tr><tr><td>0</td><td>1</td><td>…​</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>…​</td></tr><tr><td>0</td><td>1</td><td>1</td><td>…​</td></tr></tbody></table><p>とりあえず、３件ほどタスクとして切り出したので <strong>TODO リスト</strong> の作成は一旦終了してプログラミング作業に入るとしましょう。</p><ul><li><p>0 を渡したら 0 を返す</p></li><li><p>1 を渡したら 1 を返す</p></li><li><p>2 を渡したら 1 を返す</p></li></ul><h3 id="仮実装"><a href="#仮実装" class="headerlink" title="仮実装"></a>仮実装</h3><blockquote><p>仮実装を経て本実装へ</p><p>失敗するテストを書いてから、最初に行う実装はどのようなものだろうか—-ベタ書きの値を返そう。</p><p>— テスト駆動開発</p></blockquote><h4 id="0-を渡したら-0-を返す"><a href="#0-を渡したら-0-を返す" class="headerlink" title="0 を渡したら 0 を返す"></a>0 を渡したら 0 を返す</h4><p>早速、 <strong>TODO リスト</strong> の１つ目から片付けていくとしましょう。</p><ul><li><p><strong>0 を渡したら 0 を返す</strong></p></li><li><p>1 を渡したら 1 を返す</p></li><li><p>2 を渡したら 1 を返す</p></li></ul><p>まずは最初に失敗するテストを書きますがまずは以下のサンプルコードを使ってテスティングフレームワークの動作確認をしておきましょう。今回利用する Ruby のテスティングフレームワークは <a href="https://github.com/seattlerb/minitest" target="_blank" rel="noopener">minitest</a>です。 <code>test</code> フォルダ以下に <code>fibonacci_test.rb</code> ファイルを追加して以下のコードを入力します。</p><p><code>test/fibonacci_test.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">greeting</span></span></span><br><span class="line">    <span class="string">'hello world'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_greeting</span></span></span><br><span class="line">    assert_equal <span class="string">'hello world'</span>, greeting</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>今回テスト結果を見やすくするため <code>minitest/reporters</code> という gem を使っているのでまずインストールしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install minitest-reporters</span><br></pre></td></tr></table></figure><p>gem インストールが完了したらコマンドラインに <code>ruby test/fibonacci_test.rb</code> コマンドを入力してテストを実施します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 28548</span><br><span class="line"></span><br><span class="line">  1/1: [==========================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01040s</span><br><span class="line">1 tests, 1 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストは無事実行されたようですね。続いてテストが失敗するか確認しておきましょう。 <code>greeting</code> メソッドの <code>hello world</code> を <code>hello world!</code> に変更してテストを実行します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">greeting</span></span></span><br><span class="line">    <span class="string">'hello world!'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストは失敗して以下のようなメッセージが表示されました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 30787</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_greeting"</span>, &lt;Minitest::Reporters::Suite:0x000055eaefeef5e0 @name=<span class="string">"Fibonacci"</span>&gt;, 0.003157061990350485]</span><br><span class="line"> test_greeting<span class="comment">#Fibonacci (0.00s)</span></span><br><span class="line">        Expected: <span class="string">"hello world"</span></span><br><span class="line">          Actual: <span class="string">"hello world!"</span></span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:13:<span class="keyword">in</span> `test_greeting`</span><br><span class="line"></span><br><span class="line">  1/1: [==========================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00398s</span><br><span class="line">1 tests, 1 assertions, 1 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テスティングフレームワークのセットアップと動作確認が終了したので最初の失敗するテストを書きます。まずは <strong>アサーションファースト</strong>　でサンプルコードを削除して以下のコードにします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    assert_equal <span class="number">0</span>, fib(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストは無事？失敗します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 21656</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_fibonacci"</span>, &lt;Minitest::Reporters::Suite:0x0000559acae8d068 @name=<span class="string">"FibonacciTest"</span>&gt;, 0.001314591965638101]</span><br><span class="line"> test_fibonacci<span class="comment">#FibonacciTest (0.00s)</span></span><br><span class="line">Minitest::UnexpectedError:         NoMethodError: undefined method `fib<span class="string">' for #&lt;FibonacciTest:0x0000559acae8d860&gt;</span></span><br><span class="line"><span class="string">            test/fibonacci_test.rb:9:in `test_fibonacci'</span>`</span><br><span class="line"></span><br><span class="line">  1/1: [========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00419s</span><br><span class="line">1 tests, 0 assertions, 0 failures, 1 errors, 0 skips</span><br></pre></td></tr></table></figure><p>まずは <strong>仮実装</strong> でテストを通すようにしましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    assert_equal <span class="number">0</span>, fib(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストはレッドからグリーンになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 2885</span><br><span class="line"></span><br><span class="line">  1/1: [==========================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00352s</span><br><span class="line">1 tests, 1 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストが通ったのでバージョン管理システムにコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'test: 0を渡したら0を返す'</span></span><br></pre></td></tr></table></figure><ul><li><p><del>0 を渡したら 0 を返す</del></p></li><li><p>1 を渡したら 1 を返す</p></li><li><p>2 を渡したら 1 を返す</p></li></ul><h3 id="三角測量"><a href="#三角測量" class="headerlink" title="三角測量"></a>三角測量</h3><blockquote><p>三角測量</p><p>テストから最も慎重に一般化を引き出すやり方はどのようなものだろうか—-２つ以上の例があるときだけ、一般化を行うようにしよう。</p><p>— テスト駆動開発</p></blockquote><h4 id="1-を渡したら-1-を返す"><a href="#1-を渡したら-1-を返す" class="headerlink" title="1 を渡したら 1 を返す"></a>1 を渡したら 1 を返す</h4><p>１つ目の <strong>TODO リスト</strong> を片付けたので２つ目の <strong>TODO リスト</strong> に取り掛かるとしましょう。</p><ul><li><p><del>0 を渡したら 0 を返す</del></p></li><li><p><strong>1 を渡したら 1 を返す</strong></p></li><li><p>2 を渡したら 1 を返す</p></li></ul><p><strong>テストファースト</strong>　<strong>アサーションファースト</strong> なのでまずはテストを追加するとこから始めます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    assert_equal <span class="number">0</span>, fib(<span class="number">0</span>)</span><br><span class="line">    assert_equal <span class="number">1</span>, fib(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストは失敗します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 21207</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_fibonacci"</span>, &lt;Minitest::Reporters::Suite:0x000056525007ccb0 @name=<span class="string">"FibonacciTest"</span>&gt;, 0.0014098359970375896]</span><br><span class="line"> test_fibonacci<span class="comment">#FibonacciTest (0.00s)</span></span><br><span class="line">        Expected: 1</span><br><span class="line">          Actual: 0</span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:14:<span class="keyword">in</span> `test_fibonacci`</span><br><span class="line"></span><br><span class="line">  1/1: [========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00196s</span><br><span class="line">1 tests, 2 assertions, 1 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p><strong>仮実装</strong> で 0 しか返さないベタ書きのコードなのだから当然ですよね。0 ならば 0 を返してそれ以外の場合は 1 を返すようにプログラムを変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>プログラムの変更によりテストはレッドからグリーンに戻りました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 58331</span><br><span class="line"></span><br><span class="line">  1/1: [==========================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00169s</span><br><span class="line">1 tests, 2 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>ここでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'test: 1を渡したら1を返す'</span></span><br></pre></td></tr></table></figure><h4 id="リファクタリング"><a href="#リファクタリング" class="headerlink" title="リファクタリング"></a>リファクタリング</h4><ul><li><p><del>0 を渡したら 0 を返す</del></p></li><li><p><del>1 を渡したら 1 を返す</del></p></li><li><p>2 を渡したら 1 を返す</p></li></ul><p>次の <strong>TODO リスト</strong> に着手する前にテストケース内の重複が気になり始めたので、共通部分をアサーションからくくり出して、入力値と期待値の組でテストを回すようにテストコードを <strong>リファクタリング</strong> します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> &lt; Minitest::Test</span></span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], fib(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストを実行してプログラムが壊れていないことを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 5991</span><br><span class="line"></span><br><span class="line">  1/1: [==========================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00200s</span><br><span class="line">1 tests, 2 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>プログラムが壊れていないことが確認できたのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: アルゴリズムの置き換え'</span></span><br></pre></td></tr></table></figure><h4 id="1-を渡したら-2-を返す"><a href="#1-を渡したら-2-を返す" class="headerlink" title="1 を渡したら 2 を返す"></a>1 を渡したら 2 を返す</h4><ul><li><p><del>0 を渡したら 0 を返す</del></p></li><li><p><del>1 を渡したら 1 を返す</del></p></li><li><p><strong>2 を渡したら 1 を返す</strong></p></li></ul><p>テストコードの　<strong>リファクタリング</strong> を実施したので続いて　<strong>TODO リスト</strong> の３つ目に着手します。まずは <strong>アサーション</strong> の追加ですね。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], fib(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>おや、今回はプロダクトコードを変更しなくてもテストは通るようです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 26882</span><br><span class="line"></span><br><span class="line">  1/1: [==========================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00287s</span><br><span class="line">1 tests, 3 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>ここでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'test: 1を渡したら2を返す'</span></span><br></pre></td></tr></table></figure><ul><li><p><del>0 を渡したら 0 を返す</del></p></li><li><p><del>1 を渡したら 1 を返す</del></p></li><li><p><del>2 を渡したら 1 を返す</del></p></li></ul><h3 id="明白な実装"><a href="#明白な実装" class="headerlink" title="明白な実装"></a>明白な実装</h3><blockquote><p>明白な実装</p><p>シンプルな操作を実現するにはどうすればいいだろうか—-そのまま実装しよう。</p><p>仮実装や三角測量は、細かく細かく刻んだ小さなステップだ。だが、ときには実装をどうすべきか既に見えていることが。<br>そのまま進もう。例えば先ほどの plus メソッドくらいシンプルなものを仮実装する必要が本当にあるだろうか。<br>普通は、その必要はない。頭に浮かんだ明白な実装をただ単にコードに落とすだけだ。もしもレッドバーが出て驚いたら、あらためてもう少し歩幅を小さくしよう。</p><p>— テスト駆動開発</p></blockquote><h4 id="3-を渡したら-2-を返す"><a href="#3-を渡したら-2-を返す" class="headerlink" title="3 を渡したら 2 を返す"></a>3 を渡したら 2 を返す</h4><p>最初に定義した <strong>TODO リスト</strong> の内容は完了しましたがプログラムの一般化にはまだテストケースが足りないでしょう。3 を渡した場合のテストケースを追加します。</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>…​</td></tr><tr><td>0</td><td>1</td><td>1</td><td>2</td><td>…​</td></tr></tbody></table><ul><li><p><del>0 を渡したら 0 を返す</del></p></li><li><p><del>1 を渡したら 1 を返す</del></p></li><li><p><del>2 を渡したら 1 を返す</del></p></li><li><p><strong>3 を渡したら 2 を返す</strong></p></li></ul><p>テストケースを追加してテストを実施します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], fib(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストが失敗しました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 7598</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_fibonacci"</span>, &lt;Minitest::Reporters::Suite:0x000055c987498120 @name=<span class="string">"FibonacciTest"</span>&gt;, 0.00104286998976022]</span><br><span class="line"> test_fibonacci<span class="comment">#FibonacciTest (0.00s)</span></span><br><span class="line">        Expected: 2</span><br><span class="line">          Actual: 1</span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:17:<span class="keyword">in</span> `block <span class="keyword">in</span> test_fibonacci<span class="string">''</span></span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:16:<span class="keyword">in</span> `each<span class="string">'</span></span><br><span class="line"><span class="string">        test/fibonacci_test.rb:16:in `test_fibonacci'</span></span><br><span class="line"></span><br><span class="line">  1/1: [========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00160s</span><br><span class="line">1 tests, 4 assertions, 1 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>2 までは 1 を返すので条件分岐を追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt;= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>まだ、失敗したままです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 26066</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_fibonacci"</span>, &lt;Minitest::Reporters::Suite:0x0000562bc96ee330 @name=<span class="string">"Fibonacci"</span>&gt;, 0.0055934099946171045]</span><br><span class="line"> test_fibonacci<span class="comment">#Fibonacci (0.01s)</span></span><br><span class="line">        Expected: 2</span><br><span class="line">          Actual: 1</span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:24:<span class="keyword">in</span> `block <span class="keyword">in</span> test_fibonacci<span class="string">'</span></span><br><span class="line"><span class="string">        test/fibonacci_test.rb:23:in `each'</span></span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:23:<span class="keyword">in</span> `test_fibonacci<span class="string">''</span></span><br><span class="line"></span><br><span class="line">  1/1: [==========================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00882s</span><br><span class="line">1 tests, 4 assertions, 1 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>どの条件にも該当としない場合は 2 を返すように変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt;= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>グリーンになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 25117</span><br><span class="line"></span><br><span class="line">  1/1: [==========================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01680s</span><br><span class="line">1 tests, 4 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>ここでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'test: 3を渡したら2を返す'</span></span><br></pre></td></tr></table></figure><ul><li><p><del>0 を渡したら 0 を返す</del></p></li><li><p><del>1 を渡したら 1 を返す</del></p></li><li><p><del>2 を渡したら 1 を返す</del></p></li><li><p><del>3 を渡したら 2 を返す</del></p></li></ul><h4 id="フィボナッチ数計算"><a href="#フィボナッチ数計算" class="headerlink" title="フィボナッチ数計算"></a>フィボナッチ数計算</h4><p>そろそろゴールが見えてきました。<strong>TODO リスト</strong> を追加してフィボナッチ数計算アルゴリズムを完成させましょう。</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>…​</td></tr><tr><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>…​</td></tr></tbody></table><ul><li><p><del>0 を渡したら 0 を返す</del></p></li><li><p><del>1 を渡したら 1 を返す</del></p></li><li><p><del>2 を渡したら 1 を返す</del></p></li><li><p><del>3 を渡したら 2 を返す</del></p></li><li><p><strong>4 を渡したら 3 を返す</strong></p></li></ul><p><strong>テストファースト</strong> <strong>アサートファースト</strong> です。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt;= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], fib(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 34595</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_fibonacci"</span>, &lt;Minitest::Reporters::Suite:0x0000564fdbd6dfe0 @name=<span class="string">"Fibonacci"</span>&gt;, 0.005386559059843421]</span><br><span class="line"> test_fibonacci<span class="comment">#Fibonacci (0.01s)</span></span><br><span class="line">        Expected: 3</span><br><span class="line">          Actual: 2</span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:24:<span class="keyword">in</span> `block <span class="keyword">in</span> test_fibonacci<span class="string">'</span></span><br><span class="line"><span class="string">        test/fibonacci_test.rb:23:in `each'</span></span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:23:<span class="keyword">in</span> `test_fibonacci<span class="string">''</span></span><br><span class="line"></span><br><span class="line">  1/1: [==========================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01030s</span><br><span class="line">1 tests, 5 assertions, 1 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>最後に 2 を返すのではなく合計値をかえすのだから</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt;= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 10848</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_fibonacci"</span>, &lt;Minitest::Reporters::Suite:0x00005621247c9f48 @name=<span class="string">"Fibonacci"</span>&gt;, 0.0007573128677904606]</span><br><span class="line"> test_fibonacci<span class="comment">#Fibonacci (0.00s)</span></span><br><span class="line">        Expected: 3</span><br><span class="line">          Actual: 2</span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:24:<span class="keyword">in</span> `block <span class="keyword">in</span> test_fibonacci<span class="string">'</span></span><br><span class="line"><span class="string">        test/fibonacci_test.rb:23:in `each'</span></span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:23:<span class="keyword">in</span> `test_fibonacci<span class="string">''</span></span><br><span class="line"></span><br><span class="line">  1/1: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00130s</span><br><span class="line">1 tests, 5 assertions, 1 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>一つ前の <code>fib</code> の結果を足すのだから</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt;= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    fib(n - <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>グリーンになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 25629</span><br><span class="line"></span><br><span class="line">  1/1: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00467s</span><br><span class="line">1 tests, 5 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>ここでコミット…しないで今回は更に進めます。 <strong>TODO リスト</strong> を追加します。</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>…​</td></tr><tr><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>…​</td></tr></tbody></table><ul><li><p><del>0 を渡したら 0 を返す</del></p></li><li><p><del>1 を渡したら 1 を返す</del></p></li><li><p><del>2 を渡したら 1 を返す</del></p></li><li><p><del>3 を渡したら 2 を返す</del></p></li><li><p><del>4 を渡したら 3 を返す</del></p></li><li><p><strong>5 を渡したら 5 を返す</strong></p></li></ul><p>テストケースを追加して</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], fib(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>レッド</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 54754</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_fibonacci"</span>, &lt;Minitest::Reporters::Suite:0x000055c42397e108 @name=<span class="string">"Fibonacci"</span>&gt;, 0.00174815789796412]</span><br><span class="line"> test_fibonacci<span class="comment">#Fibonacci (0.00s)</span></span><br><span class="line">        Expected: 5</span><br><span class="line">          Actual: 4</span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:24:<span class="keyword">in</span> `block <span class="keyword">in</span> test_fibonacci<span class="string">'</span></span><br><span class="line"><span class="string">        test/fibonacci_test.rb:23:in `each'</span></span><br><span class="line">        <span class="built_in">test</span>/fibonacci_test.rb:23:<span class="keyword">in</span> `test_fibonacci<span class="string">''</span></span><br><span class="line"></span><br><span class="line">  1/1: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00237s</span><br><span class="line">1 tests, 6 assertions, 1 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>結局 1 つ前と 2 つ前の <code>fib</code> の結果を合計して返しているのだから</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt;= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>グリーン</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 8399</span><br><span class="line"></span><br><span class="line">  1/1: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00107s</span><br><span class="line">1 tests, 6 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>一般化ができたので 0 の場合と 1 の場合は与えらた値を返せば良くなったので</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>リファクター</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 42476</span><br><span class="line"></span><br><span class="line">  1/1: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00162s</span><br><span class="line">1 tests, 6 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>フィボナッチ数計算アルゴリズムが完成したのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'feat: フィボナッチ数計算'</span></span><br></pre></td></tr></table></figure><ul><li><p><del>0 を渡したら 0 を返す</del></p></li><li><p><del>1 を渡したら 1 を返す</del></p></li><li><p><del>2 を渡したら 1 を返す</del></p></li><li><p><del>3 を渡したら 2 を返す</del></p></li><li><p><del>4 を渡したら 3 を返す</del></p></li><li><p><del>5 を渡したら 5 を返す</del></p></li></ul><h3 id="リファクタリング-1"><a href="#リファクタリング-1" class="headerlink" title="リファクタリング"></a>リファクタリング</h3><blockquote><p>リファクタリング(名詞) 外部から見たときの振る舞いを保ちつつ、理解や修正が簡単になるように、ソフトウェアの内部構造を変化させること。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>リファクタリングする(動詞) 一連のリファクタリングを適用して、外部から見た振る舞いの変更なしに、ソフトウェアを再構築すること。</p><p>— リファクタリング(第 2 版</p></blockquote><p>アルゴリズムの実装は出来ましたがアプリケーションとしては不十分なので <strong>リファクタリング</strong> を適用してコードを <strong>動作するきれいなコード</strong> に洗練していきます。</p><h4 id="クラスの抽出"><a href="#クラスの抽出" class="headerlink" title="クラスの抽出"></a>クラスの抽出</h4><p>まず、テストケース内でメソッドを定義していますがこれでは一つのクラスでアルゴリズムの実行とテストの実行という２つの責務を <code>FibonacciTest</code> クラスが担当しています。 <strong>単一責任の原則</strong> に違反しているので <strong>クラスの抽出</strong> を実施して責務を分担させましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fib(n - <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], fib(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>Fibonacci</code> クラスを作成して <strong>クラスメソッド</strong> の <code>Fibonacci.fib</code> をコピー＆ペーストで作成します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], fib(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストが壊れていないことを確認したら <code>FibonacciTest</code> クラス内の <strong>クラスメソッド</strong> <code>FIbonacciTest.fib</code> を削除して <strong>フィクスチャー</strong> <code>setup</code> メソッドを作成して <strong>インスタンス変数</strong> <code>@fib</code> に <code>Fibonacci</code> クラスの参照を代入します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @fib.fib(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストが壊れていないかを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 40694</span><br><span class="line"></span><br><span class="line">  1/1: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00393s</span><br><span class="line">1 tests, 6 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p><strong>クラスの抽出</strong> の <strong>リファクタリング</strong> 適用が完了したのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: クラスの抽出'</span></span><br></pre></td></tr></table></figure><h4 id="変数名の変更"><a href="#変数名の変更" class="headerlink" title="変数名の変更"></a>変数名の変更</h4><p>続いて、 <code>Fibonacci</code> クラスに移動した <strong>クラスメソッド</strong> ですが引数が <code>n</code> というのは分かりづらいですね。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>ここは省略せず、引数の型を表す名前に変更して可読性を上げておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">fib</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fib(number - <span class="number">1</span>) + fib(number - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストが壊れていないか確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 37760</span><br><span class="line"></span><br><span class="line">  1/1: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00744s</span><br><span class="line">1 tests, 6 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>コミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: 変数名の変更'</span></span><br></pre></td></tr></table></figure><h4 id="メソッド名の変更"><a href="#メソッド名の変更" class="headerlink" title="メソッド名の変更"></a>メソッド名の変更</h4><p><code>Fibonacci</code> クラスの <strong>クラスメソッド</strong> <code>Fibonacci.fib</code> はフィボナッチ数を計算するメソッドですが名前が紛らわしいので <strong>メソッド名の変更</strong> を適用します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">fib</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fib(number - <span class="number">1</span>) + fib(number - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @fib.fib(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>インスタンスメソッド</strong> を <code>fib</code> から <code>calc</code> に変更します。今回は呼び出し先の <code>FibonacciTest</code> のテストコードも修正する必要があります。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">calc</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    calc(number - <span class="number">1</span>) + calc(number - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @fib.calc(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストが壊れていないか確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 15099</span><br><span class="line"></span><br><span class="line">  1/1: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00285s</span><br><span class="line">1 tests, 6 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p><strong>メソッド名の変更</strong> の適用が完了したのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: メソッド名の変更'</span></span><br></pre></td></tr></table></figure><h3 id="パフォーマンスチューニング"><a href="#パフォーマンスチューニング" class="headerlink" title="パフォーマンスチューニング"></a>パフォーマンスチューニング</h3><blockquote><p>心がけるべきことは、他のパフォーマンス分析とおなじように、実際のデータを使い、リアルな利用パターンを試し、プロファイリングを行ってからでないと、パフォーマンスを問題にする資格はない、ということだ。</p><p>— テスト駆動開発</p></blockquote><p>これまでのテストケースでは小さな値を使ってきましたが大きな値の場合のプログラムの挙動が問題無いか確認しておく必要があります <a href="http://www.suguru.jp/Fibonacci/Fib100.html" target="_blank" rel="noopener">１００番目までのフィボナッチ数列</a> を参考に大きな値の場合のテストケースを追加してアプリケーションのパフォーマンスを検証しましょう。</p><h4 id="メモ化によるパフォーマンス改善"><a href="#メモ化によるパフォーマンス改善" class="headerlink" title="メモ化によるパフォーマンス改善"></a>メモ化によるパフォーマンス改善</h4><p><strong>TODO リスト</strong> に新しいタスクを追加します。</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>…​</td><td>38</td><td>39</td><td>40</td><td>…​</td></tr><tr><td>0</td><td>1</td><td>…​</td><td>39088169</td><td>63245986</td><td>102334155</td><td>…​</td></tr></tbody></table><ul><li>大きな数値を計算する</li></ul><p>テストケースを追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.calc(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストを実行します</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 1160</span><br><span class="line"></span><br><span class="line">  2/2: [=========================================] 100% Time: 00:00:51, Time: 00:00:51</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 51.15914s</span><br><span class="line">2 tests, 7 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストが完了するのが随分遅くなってしまいました。これはアルゴリズムを改善する必要がありそうです。 まずは <strong>プロファイラ</strong> を使って実行状況を確認します。今回は <a href="https://docs.ruby-lang.org/ja/latest/library/profile.html" target="_blank" rel="noopener">profile ライブラリ</a> を使います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -r profile <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 42383</span><br><span class="line"></span><br><span class="line">  2/1: [======================                      ] 50% Time: 00:00:00,  ETA: 00:00:00</span><br></pre></td></tr></table></figure><p>処理が終わらないようなら <code>ctr-c</code> で強制終了すれば結果が出力されます。出力内容の <code>Fibonacci.calc</code> がフィボナッチ数計算メソッド実行部分です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  %   cumulative   self              self     total</span><br><span class="line"> time   seconds   seconds    calls  ms/call  ms/call  name</span><br><span class="line">192.39    25.50     25.50        2 12750.69 12750.69  Thread::Queue<span class="comment">#pop</span></span><br><span class="line"> 75.32    35.49      9.98   246940     0.04     1.65  Fibonacci.calc</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>再帰呼び出しが何度も実行された結果パフォーマンスを低下させているようです。ここは <a href="https://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%A2%E5%8C%96" target="_blank" rel="noopener">メモ化</a> を使ってパフォーマンスを改善させましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">calc</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= calc(number - <span class="number">1</span>, memo) + calc(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @fib.calc(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.calc(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>プロファイラ</strong> で確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -r profile <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 20468</span><br><span class="line"></span><br><span class="line">  2/2: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.04214s</span><br><span class="line">2 tests, 7 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line">  %   cumulative   self              self     total</span><br><span class="line"> time   seconds   seconds    calls  ms/call  ms/call  name</span><br><span class="line">...</span><br><span class="line"> 12.09     0.06      0.06        2    32.09    32.09  Thread::Queue<span class="comment">#pop</span></span><br><span class="line">...</span><br><span class="line">  1.33     0.26      0.01      105     0.07     1.41  Fibonacci.calc</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一気に再帰呼び出し回数が減りパフォーマンスを改善することが出来ましたのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'perf: メモ化によるパフォーマンス改善'</span></span><br></pre></td></tr></table></figure><h3 id="ベンチマーク"><a href="#ベンチマーク" class="headerlink" title="ベンチマーク"></a>ベンチマーク</h3><p>続いて、異なるフィボナッチ数計算アルゴリズムを実装してどのアルゴリズムを採用するべきかを <a href="https://ja.wikipedia.org/wiki/%E3%83%99%E3%83%B3%E3%83%81%E3%83%9E%E3%83%BC%E3%82%AF" target="_blank" rel="noopener">ベンチマーク</a> を取って判断したいと思います。</p><h4 id="ループ処理による実装"><a href="#ループ処理による実装" class="headerlink" title="ループ処理による実装"></a>ループ処理による実装</h4><p>まずはループ処理によるフィボナッチ数計算のアルゴリズムを実装します。以下が <strong>テストファースト</strong> <strong>アサートファースト</strong> で作成したコードです。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">calc</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= calc(number - <span class="number">1</span>, memo) + calc(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">calc2</span><span class="params">(number)</span></span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      a = b</span><br><span class="line">      b = c</span><br><span class="line">      c = a + b</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @fib.calc(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.calc(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_calc2</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.calc2(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb -n test_large_number_calc2 Started with run options -n test_large_number_calc2 --seed 18167</span><br><span class="line"></span><br><span class="line">  1/1: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00123s</span><br><span class="line">1 tests, 1 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストが通ることを確認したらコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'feat: ループ処理による実装'</span></span><br></pre></td></tr></table></figure><h4 id="一般項による実装"><a href="#一般項による実装" class="headerlink" title="一般項による実装"></a>一般項による実装</h4><p><a href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A3%E3%83%9C%E3%83%8A%E3%83%83%E3%83%81%E6%95%B0#%E4%B8%80%E8%88%AC%E9%A0%85" target="_blank" rel="noopener">フィボナッチ数列の一般項</a> で定義されているのでこれを <strong>テストファースト</strong> <strong>アサートファースト</strong> で実装します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">calc</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= calc(number - <span class="number">1</span>, memo) + calc(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">calc2</span><span class="params">(number)</span></span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      a = b</span><br><span class="line">      b = c</span><br><span class="line">      c = a + b</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">calc3</span><span class="params">(number)</span></span></span><br><span class="line">    a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @fib.calc(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.calc(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_calc2</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.calc2(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_calc3</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.calc3(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb -n test_large_number_calc3</span><br><span class="line">Started with run options -n test_large_number_calc3 --seed 55659</span><br><span class="line"></span><br><span class="line">  1/1: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00111s</span><br><span class="line">1 tests, 1 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストが壊れていないか確認したらコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'feat: 一般項による実装'</span></span><br></pre></td></tr></table></figure><h4 id="メソッド名の変更-1"><a href="#メソッド名の変更-1" class="headerlink" title="メソッド名の変更"></a>メソッド名の変更</h4><p>各アルゴリズムのメソッド名が <code>calc</code> では分かりづらいので <strong>メソッド名の変更</strong> を適用して <strong>リファクタリング</strong> します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">recursive</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= recursive(number - <span class="number">1</span>, memo) + recursive(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">calc2</span><span class="params">(number)</span></span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      a = b</span><br><span class="line">      b = c</span><br><span class="line">      c = a + b</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">calc3</span><span class="params">(number)</span></span></span><br><span class="line">    a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @fib.recursive(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_recursive</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.recursive(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_calc2</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.calc2(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_calc3</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.calc3(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>まず、最初に実装した再帰呼び出しアルゴリズムのメソッド名を <code>Fibonacci.calc</code> から <code>Fibonacci.recursive</code> に変更します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 15174</span><br><span class="line"></span><br><span class="line">  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00137s</span><br><span class="line">4 tests, 9 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>続いて、ループアルゴリズムのメソッド名を <code>Fibonacci.calc2</code> から <code>Fibonacci.loop</code> に変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">recursive</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= recursive(number - <span class="number">1</span>, memo) + recursive(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">loop</span><span class="params">(number)</span></span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      a = b</span><br><span class="line">      b = c</span><br><span class="line">      c = a + b</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">calc3</span><span class="params">(number)</span></span></span><br><span class="line">    a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>) ** number</span><br><span class="line">    b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>) ** number</span><br><span class="line">    ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @fib.recursive(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_recursive</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.recursive(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_loop</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.loop(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_calc3</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.calc3(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 28586</span><br><span class="line"></span><br><span class="line">  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00188s</span><br><span class="line">4 tests, 9 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>最後に、一般項アルゴリズムのメソッド名を <code>Fibonacci.calc3</code> から <code>Fibonacci.general_term</code> に変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">recursive</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= recursive(number - <span class="number">1</span>, memo) + recursive(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">loop</span><span class="params">(number)</span></span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      a = b</span><br><span class="line">      b = c</span><br><span class="line">      c = a + b</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">general_term</span><span class="params">(number)</span></span></span><br><span class="line">    a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>) ** number</span><br><span class="line">    b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>) ** number</span><br><span class="line">    ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @fib.recursive(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_recursive</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.recursive(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_loop</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.loop(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_general_term</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.general_term(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 42729</span><br><span class="line"></span><br><span class="line">  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00736s</span><br><span class="line">4 tests, 9 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>変更によりテストが壊れていないことを確認したらコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: メソッド名の変更'</span></span><br></pre></td></tr></table></figure><h4 id="サブクラスによるタイプコードの置き換え-1"><a href="#サブクラスによるタイプコードの置き換え-1" class="headerlink" title="サブクラスによるタイプコードの置き換え 1"></a>サブクラスによるタイプコードの置き換え 1</h4><p>現在の <code>Fibonacci</code> クラスはアルゴリズムを追加する場合クラスを編集する必要があります。その際に既存のアルゴリズムを壊してしまう可能性があります。これは <strong>オープン・クローズド原則</strong> に違反しているので <strong>サブクラスによるタイプコードの置き換え</strong> を適用してアルゴリズムを <strong>カプセル化</strong> して、安全に追加・変更できる設計に <strong>リファクタリング</strong> します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">recursive</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= recursive(number - <span class="number">1</span>, memo) + recursive(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">loop</span><span class="params">(number)</span></span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|_i|</span></span><br><span class="line">      a = b</span><br><span class="line">      b = c</span><br><span class="line">      c = a + b</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">general_term</span><span class="params">(number)</span></span></span><br><span class="line">    a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciRecursive</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= calc(number - <span class="number">1</span>, memo) + calc(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">    @recursive = FibonacciRecursive.new</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @recursive.calc(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_recursive</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @recursive.calc(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_loop</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.loop(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_general_term</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.general_term(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 12762</span><br><span class="line"></span><br><span class="line">  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00130s</span><br><span class="line">4 tests, 9 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>まず、<strong>クラスの抽出</strong> により再帰呼び出しアルゴリズムの <strong>メソッドオブジェクト</strong> <code>FibonacciRecursive</code> クラスを作成して テスト <strong>フィクスチャー</strong> で <strong>インスタンス化</strong> して <strong>インスタンス変数</strong> にオブジェクトの参照を代入します。ここではメソッドの呼び出しが <code>exec</code> に変更されているのでテストコードもそれに合わせて変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">loop</span><span class="params">(number)</span></span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|_i|</span></span><br><span class="line">      a = b</span><br><span class="line">      b = c</span><br><span class="line">      c = a + b</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">general_term</span><span class="params">(number)</span></span></span><br><span class="line">    a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciRecursive</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= exec(number - <span class="number">1</span>, memo) + exec(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">    @recursive = FibonacciRecursive.new</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @recursive.exec(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_recursive</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @recursive.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_loop</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.loop(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_general_term</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.general_term(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>まだ、 仕掛ですがコードが壊れていない状態でコミットをしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor(WIP): サブクラスによるタイプコードの置き換え'</span></span><br></pre></td></tr></table></figure><h4 id="サブクラスによるタイプコードの置き換え-2"><a href="#サブクラスによるタイプコードの置き換え-2" class="headerlink" title="サブクラスによるタイプコードの置き換え 2"></a>サブクラスによるタイプコードの置き換え 2</h4><p>続いて、 <strong>メソッドオブジェクト</strong> <code>FibonacciLoop</code> クラスを抽出します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">general_term</span><span class="params">(number)</span></span></span><br><span class="line">    a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciRecursive</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= exec(number - <span class="number">1</span>, memo) + exec(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciLoop</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|_i|</span></span><br><span class="line">      a = b</span><br><span class="line">      b = c</span><br><span class="line">      c = a + b</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">    @recursive = FibonacciRecursive.new</span><br><span class="line">    @loop = FibonacciLoop.new</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @recursive.exec(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_recursive</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @recursive.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_loop</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @loop.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_general_term</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @fib.general_term(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rbStarted with run options --seed 33171</span><br><span class="line"></span><br><span class="line">  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00337s</span><br><span class="line">4 tests, 9 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>コミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor(WIP): サブクラスによるタイプコードの置き換え'</span></span><br></pre></td></tr></table></figure><h4 id="サブクラスによるタイプコードの置き換え-3"><a href="#サブクラスによるタイプコードの置き換え-3" class="headerlink" title="サブクラスによるタイプコードの置き換え 3"></a>サブクラスによるタイプコードの置き換え 3</h4><p>続いて、 <strong>メソッドオブジェクト</strong> <code>FibonacciGeneralTerm</code> クラスを抽出します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciRecursive</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= exec(number - <span class="number">1</span>, memo) + exec(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciLoop</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|_i|</span></span><br><span class="line">      a = b</span><br><span class="line">      b = c</span><br><span class="line">      c = a + b</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciGeneralTerm</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">    a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci</span><br><span class="line">    @recursive = FibonacciRecursive.new</span><br><span class="line">    @loop = FibonacciLoop.new</span><br><span class="line">    @general_term = FibonacciGeneralTerm.new</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @recursive.exec(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_recursive</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @recursive.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_loop</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @loop.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_general_term</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @general_term.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rbStarted with run options --seed 65058</span><br><span class="line"></span><br><span class="line">  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01576s</span><br><span class="line">4 tests, 9 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>コミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor(WIP): サブクラスによるタイプコードの置き換え'</span></span><br></pre></td></tr></table></figure><h4 id="サブクラスによるタイプコードの置き換え-4"><a href="#サブクラスによるタイプコードの置き換え-4" class="headerlink" title="サブクラスによるタイプコードの置き換え 4"></a>サブクラスによるタイプコードの置き換え 4</h4><p>最後に、 <code>Fibonacci</code> クラスに <strong>Strategy パターン</strong> を適用して各アルゴリズムの実行を <strong>委譲</strong> します。</p><p><a href="https://ja.wikipedia.org/wiki/Strategy_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" target="_blank" rel="noopener">Strategy パターン</a></p><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/cef7f740-eff0-9fdb-ca0c-42cc34232410.png" alt="diag-3f9e53f62bd2f1b3bfe0f476521170ca.png"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(algorithm)</span></span></span><br><span class="line">    @algorithm = algorithm</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">    @algorithm.exec(number)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciRecursive</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= exec(number - <span class="number">1</span>, memo) + exec(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciLoop</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|_i|</span></span><br><span class="line">      a = b</span><br><span class="line">      b = c</span><br><span class="line">      c = a + b</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciGeneralTerm</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">    a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @recursive = Fibonacci.new(FibonacciRecursive.new)</span><br><span class="line">    @loop = Fibonacci.new(FibonacciLoop.new)</span><br><span class="line">    @general_term = Fibonacci.new(FibonacciGeneralTerm.new)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @recursive.exec(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_recursive</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @recursive.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_loop</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @loop.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_general_term</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @general_term.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>サブクラスによるタイプコードの置き換え</strong> の適用が完了したのでコメントから <code>(WIP)</code> を外してコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'refactor: サブクラスによるタイプコードの置き換え'</span></span><br></pre></td></tr></table></figure><h4 id="ファイル分割"><a href="#ファイル分割" class="headerlink" title="ファイル分割"></a>ファイル分割</h4><p>続いてテストとアプリケーションを分割します。 <code>lib</code> ディレクトリを作成して <code>fibonacci.rb</code> ファイルを追加してアプリケーションコード部分をカット＆ペーストします。</p><p><code>lib/fibonacci.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fibonacci Calcultor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(algorithm)</span></span></span><br><span class="line">    @algorithm = algorithm</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">    @algorithm.exec(number)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fibonacci Recursive algorithm</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciRecursive</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    memo[number] <span class="params">||</span>= exec(number - <span class="number">1</span>, memo) + exec(number - <span class="number">2</span>, memo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fibonacci Loop algorithm</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciLoop</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|_i|</span></span><br><span class="line">      a = b</span><br><span class="line">      b = c</span><br><span class="line">      c = a + b</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fibonacci General Term algorithm</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciGeneralTerm</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">    a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">    ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>続いて、分割した <code>fibonacci.rb</code> ファイル内に定義されたクラスを読み込むようにテストクラスを修正します。 ファイルの読み込みには <code>require</code> を使います。</p><p><code>test/fibonacci_test.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fib = Fibonacci.new(FibonacciRecursive.new)</span><br><span class="line">    @recursive = Fibonacci.new(FibonacciRecursive.new)</span><br><span class="line">    @loop = Fibonacci.new(FibonacciLoop.new)</span><br><span class="line">    @general_term = Fibonacci.new(FibonacciGeneralTerm.new)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @fib.calc(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_recursive</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @recursive.calc(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_loop</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @loop.calc(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_general_term</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @general_term.calc(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_test.rb</span><br><span class="line">Started with run options --seed 39723</span><br><span class="line"></span><br><span class="line">  4/4: [==========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00227s</span><br><span class="line">4 tests, 9 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>分割したファイルからクラスが読み込まれテストが通ることを確認したらコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'feat: ファイル分割'</span></span><br></pre></td></tr></table></figure><h4 id="ベンチマークの実施"><a href="#ベンチマークの実施" class="headerlink" title="ベンチマークの実施"></a>ベンチマークの実施</h4><p><strong>ベンチマーク</strong> を実施する準備が出来たので <code>test</code> ディレクトリに以下の <code>fibonacci_benchmark.rb</code> ファイルを追加します。</p><p><code>test/fibonacci_benchmark.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/benchmark'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTestBenchmark</span> &lt; Minitest::Benchmark</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @recursive = Fibonacci.new(FibonacciRecursive.new)</span><br><span class="line">    @loop = Fibonacci.new(FibonacciLoop.new)</span><br><span class="line">    @general_term = Fibonacci.new(FibonacciGeneralTerm.new)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bench_recursive</span></span></span><br><span class="line">    assert_performance_constant <span class="keyword">do</span> <span class="params">|_n|</span></span><br><span class="line">      <span class="number">1000</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">        @recursive.exec(i)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bench_loop</span></span></span><br><span class="line">    assert_performance_constant <span class="keyword">do</span> <span class="params">|_n|</span></span><br><span class="line">      <span class="number">1000</span>.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">        @loop.exec(i)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bench_general_term</span></span></span><br><span class="line">    assert_performance_constant <span class="keyword">do</span> <span class="params">|_n|</span></span><br><span class="line">      <span class="number">1000</span>.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">        @general_term.exec(i)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>ベンチマーク</strong> を実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fibonacci_benchmark.rb</span><br><span class="line">Run options: --seed 1009</span><br><span class="line"></span><br><span class="line"><span class="comment"># Running:</span></span><br><span class="line"></span><br><span class="line">bench_recursive  0.438420        0.436003        0.437170        0.453267        0.428123</span><br><span class="line">.bench_loop      0.157816        0.160366        0.159504        0.160275        0.162165</span><br><span class="line">.bench_general_term      0.001215        0.001200        0.001255        0.001204      0.001184</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 3.074021s, 0.9759 runs/s, 0.9759 assertions/s.</span><br><span class="line"></span><br><span class="line">3 runs, 3 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>結果を見たところ、再帰処理アルゴリズムが一番遅く、一般項アルゴリズムが一番早く実行されるようです。</p><p><strong>ベンチマーク</strong> を実施してアルゴリズムの性能を比較できたのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'perf: ベンチマークの実施'</span></span><br></pre></td></tr></table></figure><h3 id="モジュール分割"><a href="#モジュール分割" class="headerlink" title="モジュール分割"></a>モジュール分割</h3><h4 id="アプリケーションのリリース"><a href="#アプリケーションのリリース" class="headerlink" title="アプリケーションのリリース"></a>アプリケーションのリリース</h4><p><strong>動作するきれいなコード</strong> をリリースするにあたってクラスモジュールごとにファイル分割して <strong>エントリーポイント</strong> からアプリケーションを実行できるようにしたいと思います。</p><pre><code>/  |--lib/      |       -- fibonacci.rb  |--test/      |       -- fibonacci_test.rb       -- fibonacci_benchmark.rb</code></pre><p>まず、 <code>lib</code> に <code>fibonacci</code> フォルダを追加します。クラスモジュールは <code>Fibonacci</code> の <strong>名前空間</strong> で管理するようにします。</p><p><code>lib/fibonacci/command.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="comment"># Fibonacci Calcultor</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Command</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(algorithm)</span></span></span><br><span class="line">      @algorithm = algorithm</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">      @algorithm.exec(number)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>lib/fibonacci/recursive.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="comment"># Fibonacci Recursive algorithm</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Recursive</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      memo[number] <span class="params">||</span>= exec(number - <span class="number">1</span>, memo) + exec(number - <span class="number">2</span>, memo)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>lib/fibonacci/loop.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="comment"># Fibonacci Loop algorithm</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Loop</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">      a = <span class="number">0</span></span><br><span class="line">      b = <span class="number">1</span></span><br><span class="line">      c = <span class="number">0</span></span><br><span class="line">      (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|_i|</span></span><br><span class="line">        a = b</span><br><span class="line">        b = c</span><br><span class="line">        c = a + b</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      c</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>lib/fibonacci/general_term.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="comment"># Fibonacci General Term algorithm</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">GeneralTerm</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">      a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">      b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">      ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>fibonacci.rb</code> は分割したクラスモジュールを読み込むエントリーポイントに変更します。</p><p><code>lib/fibonacci.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci/command'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci/recursive'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci/loop'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci/general_term'</span></span><br></pre></td></tr></table></figure><p><strong>名前空間</strong> を変更して呼び出すクラスが変わったのでテストとベンチマークを修正します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @recursive = Fibonacci.new(FibonacciRecursive.new)</span><br><span class="line">    @loop = Fibonacci.new(FibonacciLoop.new)</span><br><span class="line">    @general_term = Fibonacci.new(FibonacciGeneralTerm.new)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>まず、テストを修正してテストが通ることを確認します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @recursive = Fibonacci::Command.new(Fibonacci::Recursive.new)</span><br><span class="line">    @loop = Fibonacci::Command.new(Fibonacci::Loop.new)</span><br><span class="line">    @general_term = Fibonacci::Command.new(Fibonacci::GeneralTerm.new)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTestBenchmark</span> &lt; Minitest::Benchmark</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @recursive = Fibonacci.new(FibonacciRecursive.new)</span><br><span class="line">    @loop = Fibonacci.new(FibonacciLoop.new)</span><br><span class="line">    @general_term = Fibonacci.new(FibonacciGeneralTerm.new)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>続いてベンチマークを修正して実行できることを確認します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTestBenchmark</span> &lt; Minitest::Benchmark</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @recursive = Fibonacci::Command.new(Fibonacci::Recursive.new)</span><br><span class="line">    @loop = Fibonacci::Command.new(Fibonacci::Loop.new)</span><br><span class="line">    @general_term = Fibonacci::Command.new(Fibonacci::GeneralTerm.new)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>仕上げはコマンドラインから実行できるようにします。 ルート直下に <code>main.rb</code> を追加して以下のコードを追加します。 ここでは <strong>ベンチマーク</strong> で一番良い結果の出た一般項のアルゴリズムを使うことにします。</p><p><code>main.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci'</span></span><br><span class="line"></span><br><span class="line">number = ARGV[<span class="number">0</span>].to_i</span><br><span class="line">command = Fibonacci::Command.new(Fibonacci::GeneralTerm.new)</span><br><span class="line">puts command.exec(number)</span><br></pre></td></tr></table></figure><p>コマンドラインから引数に番号を指定して実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb 0</span><br><span class="line">0</span><br><span class="line">$ ruby main.rb 1</span><br><span class="line">1</span><br><span class="line">$ ruby main.rb 2</span><br><span class="line">1</span><br><span class="line">$ ruby main.rb 3</span><br><span class="line">2</span><br><span class="line">$ ruby main.rb 4</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>アプリケーションの完成したのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'feat: モジュール分割'</span></span><br></pre></td></tr></table></figure><h4 id="アプリケーションの構成"><a href="#アプリケーションの構成" class="headerlink" title="アプリケーションの構成"></a>アプリケーションの構成</h4><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/c3d5fce8-fe15-f5a3-56d0-465ff4f9155f.png" alt="diag-7e042e6c62bb11af0c26498efef6d39b.png"></p><pre><code>/main.rb  |--lib/      |       -- fibonacci.rb     fibonacci/      |       -- command.rb       -- general_term.rb       -- loop.rb       -- recursive.rb  |--test/      |       -- fibonacci_test.rb       -- fibonacci_benchmark.rb</code></pre><p><strong>/main.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci'</span></span><br><span class="line"></span><br><span class="line">number = ARGV[<span class="number">0</span>].to_i</span><br><span class="line">command = Fibonacci::Command.new(Fibonacci::GeneralTerm.new)</span><br><span class="line">puts command.exec(number)</span><br></pre></td></tr></table></figure><p><strong>/lib/fibonacci.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci/command'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci/recursive'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci/loop'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci/general_term'</span></span><br></pre></td></tr></table></figure><p><strong>/lib/fibonacci/command.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="comment"># Fibonacci Calcultor</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Command</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(algorithm)</span></span></span><br><span class="line">      @algorithm = algorithm</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">      @algorithm.exec(number)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/fibonacci/recursive.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="comment"># Fibonacci Recursive algorithm</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Recursive</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number, memo = &#123;&#125;)</span></span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> number.zero?</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      memo[number] <span class="params">||</span>= exec(number - <span class="number">1</span>, memo) + exec(number - <span class="number">2</span>, memo)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/fibonacci/loop.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="comment"># Fibonacci Loop algorithm</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Loop</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">      a = <span class="number">0</span></span><br><span class="line">      b = <span class="number">1</span></span><br><span class="line">      c = <span class="number">0</span></span><br><span class="line">      (<span class="number">0</span>...number).each <span class="keyword">do</span> <span class="params">|_i|</span></span><br><span class="line">        a = b</span><br><span class="line">        b = c</span><br><span class="line">        c = a + b</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      c</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/lib/fibonacci/general_term.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Fibonacci</span></span></span><br><span class="line">  <span class="comment"># Fibonacci General Term algorithm</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">GeneralTerm</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(number)</span></span></span><br><span class="line">      a = ((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">      b = ((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>)**number</span><br><span class="line">      ((a - b) / Math.sqrt(<span class="number">5</span>)).round</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/test/fibonacci_test.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @recursive = Fibonacci::Command.new(Fibonacci::Recursive.new)</span><br><span class="line">    @loop = Fibonacci::Command.new(Fibonacci::Loop.new)</span><br><span class="line">    @general_term = Fibonacci::Command.new(Fibonacci::GeneralTerm.new)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_fibonacci</span></span></span><br><span class="line">    cases = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">5</span>]]</span><br><span class="line">    cases.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      assert_equal i[<span class="number">1</span>], @recursive.exec(i[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_recursive</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @recursive.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_loop</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @loop.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_large_number_general_term</span></span></span><br><span class="line">    assert_equal <span class="number">102_334_155</span>, @general_term.exec(<span class="number">40</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/test/fibonacci_benchmark.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/benchmark'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fibonacci'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciTestBenchmark</span> &lt; Minitest::Benchmark</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @recursive = Fibonacci::Command.new(Fibonacci::Recursive.new)</span><br><span class="line">    @loop = Fibonacci::Command.new(Fibonacci::Loop.new)</span><br><span class="line">    @general_term = Fibonacci::Command.new(Fibonacci::GeneralTerm.new)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bench_recursive</span></span></span><br><span class="line">    assert_performance_constant <span class="keyword">do</span> <span class="params">|_n|</span></span><br><span class="line">      <span class="number">1000</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">        @recursive.exec(i)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bench_loop</span></span></span><br><span class="line">    assert_performance_constant <span class="keyword">do</span> <span class="params">|_n|</span></span><br><span class="line">      <span class="number">1000</span>.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">        @loop.exec(i)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bench_general_term</span></span></span><br><span class="line">    assert_performance_constant <span class="keyword">do</span> <span class="params">|_n|</span></span><br><span class="line">      <span class="number">1000</span>.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">        @general_term.exec(i)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="参考図書"><a href="#参考図書" class="headerlink" title="参考図書"></a>参考図書</h2><ul><li><p>テスト駆動開発 Kent Beck (著), 和田 卓人 (翻訳): オーム社; 新訳版 (2017/10/14)</p></li><li><p>新装版 リファクタリング―既存のコードを安全に改善する― (OBJECT TECHNOLOGY SERIES) Martin<br>Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章 (翻訳), その他: オーム社; 新装版<br>(2014/7/26)</p></li><li><p>リファクタリング(第 2 版): 既存のコードを安全に改善する (OBJECT TECHNOLOGY SERIES) Martin<br>Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章 (翻訳), その他: オーム社; 第 2 版<br>(2019/12/1)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
          <category> プログラミング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> テスト駆動開発 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>テスト駆動開発から始めるRuby入門 ~ソフトウェア開発の三種の神器を準備する~</title>
      <link href="/2020/04/17/1587440287/"/>
      <url>/2020/04/17/1587440287/</url>
      
        <content type="html"><![CDATA[<h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p>この記事は <a href="https://k2works.github.io/2020/04/16/1587009564/">テスト駆動開発から始める Ruby 入門 - 2 時間で TDD とリファクタリングのエッセンスを体験する -</a> の続編です。</p><a id="more"></a><h2 id="自動化から始めるテスト駆動開発"><a href="#自動化から始めるテスト駆動開発" class="headerlink" title="自動化から始めるテスト駆動開発"></a>自動化から始めるテスト駆動開発</h2><p>エピソード 1 ではテスト駆動開発のゴールが <strong>動作するきれいなコード</strong> であることを学びました。では、良いコードを書き続けるためには何が必要になるでしょうか？それは<a href="https://t-wada.hatenablog.jp/entry/clean-code-that-works" target="_blank" rel="noopener">ソフトウェア開発の三種の神器</a>と呼ばれるものです。</p><blockquote><p>今日のソフトウェア開発の世界において絶対になければならない 3 つの技術的な柱があります。<br>三本柱と言ったり、三種の神器と言ったりしていますが、それらは</p><ul><li><p>バージョン管理</p></li><li><p>テスティング</p></li><li><p>自動化</p></li></ul><p>の 3 つです。</p><p>— <a href="https://t-wada.hatenablog.jp/entry/clean-code-that-works" target="_blank" rel="noopener">https://t-wada.hatenablog.jp/entry/clean-code-that-works</a></p></blockquote><p><strong>バージョン管理</strong> と <strong>テスティング</strong> に関してはエピソード 1 で触れました。本エピソードでは最後の <strong>自動化</strong> に関しての解説と次のエピソードに備えたセットアップ作業を実施しておきたいと思います。ですがその前に <strong>バージョン管理</strong> で 1 つだけ解説しておきたいことがありますのでそちらから進めて行きたいと思います。</p><h3 id="コミットメッセージ"><a href="#コミットメッセージ" class="headerlink" title="コミットメッセージ"></a>コミットメッセージ</h3><p>これまで作業の区切りにごとにレポジトリにコミットしていましたがその際に以下のような書式でメッセージを書いていました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">'refactor: メソッドの抽出'</span></span><br></pre></td></tr></table></figure><p>この書式は<br><a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#type" target="_blank" rel="noopener">Angular ルール</a>に従っています。具体的には、それぞれのコミットメッセージはヘッダ、ボディ、フッタで構成されています。ヘッダはタイプ、スコープ、タイトルというフォーマットで構成されています。</p><pre><code>&lt;タイプ&gt;(&lt;スコープ&gt;): &lt;タイトル&gt;&lt;空行&gt;&lt;ボディ&gt;&lt;空行&gt;&lt;フッタ&gt;</code></pre><p>ヘッダは必須です。 ヘッダのスコープは任意です。 コミットメッセージの長さは 50 文字までにしてください。</p><p>(そうすることでその他の Git ツールと同様に GitHub 上で読みやすくなります。)</p><p>コミットのタイプは次を用いて下さい。</p><ul><li><p>feat: A new feature (新しい機能)</p></li><li><p>fix: A bug fix (バグ修正)</p></li><li><p>docs: Documentation only changes (ドキュメント変更のみ)</p></li><li><p>style: Changes that do not affect the meaning of the code<br>(white-space, formatting, missing semi-colons, etc) (コードに影響を与えない変更)</p></li><li><p>refactor: A code change that neither fixes a bug nor adds a feature<br>(機能追加でもバグ修正でもないコード変更)</p></li><li><p>perf: A code change that improves performance (パフォーマンスを改善するコード変更)</p></li><li><p>test: Adding missing or correcting existing tests<br>(存在しないテストの追加、または既存のテストの修正)</p></li><li><p>chore: Changes to the build process or auxiliary tools and libraries<br>such as documentation generation<br>(ドキュメント生成のような、補助ツールやライブラリやビルドプロセスの変更)</p></li></ul><p>コミットメッセージにつけるプリフィックスに関しては <a href="https://qiita.com/numanomanu/items/45dd285b286a1f7280ed" target="_blank" rel="noopener">【今日からできる】コミットメッセージに 「プレフィックス」をつけるだけで、開発効率が上がった話</a>を参照ください。</p><h3 id="パッケージマネージャ"><a href="#パッケージマネージャ" class="headerlink" title="パッケージマネージャ"></a>パッケージマネージャ</h3><p>では <strong>自動化</strong> の準備に入りたいのですがそのためにはいくつかの外部プログラムを利用する必要があります。そのためのツールが <strong>RubyGems</strong> です。</p><blockquote><p>RubyGems とは、Ruby で記述されたサードパーティ製のライブラリを管理するためのツールで、RubyGems で扱うライブラリを gem パッケージと呼びます。</p><p>— かんたん Ruby</p></blockquote><p><strong>RubyGems</strong> はすでに何度か使っています。例えばエピソード 1 の初めの <code>minitest-reporters</code><br>のインストールなどです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install minitest-reporters</span><br></pre></td></tr></table></figure><p>では、これからもこのようにして必要な外部プログラムを一つ一つインストールしていくのでしょうか？また、開発用マシンを変えた時にも同じことを繰り返さないといけないのでしょうか？面倒ですよね。そのような面倒なことをしないで済む仕組みが Ruby には用意されています。それが <strong>Bundler</strong> です。</p><blockquote><p>Bundler とは、作成したアプリケーションがどの gem パッケージに依存しているか、そしてインストールしているバージョンはいくつかという情報を管理するための gem パッケージです。</p><p>— かんたん Ruby</p></blockquote><p><strong>Bundler</strong> をインストールして gem パッケージを束ねましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gem install bundler</span><br><span class="line">$ bundle init</span><br></pre></td></tr></table></figure><p><code>Gemfile</code> が作成されます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line">source <span class="string">"https://rubygems.org"</span></span><br><span class="line"></span><br><span class="line">git_source(<span class="symbol">:github</span>) &#123;<span class="params">|repo_name|</span> <span class="string">"https://github.com/<span class="subst">#&#123;repo_name&#125;</span>"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># gem "rails"</span></span><br></pre></td></tr></table></figure><p><code># gem &quot;rails&quot;</code> の部分を以下の様に書き換えます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line">source <span class="string">"https://rubygems.org"</span></span><br><span class="line"></span><br><span class="line">git_source(<span class="symbol">:github</span>) &#123;<span class="params">|repo_name|</span> <span class="string">"https://github.com/<span class="subst">#&#123;repo_name&#125;</span>"</span> &#125;</span><br><span class="line"></span><br><span class="line">gem <span class="string">'rubocop'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>書き換えたら <code>bundle install</code> で gem パッケージをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ bundle install</span><br><span class="line">Fetching gem metadata from https://rubygems.org/....................</span><br><span class="line">Resolving dependencies...</span><br><span class="line">Using ast 2.4.0</span><br><span class="line">Using bundler 2.1.4</span><br><span class="line">Using jaro_winkler 1.5.4</span><br><span class="line">Using parallel 1.19.1</span><br><span class="line">Fetching parser 2.7.0.2</span><br><span class="line">Installing parser 2.7.0.2</span><br><span class="line">Using rainbow 3.0.0</span><br><span class="line">Using ruby-progressbar 1.10.1</span><br><span class="line">Fetching unicode-display_width 1.6.1</span><br><span class="line">Installing unicode-display_width 1.6.1</span><br><span class="line">Fetching rubocop 0.79.0</span><br><span class="line">Installing rubocop 0.79.0</span><br><span class="line">Bundle complete! 1 Gemfile dependency, 9 gems now installed.</span><br><span class="line">Use `bundle info [gemname]` to see <span class="built_in">where</span> a bundled gem is installed.</span><br></pre></td></tr></table></figure><p>これで次の準備ができました。</p><h3 id="静的コード解析"><a href="#静的コード解析" class="headerlink" title="静的コード解析"></a>静的コード解析</h3><p>良いコードを書き続けるためにはコードの品質を維持していく必要があります。エピソード 1 では <strong>テスト駆動開発</strong> によりプログラムを動かしながら品質の改善していきました。出来上がったコードに対する品質チェックの方法として <strong>静的コード解析</strong> があります。Ruby 用 <strong>静的コード解析</strong> ツール<a href="https://github.com/rubocop-hq/rubocop" target="_blank" rel="noopener">RuboCop</a> を使って確認してみましょう。プログラムは先程 <strong>Bundler</strong> を使ってインストールしたので以下のコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> $ rubocop</span><br><span class="line">Inspecting 5 files</span><br><span class="line">CCCWW</span><br><span class="line"></span><br><span class="line">Offenses:</span><br><span class="line"></span><br><span class="line">Gemfile:3:8: C: Style/StringLiterals: Prefer single-quoted strings when you don<span class="string">'t need string interpolation or special symbols.</span></span><br><span class="line"><span class="string">source "https://rubygems.org"</span></span><br><span class="line"><span class="string">       ^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line"><span class="string">Gemfile:5:21: C: Layout/SpaceInsideBlockBraces: Space between &#123; and | missing.</span></span><br><span class="line"><span class="string">git_source(:github) &#123;|repo_name| "https://github.com/#&#123;repo_name&#125;" &#125;</span></span><br><span class="line"><span class="string">                    ^^</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>なにかいろいろ出てきましたね。RuboCop の詳細に関しては <a href="https://qiita.com/tomohiii/items/1a17018b5a48b8284a8b" target="_blank" rel="noopener">RuboCop is 何？</a>を参照ください。<code>--lint</code> オプションをつけて実施してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop --lint</span><br><span class="line">Inspecting 5 files</span><br><span class="line">...W.</span><br><span class="line"></span><br><span class="line">Offenses:</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>/fizz_buzz_test.rb:109:7: : Parenthesize the param %w[2 4 13 3 1 10].sort &#123; |a, b| a.to_i &lt;=&gt; b.to_i &#125; to make sure that the block will be associated with the %w[2 4 13 3 1 10].sort method call.</span><br><span class="line">      assert_equal %w[1 2 3 4 10 13], ...</span><br><span class="line">      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"><span class="built_in">test</span>/fizz_buzz_test.rb:111:7: W: Lint/AmbiguousBlockAssociation: Parenthesize the param %w[2 4 13 3 1 10].sort &#123; |b, a| a.to_i &lt;=&gt; b.to_i &#125; to make sure that the block will be associated with the %w[2 4 13 3 1 10].sort method call.</span><br><span class="line">      assert_equal %w[13 10 4 3 2 1], ...</span><br><span class="line">      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line"></span><br><span class="line">5 files inspected, 2 offenses detected</span><br></pre></td></tr></table></figure><p>また何やら出てきましたね。 <a href="https://rubocop.readthedocs.io/en/latest/cops_lint/#lintambiguousblockassociation" target="_blank" rel="noopener">W:Lint/AmbiguousBlockAssociation</a>のメッセージを調べたところ、<code>fizz_buzz_test.rb</code> の以下の学習用テストコードは書き方がよろしくないようですね。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定した評価式で並び変えた配列を返す</span></span><br><span class="line">        assert_equal <span class="string">%w[1 10 13 2 3 4]</span>, <span class="string">%w[2 4 13 3 1 10]</span>.sort</span><br><span class="line">        assert_equal <span class="string">%w[1 2 3 4 10 13]</span>,</span><br><span class="line">                     <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|a, b|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line">        assert_equal <span class="string">%w[13 10 4 3 2 1]</span>,</span><br><span class="line">                     <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|b, a|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>説明用変数の導入</strong> を使ってテストコードをリファクタリングしておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定した評価式で並び変えた配列を返す</span></span><br><span class="line">      result1 = <span class="string">%w[2 4 13 3 1 10]</span>.sort</span><br><span class="line">      result2 = <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|a, b|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line">      result3 = <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|b, a|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">%w[1 10 13 2 3 4]</span>, result1</span><br><span class="line">      assert_equal <span class="string">%w[1 2 3 4 10 13]</span>, result2</span><br><span class="line">      assert_equal <span class="string">%w[13 10 4 3 2 1]</span>, result3</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>再度確認します。チェックは通りましたね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop --lint</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">5 files inspected, no offenses detected</span><br></pre></td></tr></table></figure><p>テストも実行して壊れていないかも確認しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fizz_buzz_test.rb</span><br><span class="line">Started with run options --seed 42058</span><br><span class="line"></span><br><span class="line">  19/19: [=========================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00257s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>いちいち調べるのも手間なので自動で修正できるところは修正してもらいましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop --auto-correct</span><br></pre></td></tr></table></figure><p>再度確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> $ rubocop</span><br><span class="line">Inspecting 5 files</span><br><span class="line">...CC</span><br><span class="line"></span><br><span class="line">Offenses:</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>/fizz_buzz_test.rb:15:11: C: Naming/MethodName: Use snake_case <span class="keyword">for</span> method names.</span><br><span class="line">      def test_3を渡したら文字列Fizzを返す</span><br><span class="line">          ^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>まだ、自動修正できなかった部分があるようですね。この部分はチェック対象から外すことにしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop --auto-gen-config</span><br><span class="line">Added inheritance from `.rubocop_todo.yml` <span class="keyword">in</span> `.rubocop.yml`.</span><br><span class="line">Phase 1 of 2: run Layout/LineLength cop</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">5 files inspected, no offenses detected</span><br><span class="line">Created .rubocop_todo.yml.</span><br><span class="line">Phase 2 of 2: run all cops</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.C.CW</span><br><span class="line"></span><br><span class="line">5 files inspected, 110 offenses detected</span><br><span class="line">Created .rubocop_todo.yml.</span><br></pre></td></tr></table></figure><p>生成された <code>.rubocop_todo.yml</code> の以下の部分を変更します。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Offense count: 32</span></span><br><span class="line"><span class="comment"># Configuration parameters: IgnoredPatterns.</span></span><br><span class="line"><span class="comment"># SupportedStyles: snake_case, camelCase</span></span><br><span class="line"><span class="attr">Naming/MethodName:</span></span><br><span class="line">  <span class="attr">EnforcedStyle:</span> <span class="string">snake_case</span></span><br><span class="line">  <span class="attr">Exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"test/fizz_buzz_test.rb"</span></span><br></pre></td></tr></table></figure><p>再度チェックを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">5 files inspected, no offenses detected</span><br></pre></td></tr></table></figure><p>セットアップができたのでここでコミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'chore: 静的コード解析セットアップ'</span></span><br></pre></td></tr></table></figure><h3 id="コードフォーマッタ"><a href="#コードフォーマッタ" class="headerlink" title="コードフォーマッタ"></a>コードフォーマッタ</h3><p>良いコードであるためにはフォーマットも大切な要素です。</p><blockquote><p>優れたソースコードは「目に優しい」ものでなければいけない。</p><p>— リーダブルコード</p></blockquote><p>Ruby にはいくつかフォーマットアプリケーションはあるのですがここは <code>RuboCop</code> の機能を使って実現することにしましょう。以下のコードのフォーマットをわざと崩してみます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">          isFizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    isBuzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> isFizz &amp;&amp; isBuzz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> isFizz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> isBuzz</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>スタイルオプションをつけてチェックしてみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop --only Layout</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.C...</span><br><span class="line"></span><br><span class="line">Offenses:</span><br><span class="line"></span><br><span class="line">lib/fizz_buzz.rb:7:3: C: Layout/IndentationWidth: Use 2 (not 8) spaces <span class="keyword">for</span> indentation.</span><br><span class="line">          isFizz = number.modulo(3).zero?</span><br><span class="line">  ^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:8:5: C: Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">    isBuzz = number.modulo(5).zero?</span><br><span class="line">    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:10:5: C: Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> isFizz &amp;&amp; isBuzz</span><br><span class="line">    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:11:5: C: Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> isFizz</span><br><span class="line">    ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:12:5: C: Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> isBuzz</span><br><span class="line">    ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:14:5: C: Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">    number.to_s</span><br><span class="line">    ^^^^^^^^^^^</span><br><span class="line"></span><br><span class="line">5 files inspected, 6 offenses detected</span><br></pre></td></tr></table></figure><p>編集した部分が <code>Use 2 (not 8) spaces for indentation.</code> と指摘されています。<code>--fix-layout</code> オプションで自動保存しておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop --fix-layout</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.C...</span><br><span class="line"></span><br><span class="line">Offenses:</span><br><span class="line"></span><br><span class="line">lib/fizz_buzz.rb:7:3: C: [Corrected] Layout/IndentationWidth: Use 2 (not 8) spaces <span class="keyword">for</span> indentation.</span><br><span class="line">          isFizz = number.modulo(3).zero?</span><br><span class="line">  ^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:8:5: C: [Corrected] Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">    isBuzz = number.modulo(5).zero?</span><br><span class="line">    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:8:11: C: [Corrected] Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">          isBuzz = number.modulo(5).zero?</span><br><span class="line">          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:10:5: C: [Corrected] Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> isFizz &amp;&amp; isBuzz</span><br><span class="line">    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:10:11: C: [Corrected] Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">          <span class="built_in">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> isFizz &amp;&amp; isBuzz</span><br><span class="line">          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:11:5: C: [Corrected] Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> isFizz</span><br><span class="line">    ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:11:11: C: [Corrected] Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">          <span class="built_in">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> isFizz</span><br><span class="line">          ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:12:5: C: [Corrected] Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> isBuzz</span><br><span class="line">    ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:12:11: C: [Corrected] Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">          <span class="built_in">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> isBuzz</span><br><span class="line">          ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:14:5: C: [Corrected] Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">    number.to_s</span><br><span class="line">    ^^^^^^^^^^^</span><br><span class="line">lib/fizz_buzz.rb:14:11: C: [Corrected] Layout/IndentationConsistency: Inconsistent indentation detected.</span><br><span class="line">          number.to_s</span><br><span class="line">          ^^^^^^^^^^^</span><br><span class="line"></span><br><span class="line">5 files inspected, 11 offenses detected, 11 offenses corrected</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    isFizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    isBuzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> isFizz &amp;&amp; isBuzz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> isFizz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> isBuzz</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rubocop --only Layout</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">5 files inspected, no offenses detected</span><br></pre></td></tr></table></figure><p>フォーマットが修正されたことが確認できましたね。ちなみに <code>--auto-correct</code> オプションでもフォーマットをしてくれるので通常はこちらのオプションで問題ないと思います。</p><h3 id="コードカバレッジ"><a href="#コードカバレッジ" class="headerlink" title="コードカバレッジ"></a>コードカバレッジ</h3><p>静的コードコード解析による品質の確認はできました。では動的なテストに関してはどうでしょうか？ <strong>コードカバレッジ</strong> を確認する必要あります。</p><blockquote><p>コード網羅率（コードもうらりつ、英: Code coverage<br>）コードカバレッジは、ソフトウェアテストで用いられる尺度の 1 つである。プログラムのソースコードがテストされた割合を意味する。この場合のテストはコードを見ながら行うもので、ホワイトボックステストに分類される。</p><p>— ウィキペディア</p></blockquote><p>Ruby 用 <strong>コードカバレッジ</strong> 検出プログラムとして <a href="https://github.com/colszowka/simplecov" target="_blank" rel="noopener">SimpleCov</a>を使います。Gemfile に追加して <strong>Bundler</strong> でインストールをしましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line">source <span class="string">'https://rubygems.org'</span></span><br><span class="line"></span><br><span class="line">git_source(<span class="symbol">:github</span>) &#123; <span class="params">|repo_name|</span> <span class="string">"https://github.com/<span class="subst">#&#123;repo_name&#125;</span>"</span> &#125;</span><br><span class="line"></span><br><span class="line">gem <span class="string">'minitest'</span></span><br><span class="line">gem <span class="string">'minitest-reporters'</span></span><br><span class="line">gem <span class="string">'rubocop'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line">gem <span class="string">'simplecov'</span>, <span class="symbol">require:</span> <span class="literal">false</span>, <span class="symbol">group:</span> <span class="symbol">:test</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ bundle install</span><br><span class="line">Fetching gem metadata from https://rubygems.org/..................</span><br><span class="line">Resolving dependencies...</span><br><span class="line">Fetching ansi 1.5.0</span><br><span class="line">Installing ansi 1.5.0</span><br><span class="line">Using ast 2.4.0</span><br><span class="line">Fetching builder 3.2.4</span><br><span class="line">Installing builder 3.2.4</span><br><span class="line">Using bundler 2.1.4</span><br><span class="line">Using docile 1.3.2</span><br><span class="line">Using jaro_winkler 1.5.4</span><br><span class="line">Using json 2.3.0</span><br><span class="line">Fetching minitest 5.14.0</span><br><span class="line">Installing minitest 5.14.0</span><br><span class="line">Using ruby-progressbar 1.10.1</span><br><span class="line">Fetching minitest-reporters 1.4.2</span><br><span class="line">Installing minitest-reporters 1.4.2</span><br><span class="line">Using parallel 1.19.1</span><br><span class="line">Using parser 2.7.0.2</span><br><span class="line">Using rainbow 3.0.0</span><br><span class="line">Using unicode-display_width 1.6.1</span><br><span class="line">Using rubocop 0.79.0</span><br><span class="line">Using simplecov-html 0.10.2</span><br><span class="line">Using simplecov 0.17.1</span><br><span class="line">Bundle complete! 4 Gemfile dependencies, 17 gems now installed.</span><br><span class="line">Use `bundle info [gemname]` to see <span class="built_in">where</span> a bundled gem is installed.</span><br></pre></td></tr></table></figure><p>サイトの説明に従ってテストコードの先頭に以下のコードを追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'simplecov'</span></span><br><span class="line">SimpleCov.start</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>テストを実施します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fizz_buzz_test.rb</span><br><span class="line">Started with run options --seed 10538</span><br><span class="line"></span><br><span class="line">  19/19: [===============================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00297s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テスト実行後に <code>coverage</code> というフォルダが作成されます。その中の <code>index.html</code> を開くとカバレッジ状況を確認できます。セットアップが完了したらコミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'chore: コードカバレッジセットアップ'</span></span><br></pre></td></tr></table></figure><h3 id="タスクランナー"><a href="#タスクランナー" class="headerlink" title="タスクランナー"></a>タスクランナー</h3><p>ここまででテストの実行、静的コード解析、コードフォーマット、コードカバレッジを実施することができるようになりました。でもコマンドを実行するのにそれぞれコマンドを覚えておくのは面倒ですよね。例えばテストの実行は</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fizz_buzz_test.rb</span><br><span class="line">Started with run options --seed 21943</span><br><span class="line"></span><br><span class="line">  19/19: [=======================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00261s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>このようにしていました。では静的コードの解析はどうやりましたか？フォーマットはどうやりましたか？調べるのも面倒ですよね。いちいち調べるのが面倒なことは全部 <strong>タスクランナー</strong> にやらせるようにしましょう。</p><blockquote><p>タスクランナーとは、アプリケーションのビルドなど、一定の手順で行う作業をコマンド一つで実行できるように予めタスクとして定義したものです。</p><p>— かんたん Ruby</p></blockquote><p>Ruby の <strong>タスクランナー</strong> は <code>Rake</code> です。</p><blockquote><p>Rake は Ruby におけるタスクランナーです。rake コマンドと起点となる Rakefile というタスクを記述するファイルを用意することで、タスクの実行や登録されたタスクの一覧表示を行えます。</p><p>— かんたん Ruby</p></blockquote><p>早速、テストタスクから作成しましょう。まず <code>Rakefile</code> を作ります。Mac/Linux では <code>touch</code><br>コマンドでファイルを作れます。Windows の場合は手作業で追加してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch Rakefile</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'rake/testtask'</span></span><br><span class="line"></span><br><span class="line">task <span class="symbol">default:</span> [<span class="symbol">:test</span>]</span><br><span class="line"></span><br><span class="line">Rake::TestTask.new <span class="keyword">do</span> <span class="params">|test|</span></span><br><span class="line">  test.test_files = Dir[<span class="string">'./test/fizz_buzz_test.rb'</span>]</span><br><span class="line">  test.verbose = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>タスクが登録されたか確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rake -T</span><br><span class="line">rake <span class="built_in">test</span>  <span class="comment"># Run tests</span></span><br></pre></td></tr></table></figure><p>タスクが登録されたことが確認できたのでタスクを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ rake <span class="built_in">test</span></span><br><span class="line">/Users/k2works/.rbenv/versions/2.5.5/bin/ruby -w -I<span class="string">"lib"</span> -I<span class="string">"/Users/k2works/.rbenv/versions/2.5.5/lib/ruby/gems/2.5.0/gems/rake-13.0.1/lib"</span> <span class="string">"/Users/k2works/.rbenv/versions/2.5.5/lib/ruby/gems/2.5.0/gems/rake-13.0.1/lib/rake/rake_test_loader.rb"</span> <span class="string">"./test/fizz_buzz_test.rb"</span></span><br><span class="line">/Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/<span class="built_in">test</span>/fizz_buzz_test.rb:79: warning: method redefined; discarding old test_特定の条件を満たす要素だけを配列に入れて返す</span><br><span class="line">/Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/<span class="built_in">test</span>/fizz_buzz_test.rb:74: warning: previous definition of test_特定の条件を満たす要素だけを配列に入れて返す was here</span><br><span class="line">/Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/<span class="built_in">test</span>/fizz_buzz_test.rb:94: warning: method redefined; discarding old test_新しい要素の配列を返す</span><br><span class="line">/Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/<span class="built_in">test</span>/fizz_buzz_test.rb:89: warning: previous definition of test_新しい要素の配列を返す was here</span><br><span class="line">/Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/<span class="built_in">test</span>/fizz_buzz_test.rb:104: warning: method redefined; discarding old test_配列の中から条件に一致する要素を取得する</span><br><span class="line">/Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/<span class="built_in">test</span>/fizz_buzz_test.rb:99: warning: previous definition of test_配列の中から条件に一致する要素を取得する was here</span><br><span class="line">/Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/<span class="built_in">test</span>/fizz_buzz_test.rb:138: warning: method redefined; discarding old test_畳み込み演算を行う</span><br><span class="line">/Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/<span class="built_in">test</span>/fizz_buzz_test.rb:133: warning: previous definition of test_畳み込み演算を行う was here</span><br><span class="line">Started with run options --seed 5886</span><br><span class="line"></span><br><span class="line">  19/19: [=======================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00271s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストは実施されたのですが警告メッセージが表示されるようになりました。メッセージの内容としては <strong>学習用テスト</strong> のテストメソッド名が重複していることが理由のようです。せっかくなので修正しておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'配列や繰り返し処理を理解する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>繰り返し処理</span></span><br><span class="line">      $stdout = StringIO.new</span><br><span class="line">      [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].each &#123; <span class="params">|i|</span> p i * i &#125;</span><br><span class="line">      output = $stdout.string</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">"1\n"</span> + <span class="string">"4\n"</span> + <span class="string">"9\n"</span>, output</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].select(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].find_all(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たさない要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].reject(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">1.1</span>, <span class="number">3.3</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.map(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.collect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.find(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.detect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定した評価式で並び変えた配列を返す</span></span><br><span class="line">      result1 = <span class="string">%w[2 4 13 3 1 10]</span>.sort</span><br><span class="line">      result2 = <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|a, b|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line">      result3 = <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|b, a|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">%w[1 10 13 2 3 4]</span>, result1</span><br><span class="line">      assert_equal <span class="string">%w[1 2 3 4 10 13]</span>, result2</span><br><span class="line">      assert_equal <span class="string">%w[13 10 4 3 2 1]</span>, result3</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry apricot]</span>.grep(<span class="regexp">/^a/</span>)</span><br><span class="line">      assert_equal <span class="string">%w[apple apricot]</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である間までの要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>].take_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である以降の要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>].drop_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].inject(<span class="number">0</span>) &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>メソッド名の変更</strong> を適用してリファクタリングしましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'配列や繰り返し処理を理解する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>繰り返し処理</span></span><br><span class="line">      $stdout = StringIO.new</span><br><span class="line">      [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].each &#123; <span class="params">|i|</span> p i * i &#125;</span><br><span class="line">      output = $stdout.string</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">"1\n"</span> + <span class="string">"4\n"</span> + <span class="string">"9\n"</span>, output</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_select</span>メソッドで特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].select(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_find_all</span>メソッドで特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].find_all(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たさない要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].reject(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">1.1</span>, <span class="number">3.3</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_map</span>メソッドで新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.map(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_collect</span>メソッドで新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.collect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_find</span>メソッドで配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.find(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_detect</span>メソッドで配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.detect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定した評価式で並び変えた配列を返す</span></span><br><span class="line">      result1 = <span class="string">%w[2 4 13 3 1 10]</span>.sort</span><br><span class="line">      result2 = <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|a, b|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line">      result3 = <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|b, a|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">%w[1 10 13 2 3 4]</span>, result1</span><br><span class="line">      assert_equal <span class="string">%w[1 2 3 4 10 13]</span>, result2</span><br><span class="line">      assert_equal <span class="string">%w[13 10 4 3 2 1]</span>, result3</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry apricot]</span>.grep(<span class="regexp">/^a/</span>)</span><br><span class="line">      assert_equal <span class="string">%w[apple apricot]</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である間までの要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>].take_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である以降の要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>].drop_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_inject</span>メソッドで畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].inject(<span class="number">0</span>) &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_reduce</span>メソッドで畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストを再実行して警告メッセージが消えたこと確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ rake <span class="built_in">test</span></span><br><span class="line">/home/gitpod/.rvm/rubies/ruby-2.6.3/bin/ruby -w -I<span class="string">"lib"</span> -I<span class="string">"/home/gitpod/.rvm/rubies/ruby-2.6.3/lib/ruby/gems/2.6.0/gems/rake-12.3.2/lib"</span> <span class="string">"/home/gitpod/.rvm/rubies/ruby-2.6.3/lib/ruby/gems/2.6.0/gems/rake-12.3.2/lib/rake/rake_test_loader.rb"</span> <span class="string">"./test/fizz_buzz_test.rb"</span></span><br><span class="line">Started with run options --seed 10674</span><br><span class="line"></span><br><span class="line">  24/24: [=========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00396s</span><br><span class="line">24 tests, 26 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストタスクが実行されたことが確認できたので引き続き静的コードの解析タスクを追加します。こちらも開発元がタスクを用意しているのでそちらを使うことにします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'rake/testtask'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'rubocop/rake_task'</span></span><br><span class="line">RuboCop::RakeTask.new</span><br><span class="line"></span><br><span class="line">task <span class="symbol">default:</span> [<span class="symbol">:test</span>]</span><br><span class="line"></span><br><span class="line">Rake::TestTask.new <span class="keyword">do</span> <span class="params">|test|</span></span><br><span class="line">  test.test_files = Dir[<span class="string">'./test/fizz_buzz_test.rb'</span>]</span><br><span class="line">  test.verbose = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>タスクが登録されたことを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rake -T</span><br><span class="line">rake rubocop               <span class="comment"># Run RuboCop</span></span><br><span class="line">rake rubocop:auto_correct  <span class="comment"># Auto-correct RuboCop offenses</span></span><br><span class="line">rake <span class="built_in">test</span>                  <span class="comment"># Run tests</span></span><br></pre></td></tr></table></figure><p>続いてタスクを実行してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ rake rubocop</span><br><span class="line">Running RuboCop...</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.C..C</span><br><span class="line"></span><br><span class="line">Offenses:</span><br><span class="line"></span><br><span class="line">Rakefile:1:1: C: Style/FrozenStringLiteralComment: Missing magic comment <span class="comment"># frozen_string_literal: true.</span></span><br><span class="line">require <span class="string">'rake/testtask'</span></span><br><span class="line">^</span><br><span class="line">Rakefile:10:4: C: Layout/TrailingEmptyLines: Final newline missing.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>/fizz_buzz_test.rb:2:1: C: Layout/EmptyLineAfterMagicComment: Add an empty line after magic comments.</span><br><span class="line">require <span class="string">'simplecov'</span></span><br><span class="line">^</span><br><span class="line"><span class="built_in">test</span>/fizz_buzz_test.rb:148:6: C: Layout/TrailingWhitespace: Trailing whitespace detected.</span><br><span class="line">  end</span><br><span class="line">     ^^</span><br><span class="line"></span><br><span class="line">5 files inspected,</span><br></pre></td></tr></table></figure><p>いろいろ出てきましたので自動修正しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ rake rubocop:auto_correct</span><br><span class="line">Running RuboCop...</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.C..C</span><br><span class="line"></span><br><span class="line">Offenses:</span><br><span class="line"></span><br><span class="line">Rakefile:1:1: C: [Corrected] Style/FrozenStringLiteralComment: Missing magic comment <span class="comment"># frozen_string_literal: true.</span></span><br><span class="line">require <span class="string">'rake/testtask'</span></span><br><span class="line">^</span><br><span class="line">Rakefile:2:1: C: [Corrected] Layout/EmptyLineAfterMagicComment: Add an empty line after magic comments.</span><br><span class="line">require <span class="string">'rake/testtask'</span></span><br><span class="line">^</span><br><span class="line">Rakefile:10:4: C: [Corrected] Layout/TrailingEmptyLines: Final newline missing.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>/fizz_buzz_test.rb:2:1: C: [Corrected] Layout/EmptyLineAfterMagicComment: Add an empty line after magic comments.</span><br><span class="line">require <span class="string">'simplecov'</span></span><br><span class="line">^</span><br><span class="line"><span class="built_in">test</span>/fizz_buzz_test.rb:148:6: C: [Corrected] Layout/TrailingWhitespace: Trailing whitespace detected.</span><br><span class="line">  end</span><br><span class="line">     ^^</span><br><span class="line"></span><br><span class="line">5 files inspected, 5 offenses detected, 5 offenses corrected</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ rake rubocop</span><br><span class="line">Running RuboCop...</span><br><span class="line">Inspecting <span class="number">5</span> files</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> files inspected, no offenses detected</span><br></pre></td></tr></table></figure><p>うまく修正されたようですね。後、フォーマットコマンドもタスクとして追加しておきましょう。こちらは開発元が用意していないタスクなので以下のように追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'rake/testtask'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'rubocop/rake_task'</span></span><br><span class="line">RuboCop::RakeTask.new</span><br><span class="line"></span><br><span class="line">task <span class="symbol">default:</span> [<span class="symbol">:test</span>]</span><br><span class="line"></span><br><span class="line">Rake::TestTask.new <span class="keyword">do</span> <span class="params">|test|</span></span><br><span class="line">  test.test_files = Dir[<span class="string">'./test/fizz_buzz_test.rb'</span>]</span><br><span class="line">  test.verbose = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">desc <span class="string">"Run Format"</span></span><br><span class="line">task <span class="symbol">:format</span> <span class="keyword">do</span></span><br><span class="line">  sh <span class="string">"rubocop --fix-layout"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rake -T</span><br><span class="line">rake format                <span class="comment"># Run Format</span></span><br><span class="line">rake rubocop               <span class="comment"># Run RuboCop</span></span><br><span class="line">rake rubocop:auto_correct  <span class="comment"># Auto-correct RuboCop offenses</span></span><br><span class="line">rake <span class="built_in">test</span>                  <span class="comment"># Run tests</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ rake format</span><br><span class="line">rubocop --fix-layout</span><br><span class="line">Inspecting 5 files</span><br><span class="line">.C...</span><br><span class="line"></span><br><span class="line">Offenses:</span><br><span class="line"></span><br><span class="line">Rakefile:17:4: C: [Corrected] Layout/TrailingEmptyLines: Final newline missing.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5 files inspected, 1 offense detected, 1 offense corrected</span><br></pre></td></tr></table></figure><p>フォーマットは <code>rake rubocop:auto_correct</code> で一緒にやってくれるので特に必要は無いのですがプログラムの開発元が提供していないタスクを作りたい場合はこのように追加します。セットアップができたのでコミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'chore: タスクランナーセットアップ'</span></span><br></pre></td></tr></table></figure><h3 id="タスクの自動化"><a href="#タスクの自動化" class="headerlink" title="タスクの自動化"></a>タスクの自動化</h3><p>良いコードを書くためのタスクをまとめることができました。でも、どうせなら自動で実行できるようにしたいですよね。タスクを自動実行するための gem を追加します。<a href="https://github.com/guard/guard" target="_blank" rel="noopener">Guard</a>とそのプラグインの <a href="https://github.com/guard/guard-shell" target="_blank" rel="noopener">Guard::Shell</a> <a href="https://github.com/guard/guard-minitest" target="_blank" rel="noopener">Guard::Minitest</a> <a href="https://github.com/yujinakayama/guard-rubocop" target="_blank" rel="noopener">guard-rubocop</a> をインストールします。それぞれの詳細は以下を参照してください。</p><ul><li><p><a href="https://qiita.com/tbpgr/items/f5be21d8e19dd852d9b7" target="_blank" rel="noopener">Ruby | Guard gem<br>を利用してファイルの変更を検出し、任意のタスクを自動実行する</a></p></li><li><p><a href="https://qiita.com/emergent/items/0a38909206844265e0b5" target="_blank" rel="noopener">guard-shell でソースコードの変更を監視して自動で make＆実行させる</a></p></li><li><p><a href="https://forest-valley17.hatenablog.com/entry/2018/10/05/183521" target="_blank" rel="noopener">Rails -<br>Guard を使い、ファイル変更時に Minitest や Rspec を自動実行する</a></p></li></ul><!-- end list --><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line">source <span class="string">'https://rubygems.org'</span></span><br><span class="line"></span><br><span class="line">git_source(<span class="symbol">:github</span>) &#123; <span class="params">|repo_name|</span> <span class="string">"https://github.com/<span class="subst">#&#123;repo_name&#125;</span>"</span> &#125;</span><br><span class="line"></span><br><span class="line">gem <span class="string">'guard'</span></span><br><span class="line">gem <span class="string">'guard-minitest'</span></span><br><span class="line">gem <span class="string">'guard-rubocop'</span></span><br><span class="line">gem <span class="string">'guard-shell'</span></span><br><span class="line">gem <span class="string">'minitest'</span></span><br><span class="line">gem <span class="string">'minitest-reporters'</span></span><br><span class="line">gem <span class="string">'rake'</span></span><br><span class="line">gem <span class="string">'rubocop'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line">gem <span class="string">'simplecov'</span>, <span class="symbol">require:</span> <span class="literal">false</span>, <span class="symbol">group:</span> <span class="symbol">:test</span></span><br></pre></td></tr></table></figure><p><code>bundle install</code> は <code>bundle</code> に省略できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bundle</span><br><span class="line">$ guard init</span><br></pre></td></tr></table></figure><p><code>Guardfile</code> が生成されるので以下の内容に変更します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add files and commands to this file, like the example:</span></span><br><span class="line"><span class="comment">#   watch(%r&#123;file/path&#125;) &#123; `command(s)` &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">guard <span class="symbol">:shell</span> <span class="keyword">do</span></span><br><span class="line">  watch(<span class="regexp">%r&#123;lib/(.*).rb&#125;</span>) &#123; <span class="params">|_m|</span> <span class="string">`rake test`</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">guard <span class="symbol">:minitest</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># with Minitest::Unit</span></span><br><span class="line">  watch(<span class="regexp">%r&#123;test\/*.rb&#125;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">guard <span class="symbol">:rubocop</span>, <span class="symbol">cli:</span> <span class="string">%w[--auto-correct --format fuubar --format html -o ./tmp/rubocop_results.html]</span> <span class="keyword">do</span></span><br><span class="line">  watch(<span class="regexp">/(.*).rb/</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>guard</code> が起動するか確認して一旦終了します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ guard start</span><br><span class="line">Warning: the running version of Bundler (2.1.3) is older than the version that created the lockfile (2.1.4). We suggest you to upgrade to the version that created the lockfile by running `gem install bundler:2.1.4`.</span><br><span class="line">03:49:28 - INFO - Guard::Minitest 2.4.6 is running, with Minitest::Unit 5.14.0!</span><br><span class="line">03:49:28 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest to /workspace/tdd_rb/coverage. 4 / 11 LOC (36.36%) covered.</span><br><span class="line">Started with run options --guard --seed 1256</span><br><span class="line"></span><br><span class="line">  24/24: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00363s</span><br><span class="line">24 tests, 26 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">03:49:28 - INFO - Inspecting Ruby code style of all files</span><br><span class="line">Gemfile:15:46: C: [Corrected] Layout/TrailingEmptyLines: Final newline missing.</span><br><span class="line">gem <span class="string">'simplecov'</span>, require: <span class="literal">false</span>, group: :<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">Guardfile:17:4: C: [Corrected] Layout/TrailingEmptyLines: Final newline missing.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"> 7/7 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, 2 offenses detected, 2 offenses corrected</span><br><span class="line">03:49:30 - INFO - Guard is now watching at <span class="string">'/workspace/tdd_rb'</span></span><br><span class="line">[1] guard(main)&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">03:50:31 - INFO - Bye <span class="built_in">bye</span>...</span><br></pre></td></tr></table></figure><p>続いて <code>Rakefile</code> に guard タスクを追加します。あと、guard タスクをデフォルトにして <code>rake</code> を実行すると呼び出されるようにしておきます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'rake/testtask'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'rubocop/rake_task'</span></span><br><span class="line">RuboCop::RakeTask.new</span><br><span class="line"></span><br><span class="line">task <span class="symbol">default:</span> [<span class="symbol">:guard</span>]</span><br><span class="line"></span><br><span class="line">Rake::TestTask.new <span class="keyword">do</span> <span class="params">|test|</span></span><br><span class="line">  test.test_files = Dir[<span class="string">'./test/fizz_buzz_test.rb'</span>]</span><br><span class="line">  test.verbose = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">desc <span class="string">'Run Format'</span></span><br><span class="line">task <span class="symbol">:format</span> <span class="keyword">do</span></span><br><span class="line">  sh <span class="string">'rubocop --fix-layout'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">desc <span class="string">'Run Guard'</span></span><br><span class="line">task <span class="symbol">:guard</span> <span class="keyword">do</span></span><br><span class="line">  sh <span class="string">'guard start'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>自動実行タスクを起動しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ rake</span><br><span class="line">guard start</span><br><span class="line">03:52:01 - INFO - Guard::Minitest 2.4.6 is running, with Minitest::Unit 5.14.0!</span><br><span class="line">03:52:01 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest to /workspace/tdd_rb/coverage. 4 / 11 LOC (36.36%) covered.</span><br><span class="line">Started with run options --guard --seed 3219</span><br><span class="line"></span><br><span class="line">  24/24: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00844s</span><br><span class="line">24 tests, 26 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">03:52:01 - INFO - Inspecting Ruby code style of all files</span><br><span class="line"> 7/7 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span><br><span class="line"></span><br><span class="line">7 files inspected, no offenses detected</span><br><span class="line">03:52:03 - INFO - Guard is now watching at <span class="string">'/workspace/tdd_rb'</span></span><br><span class="line">[1] guard(main)&gt;</span><br></pre></td></tr></table></figure><p>起動したら <code>fizz_buzz_test.rb</code> を編集してテストが自動実行されるか確認しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @fizzbuzz = FizzBuzz</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'FizzFizz'</span>, @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">05:00:34 - INFO - Running: all tests</span><br><span class="line">Coverage report generated <span class="keyword">for</span> MiniTest to /workspace/tdd_rb/coverage. 4 / 11 LOC (36.36%) covered.</span><br><span class="line">Started with run options --guard --seed 16292</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_3を渡したら文字列Fizzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x000055640e99f080 @name="FizzBuzz::三の倍数の場合"&gt;, 0.005698626991943456]</span></span><br><span class="line"> test_3を渡したら文字列Fizzを返す<span class="comment">#FizzBuzz::三の倍数の場合 (0.01s)</span></span><br><span class="line">        Expected: <span class="string">"FizzFizz"</span></span><br><span class="line">          Actual: <span class="string">"Fizz"</span></span><br><span class="line">        /workspace/tdd_rb/<span class="built_in">test</span>/fizz_buzz_test.rb:18:<span class="keyword">in</span> `test_3を渡したら文字列Fizzを返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  24/24: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00742s</span></span><br><span class="line"><span class="string">24 tests, 26 assertions, 1 failures, 0 errors, 0 skips</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">05:00:35 - INFO - Inspecting Ruby code style: test/fizz_buzz_test.rb</span></span><br><span class="line"><span class="string"> 1/1 file |======================================= 100 =======================================&gt;| Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1 file inspected, no offenses detected</span></span><br><span class="line"><span class="string">05:00:36 - INFO - Inspecting Ruby code style: coverage/assets/0.10.2/colorbox/border.png coverage/assets/0.10.2/colorbox/loading_background.png coverage/assets/0.10.2/colorbox/loading.gif coverage/assets/0.10.2/colorbox/controls.png</span></span><br><span class="line"><span class="string"> 0/0 files |====================================== 100 =======================================&gt;| Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0 files inspected, no offenses detected</span></span><br><span class="line"><span class="string">[1] guard(main)&gt;</span></span><br></pre></td></tr></table></figure><p>変更を感知してテストが実行されるた結果失敗していましました。コードを元に戻してテストをパスするようにしておきましょう。テストがパスすることが確認できたらコミットしておきましょう。このときターミナルでは <code>guard</code> が動いているので別ターミナルを開いてコミットを実施すると良いでしょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'chore: タスクの自動化'</span></span><br></pre></td></tr></table></figure><p>これで <a href="https://t-wada.hatenablog.jp/entry/clean-code-that-works" target="_blank" rel="noopener">ソフトウェア開発の三種の神器</a> の最後のアイテムの準備ができました。次回の開発からは最初にコマンドラインで <code>rake</code> を実行すれば良いコードを書くためのタスクを自動でやってくるようになるのでコードを書くことに集中できるようになりました。では、次のエピソードに進むとしましょう。</p>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
          <category> プログラミング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> テスト駆動開発 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>テスト駆動開発から始めるRuby入門 ~2時間でTDDとリファクタリングのエッセンスを体験する~</title>
      <link href="/2020/04/16/1587009564/"/>
      <url>/2020/04/16/1587009564/</url>
      
        <content type="html"><![CDATA[<h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p>この記事は一応、Ruby 入門者向けの記事ですが同時にテスト駆動開発入門者向けともなっています。</p><p>対象レベルによって以下のように読み進められれば効率が良いかと思います。</p><ul><li><p>Ruby 入門者でプログラミング初心者・・・とりあえずコードの部分だけを写経しましょう。解説文は最初のうちは何言ってるかわからないと思うので 5 回ぐらい写経して Ruby を書く感覚がつかめてきてから読み直すといいでしょう。もっと知りたくなったら参考図書にあたってください。と言っても結構お高いので「リーダブルコード」と「かんたん Ruby（プログラミングの教科書）」といった初心者向け言語入門書から買い揃えるのがおすすめです。</p></li><li><p>Ruby 経験者でテスト駆動開発初心者・・・コード部分を写経しながら解説文を読み進めていきましょう。短いステップでテスト駆動のリズムが感覚がイメージしていただければ幸いです。もっと知りたくなったら原著の「テスト駆動開発」にあたってくださいオリジナルは Java ですが Ruby で実装してみると多くの学びがあると思います。あと、「プロを目指す人のための Ruby 入門」が対象読者に当たると思います。</p></li><li><p>他の言語経験者でテスト駆動開発初心者・・・コード部分を自分が使っている言語に置き換えながら解説文を読み進めていきましょう。もっと知りたくなったら原著の「テスト駆動開発」にあたってくださいオリジナルは Java と Python が使われています。あと、「リファクタリング」は初版が Java で第２版が JavaScript で解説されています。</p></li><li><p>言語もテスト駆動開発もつよつよな人・・・レビューお待ちしております（笑）。オブジェクト指向に関する言及が無いというツッコミですが追加仕様編でそのあたりの解説をする予定です。あと、「リファクタリング」には Ruby エディションもあるのですが日本語訳が絶版となっているので参考からは外しています。</p></li></ul><p>写経するのに環境構築ができない・面倒なひとは　<a href="https://github.com/hiroshima-arc/tdd_rb" target="_blank" rel="noopener"><strong>こちら</strong></a> からお手軽に始めることができます。</p><a id="more"></a><h2 id="TODO-リストから始めるテスト駆動開発"><a href="#TODO-リストから始めるテスト駆動開発" class="headerlink" title="TODO リストから始めるテスト駆動開発"></a>TODO リストから始めるテスト駆動開発</h2><h3 id="TODO-リスト"><a href="#TODO-リスト" class="headerlink" title="TODO リスト"></a>TODO リスト</h3><p>プログラムを作成するにあたってまず何をすればよいだろうか？私は、まず仕様の確認をして <strong>TODO リスト</strong> を作るところから始めます。</p><blockquote><p>TODO リスト</p><p>何をテストすべきだろうか—-着手する前に、必要になりそうなテストをリストに書き出しておこう。</p><p>— テスト駆動開発</p></blockquote><p>仕様</p><pre><code>1 から 100 までの数をプリントするプログラムを書け。ただし 3 の倍数のときは数の代わりに｢Fizz｣と、5 の倍数のときは｢Buzz｣とプリントし、3 と 5 両方の倍数の場合には｢FizzBuzz｣とプリントすること。</code></pre><p>仕様の内容をそのままプログラムに落とし込むには少しサイズが大きいようですね。なので最初の作業は仕様を <strong>TODO リスト</strong> に分解する作業から着手することにしましょう。仕様をどのように TODO に分解していくかは <a href="https://channel9.msdn.com/Events/de-code/2017/DO03?ocid=player" target="_blank" rel="noopener">50 分でわかるテスト駆動開発</a>の 26 分あたりを参考にしてください。</p><p>TODO リスト</p><ul><li><p>数を文字列にして返す</p></li><li><p>3 の倍数のときは数の代わりに｢Fizz｣と返す</p></li><li><p>5 の倍数のときは｢Buzz｣と返す</p></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p></li><li><p>1 から 100 までの数</p></li><li><p>プリントする</p></li></ul><p>まず <code>数を文字列にして返す</code>作業に取り掛かりたいのですがまだプログラミング対象としてはサイズが大きいようですね。もう少し具体的に分割しましょう。</p><ul><li><p>数を文字列にして返す</p><ul><li>1 を渡したら文字列”1”を返す</li></ul></li></ul><p>これならプログラムの対象として実装できそうですね。</p><h2 id="テストファーストから始めるテスト駆動開発"><a href="#テストファーストから始めるテスト駆動開発" class="headerlink" title="テストファーストから始めるテスト駆動開発"></a>テストファーストから始めるテスト駆動開発</h2><h3 id="テストファースト"><a href="#テストファースト" class="headerlink" title="テストファースト"></a>テストファースト</h3><p>最初にプログラムする対象を決めたので早速プロダクトコードを実装・・・ではなく <strong>テストファースト</strong> で作業を進めていきましょう。まずはプログラムを実行するための準備作業を進める必要がありますね。</p><blockquote><p>テストファースト</p><p>いつテストを書くべきだろうか—-それはテスト対象のコードを書く前だ。</p><p>— テスト駆動開発</p></blockquote><p>では、どうやってテストすればいいでしょうか？テスティングフレームワークを使って自動テストを書きましょう。</p><blockquote><p>テスト（名詞） どうやってソフトウェアをテストすればよいだろか—-自動テストを書こう。</p><p>— テスト駆動開発</p></blockquote><p>今回 Ruby のテスティングフレームワークには <a href="http://docs.seattlerb.org/minitest/" target="_blank" rel="noopener">Minitest</a>を利用します。Minitest の詳しい使い方に関しては <em>Minitest の基本</em> <a href="#pruby">6</a>を参照してください。では、まず以下の内容のテキストファイルを作成して <code>main.rb</code> で保存します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_greeting</span></span></span><br><span class="line">    assert_equal <span class="string">'hello world'</span>, greeting</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span></span></span><br><span class="line">  <span class="string">'hello world'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">        2: from main.rb:2:<span class="keyword">in</span> `&lt;main&gt;<span class="string">'</span></span><br><span class="line"><span class="string">        1: from /home/gitpod/.rvm/rubies/ruby-2.5.5/lib/ruby/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:54:in `require'</span></span><br><span class="line">/home/gitpod/.rvm/rubies/ruby-2.5.5/lib/ruby/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:54:<span class="keyword">in</span> `require<span class="string">': cannot load such file -- minitest/reporters (LoadError)</span></span><br></pre></td></tr></table></figure><p>おおっと！いきなりエラーが出てきましたね。でも落ち着いてください。まず最初にやることはエラーメッセージの内容を読むことです。ここでは <code>require&#39;: cannot load such file — minitest/reporters (LoadError)</code> と表示されています。取っ掛かりとしては <a href="https://www.google.com/search?sxsrf=ACYBGNTd6_rVoXXOBo2CHgs5vysIRIJaCQ%3A1579765868950&source=hp&ei=bFApXrCCN4Pg-Aa8v6vABw&q=%60require%27%3A+cannot+load+such+file&oq=%60require%27%3A+cannot+load+such+file&gs_l=psy-ab.3..0l2j0i30l6.1644.1644..2069…​2.0..0.116.116.0j1…​…​0…​.2j1..gws-wiz…​..10..35i362i39.-RXoHriCPZQ&ved=0ahUKEwiw6Ma7npnnAhUDMN4KHbzfCngQ4dUDCAg&uact=5" target="_blank" rel="noopener">エラーメッセージをキーワードに検索をする</a> というのがあります。ちなみにここでは <a href="https://github.com/kern/minitest-reporters" target="_blank" rel="noopener">minitest/reporters</a> という Gem がインストールされていなかったため読み込みエラーが発生していたようです。サイトの Installation を参考に Gem をインストールしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ gem install minitest-reporters</span><br><span class="line">Fetching minitest-reporters-1.4.2.gem</span><br><span class="line">Fetching ansi-1.5.0.gem</span><br><span class="line">Fetching builder-3.2.4.gem</span><br><span class="line">Successfully installed ansi-1.5.0</span><br><span class="line">Successfully installed builder-3.2.4</span><br><span class="line">Successfully installed minitest-reporters-1.4.2</span><br><span class="line">Parsing documentation <span class="keyword">for</span> ansi-1.5.0</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> ansi-1.5.0</span><br><span class="line">Parsing documentation <span class="keyword">for</span> builder-3.2.4</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> builder-3.2.4</span><br><span class="line">Parsing documentation <span class="keyword">for</span> minitest-reporters-1.4.2</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> minitest-reporters-1.4.2</span><br><span class="line">Done installing documentation <span class="keyword">for</span> ansi, builder, minitest-reporters after 3 seconds</span><br><span class="line">3 gems installed</span><br></pre></td></tr></table></figure><p>Gem のインストールが完了したので再度実行してみましょう。今度はうまくいったようですね。Gem って何？と思ったかもしれませんがここでは Ruby の外部プログラム部品のようなものだと思っておいてください。<code>minitest-reporters</code> というのはテスト結果の見栄えを良くするための追加外部プログラムです。先程の作業ではそれを <code>gem install</code> コマンドでインストールしたのです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 9701</span><br><span class="line"></span><br><span class="line">  1/1: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00090s</span><br><span class="line">1 tests, 1 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストは成功しましたね。では続いてテストを失敗させてみましょう。<code>hello world</code> を <code>hello world!!!</code> に書き換えてテストを実行してみるとどうなるでしょうか。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_greeting</span></span></span><br><span class="line">    assert_equal <span class="string">'hello world!!!'</span>, greeting</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 18217</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_greeting"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007f98a59194f8 @name="HelloTest"&gt;, 0.0007280000027094502]</span></span><br><span class="line"> test_greeting<span class="comment">#HelloTest (0.00s)</span></span><br><span class="line">        Expected: <span class="string">"hello world!!!"</span></span><br><span class="line">          Actual: <span class="string">"hello world"</span></span><br><span class="line">        main.rb:11:<span class="keyword">in</span> `test_greeting<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  1/1: [======================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00101s</span></span><br><span class="line"><span class="string">1 tests, 1 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>オッケー、テスティングフレームワークが正常に読み込まれて動作することが確認できました。テストが正常に通るように戻しておきましょう。続いてバージョン管理システムのセットアップをしておきましょう。バージョン管理システム何それ？だって！？君はセーブしないでロールプレイングゲームをクリアできるのか？できないならまず <a href="https://backlog.com/ja/git-tutorial/intro/01/" target="_blank" rel="noopener">ここ</a>で Git を使ったバージョン管理の基本を学んでおきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'test: セットアップ'</span></span><br></pre></td></tr></table></figure><p>これで<a href="https://t-wada.hatenablog.jp/entry/clean-code-that-works" target="_blank" rel="noopener">ソフトウェア開発の三種の神器</a>のうち <strong>バージョン管理</strong> と <strong>テスティング</strong> の準備が整いましたので <strong>TODO リスト</strong> の最初の作業に取り掛かかるとしましょう。</p><h3 id="仮実装"><a href="#仮実装" class="headerlink" title="仮実装"></a>仮実装</h3><p>TODO リスト</p><ul><li><p>数を文字列にして返す</p><ul><li><strong>1 を渡したら文字列”1”を返す</strong></li></ul></li><li><p>3 の倍数のときは数の代わりに｢Fizz｣と返す</p></li><li><p>5 の倍数のときは｢Buzz｣と返す</p></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p></li><li><p>1 から 100 までの数</p></li><li><p>プリントする</p></li></ul><p><strong>1 を渡したら文字列”1”を返す</strong> プログラムを <code>main.rb</code>  に書きましょう。最初に何を書くのかって？<br>アサーションを最初に書きましょう。</p><blockquote><p>アサートファースト</p><p>いつアサーションを書くべきだろうか—-最初に書こう</p><ul><li><p>システム構築はどこから始めるべきだろうか。システム構築が終わったらこうなる、というストーリーを語るところからだ。</p></li><li><p>機能はどこから書き始めるべきだろうか。コードが書き終わったらこのように動く、というテストを書くところからだ。</p></li><li><p>ではテストはどこから書き始めるべきだろうか。それはテストの終わりにパスすべきアサーションを書くところからだ。</p></li></ul><p>— テスト駆動開発</p></blockquote><p>まず、セットアッププログラムは不要なので削除しておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br></pre></td></tr></table></figure><p>テストコードを書きます。え？日本語でテストケースを書くの？ですかって。開発体制にもよりますが日本人が開発するのであれば無理に英語で書くよりドキュメントとしての可読性が上がるのでテストコードであれば問題は無いと思います。</p><blockquote><p>テストコードを読みやすくするのは、テスト以外のコードを読みやすくするのと同じくらい大切なことだ。</p><p>— リーダブルコード</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, FizzBuzz.generate(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 678</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_1を渡したら文字列1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007f956d8b6870 @name="FizzBuzzTest"&gt;, 0.0006979999998293351]</span></span><br><span class="line"> test_1を渡したら文字列1を返す<span class="comment">#FizzBuzzTest (0.00s)</span></span><br><span class="line">NameError:         NameError: uninitialized constant FizzBuzzTest::FizzBuzz</span><br><span class="line">        Did you mean?  FizzBuzzTest</span><br><span class="line">            main.rb:10:<span class="keyword">in</span> `test_1を渡したら文字列1を返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  1/1: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00201s</span></span><br><span class="line"><span class="string">1 tests, 0 assertions, 0 failures, 1 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p><code>NameError: NameError: uninitialized constant FizzBuzzTest::FizzBuzz</code>…​FizzBuzz が定義されていない。そうですねまだ作ってないのだから当然ですよね。では<code>FizzBuzz::generate</code>  メソッドを作りましょう。どんな振る舞いを書けばいいのでしょうか？とりあえず最初のテストを通すために <strong>仮実装</strong> から始めるとしましょう。</p><blockquote><p>仮実装を経て本実装へ</p><p>失敗するテストを書いてから、最初に行う実装はどのようなものだろうか—-ベタ書きの値を返そう。</p><p>— テスト駆動開発</p></blockquote><p><code>FizzBuzz</code> <strong>クラス</strong> を定義して <strong>文字列リテラル</strong> を返す <code>FizzBuzz::generate</code> <strong>クラスメソッド</strong> を作成しましょう。ちょっと何言ってるかわからないかもしれませんがとりあえずそんなものだと思って書いてみてください。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="string">'1'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストが通ることを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 60122</span><br><span class="line"></span><br><span class="line">  1/1: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00094s</span><br><span class="line">1 tests, 1 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>オッケー、これで TODO リストを片付けることができました。え？こんなベタ書きのプログラムでいいの？他に考えないといけないことたくさんあるんじゃない？ばかじゃないの？と思われるかもしませんが、この細かいステップに今しばらくお付き合いいただきたい。</p><p>TODO リスト</p><ul><li><p>数を文字列にして返す</p><ul><li><strong>1 を渡したら文字列”1”を返す</strong></li></ul></li><li><p>3 の倍数のときは数の代わりに｢Fizz｣と返す</p></li><li><p>5 の倍数のときは｢Buzz｣と返す</p></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p></li><li><p>1 から 100 までの数</p></li><li><p>プリントする</p></li></ul><h3 id="三角測量"><a href="#三角測量" class="headerlink" title="三角測量"></a>三角測量</h3><p>1 を渡したら文字列 1 を返すようにできました。では、2 を渡したらどうなるでしょうか？</p><p>TODO リスト</p><ul><li><p>数を文字列にして返す</p><ul><li><p><del>1 を渡したら文字列”1”を返す</del></p></li><li><p><strong>2 を渡したら文字列”2”を返す</strong></p></li></ul></li><li><p>3 の倍数のときは数の代わりに｢Fizz｣と返す</p></li><li><p>5 の倍数のときは｢Buzz｣と返す</p></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p></li><li><p>1 から 100 までの数</p></li><li><p>プリントする</p></li></ul><!-- end list --><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, FizzBuzz.generate(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_2</span>を渡したら文字列2を返す</span></span><br><span class="line">    assert_equal <span class="string">'2'</span>, FizzBuzz.generate(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 62350</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_2を渡したら文字列2を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fa4968938d8 @name="FizzBuzzTest"&gt;, 0.0009390000013809185]</span></span><br><span class="line"> test_2を渡したら文字列2を返す<span class="comment">#FizzBuzzTest (0.00s)</span></span><br><span class="line">        Expected: <span class="string">"2"</span></span><br><span class="line">          Actual: <span class="string">"1"</span></span><br><span class="line">        main.rb:17:<span class="keyword">in</span> `test_2を渡したら文字列2を返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  2/2: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00179s</span></span><br><span class="line"><span class="string">2 tests, 2 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>テストが失敗しました。それは文字列 1 しか返さないプログラムなのだから当然ですよね。では 1 が渡されたら文字列 1 を返し、2 を渡したら文字列 2 を返すようにプログラムを修正しましょう。<strong>数値リテラル</strong> を <strong>文字列リテラル</strong>　に変換する必要があります。公式リファレンスで調べてみましょう。</p><p>Ruby の公式リファレンスは <a href="https://docs.ruby-lang.org/" target="_blank" rel="noopener">https://docs.ruby-lang.org/</a> です。<a href="https://docs.ruby-lang.org/ja/" target="_blank" rel="noopener">日本語リファレンス</a> から<a href="https://docs.ruby-lang.org/ja/search/" target="_blank" rel="noopener">るりまサーチ</a>を選択してキーワード検索してみましょう。<a href="https://docs.ruby-lang.org/ja/search/query:%E6%96%87%E5%AD%97%E5%88%97%E3%80%80%E5%A4%89%E6%8F%9B/" target="_blank" rel="noopener">文字列 変換</a>キーワードで検索すると <code>to_s</code> というキーワードが出てきました。今度は<a href="https://docs.ruby-lang.org/ja/search/query:to_s/" target="_blank" rel="noopener">to_s</a>で検索すると色々出てきました、どうやら <code>to_s</code> を使えばいいみたいですね。</p><p>ちなみに検索エンジンから <a href="https://www.google.com/search?hl=ja&sxsrf=ACYBGNRISq_mMHcQ1nGzgT3k_igW82f1Sg%3A1579494685196&source=hp&ei=HS0lXqnSCeeumAXN5ZigCg&q=Ruby+%E6%96%87%E5%AD%97%E5%88%97%E3%80%80%E5%A4%89%E6%8F%9B&oq=Ruby+%E6%96%87%E5%AD%97%E5%88%97%E3%80%80%E5%A4%89%E6%8F%9B&gs_l=psy-ab.3..0i4i37l2j0i8i30l6.1386.6456..6820…​2.0..0.139.2322.1j20…​…​0…​.1..gws-wiz…​…​.0i131i4j0i4j0i131j35i39j0j0i8i4i30.FfEPbOjPZcw&ved=0ahUKEwjp1IidrJHnAhVnF6YKHc0yBqQQ4dUDCAg&uact=5" target="_blank" rel="noopener">Ruby 文字列 変換</a>で  検索してもいろいろ出てくるのですがすべてのサイトが必ずしも正確な説明をしているまたは最新のバージョンに対応しているとは限らないので始めは公式リファレンスや市販の書籍から調べる癖をつけておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(n)</span></span></span><br><span class="line">    n.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 42479</span><br><span class="line"></span><br><span class="line">  2/2: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00098s</span><br><span class="line">2 tests, 2 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストが無事通りました。このように２つ目のテストによって <code>FizzBuzz::generate</code> メソッドの一般化を実現することができました。このようなアプローチを <strong>三角測量</strong> と言います。</p><blockquote><p>三角測量</p><p>テストから最も慎重に一般化を引き出すやり方はどのようなものだろうか—-２つ以上の例があるときだけ、一般化を行うようにしよう。</p><p>— テスト駆動開発</p></blockquote><p>TODO リスト</p><ul><li><p><strong>数を文字列にして返す</strong></p><ul><li><p><del>1 を渡したら文字列”1”を返す</del></p></li><li><p><del>2 を渡したら文字列”2”を返す</del></p></li></ul></li><li><p>3 の倍数のときは数の代わりに｢Fizz｣と返す</p></li><li><p>5 の倍数のときは｢Buzz｣と返す</p></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p></li><li><p>1 から 100 までの数</p></li><li><p>プリントする</p></li></ul><p>たかが <strong>数を文字列にして返す</strong> プログラムを書くのにこんなに細かいステップを踏んでいくの？と思ったかもしれません。プログラムを書くということは細かいステップを踏んで行くことなのです。そして、細かいステップを踏み続けることが大切なことなのです。</p><blockquote><p>TDD で大事なのは、細かいステップを踏むことではなく、細かいステップを踏み続けられるようになることだ。</p><p>— テスト駆動開発</p></blockquote><p>あと、テストケースの内容がアサーション一行ですがもっと検証するべきことがあるんじゃない？と思うでしょう。検証したいことがあれば独立したテストケースを追加しましょう。このような書き方はよろしくありません。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>数字を渡したら文字列を返す</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, FizzBuzz.generate(<span class="number">1</span>)</span><br><span class="line">    assert_equal <span class="string">'2'</span>, FizzBuzz.generate(<span class="number">2</span>)</span><br><span class="line">    assert_equal <span class="string">'3'</span>, FizzBuzz.generate(<span class="number">3</span>)</span><br><span class="line">    assert_equal <span class="string">'4'</span>, FizzBuzz.generate(<span class="number">4</span>)</span><br><span class="line">    assert_equal <span class="string">'5'</span>, FizzBuzz.generate(<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>テストの本質というのは、「こういう状況と入力から、こういう振る舞いと出力を期待する」のレベルまで要約できる。</p><p>— リーダブルコード</p></blockquote><p>ここで一段落ついたので、これまでの作業内容をバージョン管理システムにコミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'test: 数を文字列にして返す'</span></span><br></pre></td></tr></table></figure><h2 id="リファクタリングから始めるテスト駆動開発"><a href="#リファクタリングから始めるテスト駆動開発" class="headerlink" title="リファクタリングから始めるテスト駆動開発"></a>リファクタリングから始めるテスト駆動開発</h2><h3 id="リファクタリング"><a href="#リファクタリング" class="headerlink" title="リファクタリング"></a>リファクタリング</h3><p>ここでテスト駆動開発の流れを確認しておきましょう。</p><blockquote><ol><li><p>レッド：動作しない、おそらく最初のうちはコンパイルも通らないテストを１つ書く。</p></li><li><p>グリーン:そのテストを迅速に動作させる。このステップでは罪を犯してもよい。</p></li><li><p>リファクタリング:テストを通すために発生した重複をすべて除去する。</p></li></ol><p>レッド・グリーン・リファクタリング。それが TDD のマントラだ。</p><p>— テスト駆動開発</p></blockquote><p>コードはグリーンの状態ですが <strong>リファクタリング</strong> を実施していませんね。重複を除去しましょう。</p><blockquote><p>リファクタリング(名詞) 外部から見たときの振る舞いを保ちつつ、理解や修正が簡単になるように、ソフトウェアの内部構造を変化させること。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>リファクタリングする(動詞) 一連のリファクタリングを適用して、外部から見た振る舞いの変更なしに、ソフトウェアを再構築すること。</p><p>— リファクタリング(第 2 版</p></blockquote><h4 id="メソッドの抽出"><a href="#メソッドの抽出" class="headerlink" title="メソッドの抽出"></a>メソッドの抽出</h4><p>テストコードを見てください。テストを実行するにあたって毎回前準備を実行する必要があります。こうした処理は往々にして同じ処理を実行するものなので<br><strong>メソッドの抽出</strong> を適用して重複を除去しましょう。</p><blockquote><p>メソッドの抽出</p><p>ひとまとめにできるコードの断片がある。</p><p>コードの断片をメソッドにして、それを目的を表すような名前をつける。</p><p>— 新装版 リファクタリング</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, FizzBuzz.generate(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_2</span>を渡したら文字列2を返す</span></span><br><span class="line">    assert_equal <span class="string">'2'</span>, FizzBuzz.generate(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストフレームワークでは前処理にあたる部分を実行する機能がサポートされています。Minitest では <code>setup</code> メソッドがそれに当たるので <code>FizzBuzz</code> オブジェクトを共有して共通利用できるようにしてみましょう。ここでは <strong>インスタンス変数</strong> に <code>FizzBuzz</code> <strong>クラス</strong> の参照を <strong>代入</strong> して各テストメソッドで共有できるようにしました。ちょっと何言ってるかわからないかもしれませんがここではそんなことをやってるぐらいのイメージで大丈夫です。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fizzbuzz = FizzBuzz</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_2</span>を渡したら文字列2を返す</span></span><br><span class="line">    assert_equal <span class="string">'2'</span>, @fizzbuzz.generate(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストプログラムを変更してしまいましたが壊れていないでしょうか？確認するにはどうすればいいでしょう？ テストを実行して確認すればいいですよね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 33356</span><br><span class="line"></span><br><span class="line">  2/2: [======================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00083s</span><br><span class="line">2 tests, 2 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>オッケー、前回コミットした時と同じグリーンの状態のままですよね。区切りが良いのでここでコミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'refactor: メソッドの抽出'</span></span><br></pre></td></tr></table></figure><h4 id="変数名の変更"><a href="#変数名の変更" class="headerlink" title="変数名の変更"></a>変数名の変更</h4><p>もう一つ気になるところがあります。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(n)</span></span></span><br><span class="line">    n.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>引数の名前が <code>n</code> ですね。コンピュータにはわかるかもしれませんが人間が読むコードとして少し不親切です。特に Ruby のような動的言語では型が明確に定義されないのでなおさらです。ここは <strong>変数名の変更</strong> を適用して人間にとって読みやすいコードにリファクタリングしましょう。</p><blockquote><p>コンパイラがわかるコードは誰にでも書ける。すぐれたプログラマは人間にとってわかりやすいコードを書く。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>名前は短いコメントだと思えばいい。短くてもいい名前をつければ、それだけ多くの情報を伝えることができる。</p><p>— リーダブルコード</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>続いて、変更で壊れていないかを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 33356</span><br><span class="line"></span><br><span class="line">  2/2: [======================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00083s</span><br><span class="line">2 tests, 2 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>オッケー、この時点でテストコードとプロダクトコードを変更しましたがその変更はすでに作成した自動テストによって壊れていないことを簡単に確認することができました。え、こんな簡単な変更でプログラムが壊れるわけないじゃん、ドジっ子なの？ですって。残念ながら私は絶対ミスしない完璧な人間ではないし、どちらかといえば注意力の足りないプログラマなのでこんな間違いも普通にやらかします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    numbr.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 59453</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_1を渡したら文字列1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x0000564f6b1dfc70 @name="FizzBuzzTest"&gt;, 0.001019135997921694]</span></span><br><span class="line"> test_1を渡したら文字列1を返す<span class="comment">#FizzBuzzTest (0.00s)</span></span><br><span class="line">NameError:         NameError: undefined <span class="built_in">local</span> variable or method `numbr<span class="string">' for FizzBuzz:Class</span></span><br><span class="line"><span class="string">        Did you mean?  number</span></span><br><span class="line"><span class="string">            main.rb:21:in `generate'</span></span><br><span class="line">            main.rb:11:<span class="keyword">in</span> `test_1を渡したら文字列1を返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ERROR["test_2を渡したら文字列2を返す", #&lt;Minitest::Reporters::Suite:0x0000564f6b1985f0 @name="FizzBuzzTest"&gt;, 0.003952859999117209]</span></span><br><span class="line"><span class="string"> test_2を渡したら文字列2を返す#FizzBuzzTest (0.00s)</span></span><br><span class="line"><span class="string">NameError:         NameError: undefined local variable or method `numbr'</span> <span class="keyword">for</span> FizzBuzz:Class</span><br><span class="line">        Did you mean?  number</span><br><span class="line">            main.rb:21:<span class="keyword">in</span> `generate<span class="string">'</span></span><br><span class="line"><span class="string">            main.rb:15:in `test_2を渡したら文字列2を返す'</span></span><br><span class="line"></span><br><span class="line">  2/2: [====================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00746s</span><br><span class="line">2 tests, 0 assertions, 0 failures, 2 errors, 0 skips</span><br></pre></td></tr></table></figure><p>最初にプロダクトコードを書いて一通りの機能を作ってから動作を確認する進め方だとこの手の間違いはいつどこで作り込んだのかわからなくなるため原因の調査に時間がかかり残念な経験をしたドジっ子プログラマは変更なんてするもんじゃないと思いコードを変更することに不安を持つようになるでしょう。でも、テスト駆動開発ならそんなドジっ子プログラマでも自動テストと小さなステップのおかげで上記のようなしょうもない間違いもすぐに見つけてすぐに対応することができるのでコードを変更する勇気を持つことができるのです。</p><blockquote><p>テスト駆動開発は、プログラミング中の不安をコントロールする手法だ。</p><p>— テスト駆動開発</p></blockquote><blockquote><p>リファクタリングでは小さなステップでプログラムを変更していく。そのため間違ってもバグを見つけるのは簡単である。</p><p>— リファクタリング(第 2 版)</p></blockquote><p>このグリーンの状態にいつでも戻れるようにコミットして次の <strong>TODO リスト</strong> の内容に取り掛かるとしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'refactor: 変数名の変更'</span></span><br></pre></td></tr></table></figure><blockquote><p>リファクタリングが成功するたびにコミットしておけば、たとえ壊してしまったとしても、動いていた状態に戻すことができます。変更をコミットしておき、意味のある単位としてまとまってから、共有のリポジトリに変更をプッシュすればよいのです。</p><p>— リファクタリング(第 2 版)</p></blockquote><h3 id="明白な実装"><a href="#明白な実装" class="headerlink" title="明白な実装"></a>明白な実装</h3><p>次は <strong>3 を渡したら文字列”Fizz”</strong> を返すプログラムに取り組むとしましょう。</p><p>TODO リスト</p><ul><li><p><em>数を文字列にして返す</em></p><ul><li><p><del>1 を渡したら文字列”1”を返す</del></p></li><li><p><del>2 を渡したら文字列”2”を返す</del></p></li></ul></li><li><p>3 の倍数のときは数の代わりに｢Fizz｣と返す</p><ul><li><strong>3 を渡したら文字列”Fizz”を返す</strong></li></ul></li><li><p>5 の倍数のときは｢Buzz｣と返す</p></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p></li><li><p>1 から 100 までの数</p></li><li><p>プリントする</p></li></ul><p>まずは、<strong>テストファースト</strong> <strong>アサートファースト</strong> で小さなステップで進めていくんでしたよね。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">    assert_equal <span class="string">'Fizz'</span>, @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 7095</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_3を渡したら文字列Fizzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fbadf865f50 @name="FizzBuzzTest"&gt;, 0.017029999995429534]</span></span><br><span class="line"> test_3を渡したら文字列Fizzを返す<span class="comment">#FizzBuzzTest (0.02s)</span></span><br><span class="line">        --- expected</span><br><span class="line">        +++ actual</span><br><span class="line">        @@ -1 +1,3 @@</span><br><span class="line">        -<span class="string">"Fizz"</span></span><br><span class="line">        +<span class="comment"># encoding: US-ASCII</span></span><br><span class="line">        +<span class="comment">#    valid: true</span></span><br><span class="line">        +<span class="string">"3"</span></span><br><span class="line">        main.rb:19:<span class="keyword">in</span> `test_3を渡したら文字列Fizzを返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  3/3: [======================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.05129s</span></span><br><span class="line"><span class="string">3 tests, 3 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>さて、失敗するテストを書いたので次はテストを通すためのプロダクトコードを書くわけですがどうしましょうか？　<strong>仮実装</strong>　でベタなコードを書きますか？実現したい振る舞いは<code>もし3を渡したらならば文字列Fizzを返す</code> です。英語なら <code>If number is 3, result is Fizz</code>といったところでしょうか。ここは <strong>明白な実装</strong> で片付けた方が早いでしょう。</p><blockquote><p>明白な実装</p><p>シンプルな操作を実現するにはどうすればいいだろうか—-そのまま実装しよう。</p><p>仮実装や三角測量は、細かく細かく刻んだ小さなステップだ。だが、ときには実装をどうすべきか既に見えていることが。<br>そのまま進もう。例えば先ほどの plus メソッドくらいシンプルなものを仮実装する必要が本当にあるだろうか。<br>普通は、その必要はない。頭に浮かんだ明白な実装をただ単にコードに落とすだけだ。もしもレッドバーが出て驚いたら、あらためてもう少し歩幅を小さくしよう。</p><p>— テスト駆動開発</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>ここでは <strong>if 式</strong> と <strong>演算子</strong> を使ってみましょう。なんかプログラムっぽくなってきましたね。<br>3 で割で割り切れる場合は Fizz を返すということは <strong>数値リテラル</strong> 3 で割った余りが 0 の場合は <strong>文字列リテラル</strong> Fizz を返すということなので余りを求める <strong>演算子</strong> を調べる必要がありますね。公式リファレンスで <strong>算術演算子</strong> をキーワードで検索したところ <a href="https://docs.ruby-lang.org/ja/search/query:%E7%AE%97%E8%A1%93%E6%BC%94%E7%AE%97%E5%AD%90/" target="_blank" rel="noopener">いろいろ</a>出てきました。 <a href="https://docs.ruby-lang.org/ja/search/query:%E7%AE%97%E8%A1%93%E6%BC%94%E7%AE%97%E5%AD%90/query:%25/" target="_blank" rel="noopener">%</a>を使えばいいみたいですね。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">3</span> == <span class="number">0</span></span><br><span class="line">       result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 37722</span><br><span class="line"></span><br><span class="line">  3/3: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00256s</span><br><span class="line">3 tests, 3 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストがグリーンになったのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'test: 3を渡したら文字列Fizzを返す'</span></span><br></pre></td></tr></table></figure><h4 id="アルゴリズムの置き換え"><a href="#アルゴリズムの置き換え" class="headerlink" title="アルゴリズムの置き換え"></a>アルゴリズムの置き換え</h4><p>TODO リスト</p><ul><li><p><del>数を文字列にして返す</del></p><ul><li><p><del>1 を渡したら文字列”1”を返す</del></p></li><li><p><del>2 を渡したら文字列”2”を返す</del></p></li></ul></li><li><p><del>3 の倍数のときは数の代わりに｢Fizz｣と返す</del></p><ul><li><del>3 を渡したら文字列”Fizz”を返す</del></li></ul></li><li><p>5 の倍数のときは｢Buzz｣と返す</p><ul><li>5 を渡したら文字列”Buzz”を返す</li></ul></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p></li><li><p>1 から 100 までの数</p></li><li><p>プリントする</p></li></ul><!-- end list --><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">3</span> == <span class="number">0</span></span><br><span class="line">       result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>レッド・グリーンときたので次はリファクタリングですね。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">       result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>ここでは <strong>アルゴリズムの置き換え</strong> を適用します。 <strong>メソッドチェーンと述語メソッド</strong> を使って Ruby らしい書き方にリファクタリングしてみました。</p><blockquote><p>アルゴリズムの取り替え</p><p>アルゴリズムをよりわかりやすいものに置き換えたい。</p><p>メソッドの本体を新たなアルゴリズムで置き換える。</p><p>— 新装版 リファクタリング</p></blockquote><blockquote><p>メソッドチェーンは言葉の通り、メソッドを繋げて呼び出す方法です。</p><p>— かんたん Ruby</p></blockquote><blockquote><p>述語メソッドとはメソッド名の末尾に「？」をつけたメソッドのことを指します。</p><p>— かんたん Ruby</p></blockquote><p>リファクタリングによりコードが壊れていないかを確認したらコミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 42180</span><br><span class="line"></span><br><span class="line">  3/3: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00501s</span><br><span class="line">3 tests, 3 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'refactor: アルゴリズムの置き換え'</span></span><br></pre></td></tr></table></figure><p>だんだんとリズムに乗ってきました。ここはギアを上げて <strong>明白な実装</strong> で引き続き <strong>TODO リスト</strong> の内容を片付けていきましょう。</p><p>TODO リスト</p><ul><li><p><del>数を文字列にして返す</del></p><ul><li><p><del>1 を渡したら文字列”1”を返す</del></p></li><li><p><del>2 を渡したら文字列”2”を返す</del></p></li></ul></li><li><p><del>3 の倍数のときは数の代わりに｢Fizz｣と返す</del></p><ul><li><del>3 を渡したら文字列”Fizz”を返す</del></li></ul></li><li><p>5 の倍数のときは｢Buzz｣と返す</p><ul><li><strong>5 を渡したら文字列”Buzz”を返す</strong></li></ul></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p></li><li><p>1 から 100 までの数</p></li><li><p>プリントする</p></li></ul><p><strong>テストファースト</strong> <strong>アサートファースト</strong> で最初に失敗するテストを書いて</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">    assert_equal <span class="string">'Buzz'</span>, @fizzbuzz.generate(<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 46876</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_5を渡したら文字列Buzzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x0000560f86b93700 @name="FizzBuzzTest"&gt;, 0.007562776008853689]</span></span><br><span class="line"> test_5を渡したら文字列Buzzを返す<span class="comment">#FizzBuzzTest (0.01s)</span></span><br><span class="line">        --- expected</span><br><span class="line">        +++ actual</span><br><span class="line">        @@ -1 +1,2 @@</span><br><span class="line">        -<span class="string">"Buzz"</span></span><br><span class="line">        +<span class="comment"># encoding: US-ASCII</span></span><br><span class="line">        +<span class="string">"5"</span></span><br><span class="line">        main.rb:23:<span class="keyword">in</span> `test_5を渡したら文字列Buzzを返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00849s</span></span><br><span class="line"><span class="string">4 tests, 4 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p><strong>if/elsif/else 式</strong> を使って条件分岐を追加しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">       result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'Buzz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 31468</span><br><span class="line"></span><br><span class="line">  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00158s</span><br><span class="line">4 tests, 4 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストが通ったのでコミットしておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'test: 5を渡したら文字列Buzzを返す'</span></span><br></pre></td></tr></table></figure><h4 id="メソッドのインライン化"><a href="#メソッドのインライン化" class="headerlink" title="メソッドのインライン化"></a>メソッドのインライン化</h4><p>TODO リスト</p><ul><li><p><del>数を文字列にして返す</del></p><ul><li><p><del>1 を渡したら文字列”1”を返す</del></p></li><li><p><del>2 を渡したら文字列”2”を返す</del></p></li></ul></li><li><p><del>3 の倍数のときは数の代わりに｢Fizz｣と返す</del></p><ul><li><del>3 を渡したら文字列”Fizz”を返す</del></li></ul></li><li><p>5 の倍数のときは｢Buzz｣と返す</p><ul><li><del>5 を渡したら文字列”Buzz”を返す</del></li></ul></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p></li><li><p>1 から 100 までの数</p></li><li><p>プリントする</p></li></ul><!-- end list --><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fizzbuzz = FizzBuzz</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_2</span>を渡したら文字列2を返す</span></span><br><span class="line">    assert_equal <span class="string">'2'</span>, @fizzbuzz.generate(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">    assert_equal <span class="string">'Fizz'</span>, @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">    assert_equal <span class="string">'Buzz'</span>, @fizzbuzz.generate(<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>まずグループのアウトラインを作ってテストが壊れないかを確認します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">    describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @fizzbuzz = FizzBuzz</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_2</span>を渡したら文字列2を返す</span></span><br><span class="line">    assert_equal <span class="string">'2'</span>, @fizzbuzz.generate(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">    assert_equal <span class="string">'Fizz'</span>, @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">    assert_equal <span class="string">'Buzz'</span>, @fizzbuzz.generate(<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 39239</span><br><span class="line"></span><br><span class="line">  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00195s</span><br><span class="line">4 tests, 4 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>壊れいないことを確認したらセットアップメソッドをまず移動してテストします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @fizzbuzz = FizzBuzz</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">    assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_2</span>を渡したら文字列2を返す</span></span><br><span class="line">    assert_equal <span class="string">'2'</span>, @fizzbuzz.generate(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">    assert_equal <span class="string">'Fizz'</span>, @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">    assert_equal <span class="string">'Buzz'</span>, @fizzbuzz.generate(<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 53111</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_1を渡したら文字列1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005603cac658f8 @name="FizzBuzzTest"&gt;, 0.0027922230074182153]</span></span><br><span class="line"> test_1を渡したら文字列1を返す<span class="comment">#FizzBuzzTest (0.00s)</span></span><br><span class="line">NoMethodError:         NoMethodError: undefined method `generate<span class="string">' for nil:NilClass</span></span><br><span class="line"><span class="string">            main.rb:22:in `test_1を渡したら文字列1を返す'</span></span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_3を渡したら文字列Fizzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005603cac83e98 @name="FizzBuzzTest"&gt;, 0.00590475500212051]</span></span><br><span class="line"> test_3を渡したら文字列Fizzを返す<span class="comment">#FizzBuzzTest (0.01s)</span></span><br><span class="line">NoMethodError:         NoMethodError: undefined method `generate<span class="string">' for nil:NilClass</span></span><br><span class="line"><span class="string">            main.rb:30:in `test_3を渡したら文字列Fizzを返す'</span></span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_5を渡したら文字列Buzzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005603cac85ec8 @name="FizzBuzzTest"&gt;, 0.008002811024198309]</span></span><br><span class="line"> test_5を渡したら文字列Buzzを返す<span class="comment">#FizzBuzzTest (0.01s)</span></span><br><span class="line">NoMethodError:         NoMethodError: undefined method `generate<span class="string">' for nil:NilClass</span></span><br><span class="line"><span class="string">            main.rb:34:in `test_5を渡したら文字列Buzzを返す'</span></span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_2を渡したら文字列2を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00005603cac97e20 @name="FizzBuzzTest"&gt;, 0.010200971009908244]</span></span><br><span class="line"> test_2を渡したら文字列2を返す<span class="comment">#FizzBuzzTest (0.01s)</span></span><br><span class="line">NoMethodError:         NoMethodError: undefined method `generate<span class="string">' for nil:NilClass</span></span><br><span class="line"><span class="string">            main.rb:26:in `test_2を渡したら文字列2を返す'</span></span><br><span class="line"></span><br><span class="line">  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.01247s</span><br><span class="line">4 tests, 0 assertions, 0 failures, 4 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストが失敗しました。これは <strong>インスタンス変数</strong> <code>@fizzbuzz</code> のスコープから外れたため<br><code>FizzBuzz::generate</code> メソッド呼び出しに失敗したようです。テストメソッドを移動して変数のスコープ範囲に入れましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @fizzbuzz = FizzBuzz</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Fizz'</span>, @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Buzz'</span>, @fizzbuzz.generate(<span class="number">5</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">        assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_2</span>を渡したら文字列2を返す</span></span><br><span class="line">        assert_equal <span class="string">'2'</span>, @fizzbuzz.generate(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>すべてのメソッドを移動したら確認しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 20627</span><br><span class="line"></span><br><span class="line">  4/4: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00212s</span><br><span class="line">4 tests, 4 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>ここでは、<strong>メソッドのインライン化</strong> を適用してしてテストコードを読みやすくすることにしました。テストコードの <strong>自己文書化</strong> により動作する仕様書にすることができました。</p><blockquote><p>メソッドのインライン化</p><p>メソッドの本体が、名前をつけて呼ぶまでもなく明らかである。</p><p>メソッド本体の呼び出し元にインライン化して、メソッドを除去する</p><p>— 新装版 リファクタリング</p></blockquote><blockquote><p>混乱せずに読めるテストコードを目指すなら（コンピュータではなく人のためにテストを書いていることを忘れてはならない）、テストメソッドの長さは３行を目指そう。</p><p>— テスト駆動開発</p></blockquote><blockquote><p>この関数名は「自己文書化」されている。関数名はいろんなところで使用されるのだから、優れたコメントよりも名前のほうが大切だ。</p><p>— リーダブルコード</p></blockquote><p>テストも無事通るようになったのでコミットしておきます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'refactor: メソッドのインライン化'</span></span><br></pre></td></tr></table></figure><p>さあ、<strong>TODO リスト</strong> もだいぶ消化されてきましたね。もうひと踏ん張りです。</p><p>TODO リスト</p><ul><li><p><del>数を文字列にして返す</del></p><ul><li><p><del>1 を渡したら文字列”1”を返す</del></p></li><li><p><del>2 を渡したら文字列”2”を返す</del></p></li></ul></li><li><p><del>3 の倍数のときは数の代わりに｢Fizz｣と返す</del></p><ul><li><del>3 を渡したら文字列”Fizz”を返す</del></li></ul></li><li><p><del>5 の倍数のときは｢Buzz｣と返す</del></p><ul><li><del>5 を渡したら文字列”Buzz”を返す</del></li></ul></li><li><p>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</p><ul><li><strong>15 を渡したら文字列 FizzBuzz を返す</strong></li></ul></li><li><p>1 から 100 までの数</p></li><li><p>プリントする</p></li></ul><p>初めに失敗するテストを書きます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.generate(<span class="number">15</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 16335</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_15を渡したら文字列FizzBuzzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x000056344a3be2a8 @name="FizzBuzz::三と五の倍数の場合"&gt;, 0.006737435003742576]</span></span><br><span class="line"> test_15を渡したら文字列FizzBuzzを返す<span class="comment">#FizzBuzz::三と五の倍数の場合 (0.01s)</span></span><br><span class="line">        Expected: <span class="string">"FizzBuzz"</span></span><br><span class="line">          Actual: <span class="string">"Fizz"</span></span><br><span class="line">        main.rb:25:<span class="keyword">in</span> `test_15を渡したら文字列FizzBuzzを返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  5/5: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.01347s</span></span><br><span class="line"><span class="string">5 tests, 5 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>続いて先程と同様に条件分岐を追加しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'Buzz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">15</span>).zero?</span><br><span class="line">      result = <span class="string">'FizzBuzz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 45982</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_15を渡したら文字列FizzBuzzを返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007f822c00b2b0 @name="FizzBuzz::三と五の倍数の場合"&gt;, 0.00231200000</span></span><br><span class="line">0529224]</span><br><span class="line"> test_15を渡したら文字列FizzBuzzを返す<span class="comment">#FizzBuzz::三と五の倍数の場合 (0.00s)</span></span><br><span class="line">        Expected: <span class="string">"FizzBuzz"</span></span><br><span class="line">          Actual: <span class="string">"Fizz"</span></span><br><span class="line">        main.rb:25:<span class="keyword">in</span> `test_15を渡したら文字列FizzBuzzを返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  4/4: [======================================================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00964s</span></span><br><span class="line"><span class="string">4 tests, 4 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>おっと、調子に乗って <strong>明白な実装</strong> をしていたら怒られてしまいました。ここは一旦ギアを下げて小さなステップで何が問題かを調べることにしましょう。</p><blockquote><p>明白な実装はセカンドギアだ。頭で考えていることがうまくコードに落とせないときは、ギアを下げる用意をしよう。</p><p>— テスト駆動開発</p></blockquote><p>調べるにあたってコードを頭から読んでもいいのですが、問題が発生したのは <code>15を渡したら文字列FizzBuzzを返す</code> テストを追加したあとですよね？ということは原因は追加したコードにあるはずですよね？よって、追加部分をデバッグすれば原因をすぐ発見できると思いませんか？</p><p>今回は Ruby のデバッガとして Byebug をインストールして使うことにしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install byebug</span><br></pre></td></tr></table></figure><p>インストールが完了したら早速 Byebug からプログラムを起動して動作を確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ byebug main.rb</span><br><span class="line"></span><br><span class="line">[1, 10] <span class="keyword">in</span> /Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/main.rb</span><br><span class="line">=&gt;  1: require <span class="string">'minitest/reporters'</span></span><br><span class="line">    2: Minitest::Reporters.use!</span><br><span class="line">    3: require <span class="string">'minitest/autorun'</span></span><br><span class="line">    4:</span><br><span class="line">    5: class FizzBuzzTest &lt; Minitest::Test</span><br><span class="line">    6:   describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">    7:     def setup</span><br><span class="line">    8:       @fizzbuzz = FizzBuzz</span><br><span class="line">    9:     end</span><br><span class="line">   10:</span><br><span class="line">(byebug)</span><br></pre></td></tr></table></figure><p>詳しい操作に関しては <a href="https://qiita.com/jnchito/items/5aaf323ab4f24b526a61" target="_blank" rel="noopener">print デバッグにさようなら！Ruby 初心者のための Byebug チュートリアル</a>を参照してください。</p><p>では、問題の原因を調査するため byebug メソッドでコード内にブレークポイントを埋め込んでデバッガを実行してみましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">        <span class="keyword">require</span> <span class="string">'byebug'</span></span><br><span class="line">        byebug</span><br><span class="line">        assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.generate(<span class="number">15</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ byebug main.rb</span><br><span class="line"></span><br><span class="line">[1, 10] <span class="keyword">in</span> /Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/main.rb</span><br><span class="line">=&gt;  1: require <span class="string">'minitest/reporters'</span></span><br><span class="line">    2: Minitest::Reporters.use!</span><br><span class="line">    3: require <span class="string">'minitest/autorun'</span></span><br><span class="line">    4:</span><br><span class="line">    5: class FizzBuzzTest &lt; Minitest::Test</span><br><span class="line">    6:   describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">    7:     def setup</span><br><span class="line">    8:       @fizzbuzz = FizzBuzz</span><br><span class="line">    9:     end</span><br><span class="line">   10:</span><br></pre></td></tr></table></figure><p>ブレークポイントまで <code>continue</code> コマンドで処理を進めます。<code>continue</code> コマンドは <code>c</code> でもいけます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(byebug) c</span><br><span class="line">   22:</span><br><span class="line">   23:     describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">   24:       def test_15を渡したら文字列FizzBuzzを返す</span><br><span class="line">   25:         require <span class="string">'byebug'</span></span><br><span class="line">   26:         byebug</span><br><span class="line">=&gt; 27:         assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.generate(15)</span><br><span class="line">   28:       end</span><br><span class="line">   29:     end</span><br><span class="line">   30:</span><br><span class="line">   31:     describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br></pre></td></tr></table></figure><p>続いて問題が発生した <code>@fizzbuzz.generate(15)</code> メソッド内にステップインします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(byebug) s</span><br><span class="line">   36:   end</span><br><span class="line">   37: end</span><br><span class="line">   38:</span><br><span class="line">   39: class FizzBuzz</span><br><span class="line">   40:   def self.generate(number)</span><br><span class="line">=&gt; 41:     result = number.to_s</span><br><span class="line">   42:     <span class="keyword">if</span> number.modulo(3).zero?</span><br><span class="line">   43:       result = <span class="string">'Fizz'</span></span><br><span class="line">   44:     elsif number.modulo(5).zero?</span><br><span class="line">   45:       result = <span class="string">'Buzz'</span></span><br></pre></td></tr></table></figure><p>引数の <code>number</code> は <code>15</code> だから <code>elsif number.modulo(15).zero?</code> の行で判定されるはず・・・</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(byebug) s</span><br><span class="line">   37: end</span><br><span class="line">   38:</span><br><span class="line">   39: class FizzBuzz</span><br><span class="line">   40:   def self.generate(number)</span><br><span class="line">   41:     result = number.to_s</span><br><span class="line">=&gt; 42:     <span class="keyword">if</span> number.modulo(3).zero?</span><br><span class="line">   43:       result = <span class="string">'Fizz'</span></span><br><span class="line">   44:     elsif number.modulo(5).zero?</span><br><span class="line">   45:       result = <span class="string">'Buzz'</span></span><br><span class="line">   46:     elsif number.modulo(15).zero?</span><br><span class="line">(byebug) s</span><br><span class="line">   38:</span><br><span class="line">   39: class FizzBuzz</span><br><span class="line">   40:   def self.generate(number)</span><br><span class="line">   41:     result = number.to_s</span><br><span class="line">   42:     <span class="keyword">if</span> number.modulo(3).zero?</span><br><span class="line">=&gt; 43:       result = <span class="string">'Fizz'</span></span><br></pre></td></tr></table></figure><p>ファッ！？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   44:     elsif number.modulo(5).zero?</span><br><span class="line">   45:       result = <span class="string">'Buzz'</span></span><br><span class="line">   46:     elsif number.modulo(15).zero?</span><br><span class="line">   47:       result = <span class="string">'FizzBuzz'</span></span><br><span class="line">(byebug) result</span><br><span class="line"><span class="string">"15"</span></span><br><span class="line">(byebug) q!</span><br></pre></td></tr></table></figure><p>15 は 3 で割り切れるから最初の判定で処理されますよね。まあ、常にコードに注意を払って頭の中で処理しながらコードを書いていればこんなミスすることは無いのでしょうが私はドジっ子プログラマなので計算機ができることは計算機にやらせて間違いがあれば原因を調べて解決するようにしています。とりあえず、テストを通るようにしておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      result = <span class="string">'Fizz'</span></span><br><span class="line">      <span class="keyword">if</span> number.modulo(<span class="number">15</span>).zero?</span><br><span class="line">        result = <span class="string">'FizzBuzz'</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'Buzz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 24862</span><br><span class="line"></span><br><span class="line">  5/5: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00279s</span><br><span class="line">5 tests, 5 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストが通ったのでコミットしておきます。コミットログにバグは残らないのですが作業の合間ではバグを作り込んでいましたよね。でも、テストがすぐに教えてくれるのですぐに修正することができました。結果として私のようなドジっ子プログラマでもバグの無いコードを書いているかのように見えるんですよ。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'test: 15を渡したら文字列FizzBuzzを返す'</span></span><br></pre></td></tr></table></figure><blockquote><p>私はテスト駆動開発を長年行っているので、他人にミスを気づかれる前に、自分の誤りを修正できるだけなのだ。</p><p>— テスト駆動開発</p></blockquote><p>先程のコードですが・・・</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      result = <span class="string">'Fizz'</span></span><br><span class="line">      <span class="keyword">if</span> number.modulo(<span class="number">15</span>).zero?</span><br><span class="line">        result = <span class="string">'FizzBuzz'</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'Buzz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>if 式</strong> の中でさらに <strong>if 式</strong> をネストしています。いわゆる <strong>コードの不吉な臭い</strong> がしますね。ここは仕様の文言にある <code>3と 5 両方の倍数の場合には｢FizzBuzz｣とプリントすること。</code> に沿った記述にするとともにネストした部分をわかりやすくするために <strong>アルゴリズムの置き換え</strong> を適用してリファクタリングをしましょう。</p><blockquote><p>ネストの深いコードは理解しにくい。</p><p>— リーダブルコード</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero? &amp;&amp; number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'FizzBuzz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'Buzz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>テストして、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 48529</span><br><span class="line"></span><br><span class="line">  5/5: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00329s</span><br><span class="line">5 tests, 5 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>コミットです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'refactor: アルゴリズムの置き換え'</span></span><br></pre></td></tr></table></figure><h3 id="休憩"><a href="#休憩" class="headerlink" title="休憩"></a>休憩</h3><p>TODO リスト</p><ul><li><p><del>数を文字列にして返す</del></p><ul><li><p><del>1 を渡したら文字列”1”を返す</del></p></li><li><p><del>2 を渡したら文字列”2”を返す</del></p></li></ul></li><li><p><del>3 の倍数のときは数の代わりに｢Fizz｣と返す</del></p><ul><li><del>3 を渡したら文字列”Fizz”を返す</del></li></ul></li><li><p><del>5 の倍数のときは｢Buzz｣と返す</del></p><ul><li><del>5 を渡したら文字列”Buzz”を返す</del></li></ul></li><li><p><del>3 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</del></p><ul><li><del>15 を渡したら文字列 FizzBuzz を返す</del></li></ul></li><li><p><strong>1 から 100 までの数</strong></p></li><li><p>プリントする</p></li></ul><p>数を引数にして文字列を返す <code>FizzBuzz::generate</code> メソッドはできたみたいですね。次のやることは・・・新しいメソッドを追加する必要がありそうです。気分を切り替えるため少し休憩を取りましょう。</p><blockquote><p>疲れたり手詰まりになったりしたときはどうすればいいだろうか—-休憩を取ろう。</p><p>— テスト駆動開発</p></blockquote><p>引き続き <strong>TODO リスト</strong> を片付けたいのですが <code>1から100までの数</code> を返すプログラムを書かないといけません。3 を渡したら Fizz のような <strong>リテラル</strong> を返すプログラムではなく 1 から 100 までの <strong>配列オブジェクト</strong> を返すようなプログラムにする必要がありそうです。<strong>TODO リスト</strong> にするとこんな感じでしょうか。</p><p>TODO リスト</p><ul><li><p>1 から 100 までの数の配列を返す</p><ul><li><p>配列の初めは文字列の 1 を返す</p></li><li><p>配列の最後は文字列の 100 を返す</p></li></ul></li><li><p>プリントする</p></li></ul><p>どうやら <strong>配列オブジェクト</strong> を返すプログラムを書かないといけないようですね。え？ <strong>明白な実装</strong> の実装イメージがわかない。そんな時はステップを小さくして <strong>仮実装</strong> から始めるとしましょう。</p><blockquote><p>何を書くべきかわかっているときは、明白な実装を行う。わからないときには仮実装を行う。まだ正しい実装が見えてこないなら、三角測量を行う。それでもまだわからないなら、シャワーを浴びに行こう。</p><p>— テスト駆動開発</p></blockquote><h3 id="学習用テスト"><a href="#学習用テスト" class="headerlink" title="学習用テスト"></a>学習用テスト</h3><h4 id="配列"><a href="#配列" class="headerlink" title="配列"></a>配列</h4><p><strong>テストファースト</strong> でまず Ruby の <strong>配列</strong> の振る舞いを確認していきましょう。公式リファレンスによると Ruby では<a href="https://docs.ruby-lang.org/ja/latest/class/Array.html" target="_blank" rel="noopener">Array クラスとして定義されている</a>ようですね。空の配列を作るには <code>[]</code> (配列リテラル)を使えばいいみたいですね。こんな感じかな？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'1から100までの数の配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">        result = []</span><br><span class="line">        assert_equal <span class="string">'1'</span>, result</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 54004</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_配列の初めは文字列の1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fd0fb93d540 @name="FizzBuzz::1から</span></span><br><span class="line">100までの数の配列を返す<span class="string">"&gt;, 0.0016740000028221402]</span></span><br><span class="line"><span class="string"> test_配列の初めは文字列の1を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)</span></span><br><span class="line"><span class="string">        Expected: "</span>1<span class="string">"</span></span><br><span class="line"><span class="string">          Actual: []</span></span><br><span class="line"><span class="string">        main.rb:37:in `test_配列の初めは文字列の1を返す'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00602s</span></span><br><span class="line"><span class="string">5 tests, 5 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>これは同値ではないのはわかりますね。ではこうしたらどうなるでしょうか？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'1から100までの数の配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">        result = [<span class="string">'1'</span>]</span><br><span class="line">        assert_equal <span class="string">'1'</span>, result</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 32701</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_配列の初めは文字列の1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fb36f096030 @name="FizzBuzz::1から100までの数の配列を返す"&gt;, 0.0018850000014936086]</span></span><br><span class="line"> test_配列の初めは文字列の1を返す<span class="comment">#FizzBuzz::1から100までの数の配列を返す (0.00s)</span></span><br><span class="line">        Expected: <span class="string">"1"</span></span><br><span class="line">          Actual: [<span class="string">"1"</span>]</span><br><span class="line">        main.rb:38:<span class="keyword">in</span> `test_配列の初めは文字列の1を返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.04383s</span></span><br><span class="line"><span class="string">5 tests, 5 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p><strong>配列</strong> には<a href="https://docs.ruby-lang.org/ja/latest/class/Array.html" target="_blank" rel="noopener">要素を操作するメソッドが用意されており</a>内容を色々操作できそうですね。でも、いちいちテストコードを編集してテストを実行させるのも面倒なのでここはデバッガを使ってみましょう。まずブレークポイントを設定して・・・</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'1から100までの数の配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">        <span class="keyword">require</span> <span class="string">'byebug'</span></span><br><span class="line">        byebug</span><br><span class="line">        result = [<span class="string">'1'</span>]</span><br><span class="line">        assert_equal <span class="string">'1'</span>, result</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>デバッガを起動します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ byebug main.rb</span><br><span class="line"></span><br><span class="line">[1, 10] <span class="keyword">in</span> /Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/main.rb</span><br><span class="line">=&gt;  1: require <span class="string">'minitest/reporters'</span></span><br><span class="line">    2: Minitest::Reporters.use!</span><br><span class="line">    3: require <span class="string">'minitest/autorun'</span></span><br><span class="line">    4:</span><br><span class="line">    5: class FizzBuzzTest &lt; Minitest::Test</span><br><span class="line">    6:   describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">    7:     def setup</span><br><span class="line">    8:       @fizzbuzz = FizzBuzz</span><br><span class="line">    9:     end</span><br><span class="line">   10:</span><br><span class="line">(byebug)</span><br></pre></td></tr></table></figure><p>continue でブレークポイントまで進めます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(byebug) c</span><br><span class="line">Started with run options --seed 15764</span><br><span class="line"></span><br><span class="line">  /0: [=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=-] 0% Time: 00:00:00,  ETA: ??:??:??</span><br><span class="line">[34, 43] <span class="keyword">in</span> /Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/main.rb</span><br><span class="line">   34:</span><br><span class="line">   35:     describe <span class="string">'1から100までの数の配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">   36:       def test_配列の初めは文字列の1を返す</span><br><span class="line">   37:         require <span class="string">'byebug'</span></span><br><span class="line">   38:         byebug</span><br><span class="line">=&gt; 39:         result = [<span class="string">'1'</span>]</span><br><span class="line">   40:         assert_equal <span class="string">'1'</span>, result</span><br><span class="line">   41:       end</span><br><span class="line">   42:     end</span><br><span class="line">   43:   end</span><br></pre></td></tr></table></figure><p>ステップインして <code>result</code> の中身を確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(byebug) s</span><br><span class="line"></span><br><span class="line">[35, 44] <span class="keyword">in</span> /Users/k2works/Projects/hiroshima-arc/tdd_rb/docs/src/article/code/main.rb</span><br><span class="line">   35:     describe <span class="string">'1から100までの数の配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">   36:       def test_配列の初めは文字列の1を返す</span><br><span class="line">   37:         require <span class="string">'byebug'</span></span><br><span class="line">   38:         byebug</span><br><span class="line">   39:         result = [<span class="string">'1'</span>]</span><br><span class="line">=&gt; 40:         assert_equal <span class="string">'1'</span>, result</span><br><span class="line">   41:       end</span><br><span class="line">   42:     end</span><br><span class="line">   43:   end</span><br><span class="line">   44: end</span><br><span class="line">(byebug) result</span><br><span class="line">[<span class="string">"1"</span>]</span><br></pre></td></tr></table></figure><p>添字を指定して <strong>配列</strong> の最初の文字列を確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(byebug) result</span><br><span class="line">[<span class="string">"1"</span>]</span><br><span class="line">(byebug) result[1]</span><br><span class="line">nil</span><br></pre></td></tr></table></figure><p>おや？１番目は”1”では無いようですね。<strong>配列</strong> は 0 から始まるので 1 番目を指定するにはこうします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(byebug) result</span><br><span class="line">[<span class="string">"1"</span>]</span><br><span class="line">(byebug) result[1]</span><br><span class="line">nil</span><br><span class="line">(byebug) result[0]</span><br><span class="line"><span class="string">"1"</span></span><br></pre></td></tr></table></figure><p>続いて、複数の文字列から構成される <strong>配列</strong> を作ってみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(byebug) result = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>]</span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>]</span><br><span class="line">(byebug) result[0]</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">(byebug) result[2]</span><br><span class="line"><span class="string">"3"</span></span><br></pre></td></tr></table></figure><p>ちなみに Ruby だとこのように表記することができます。直感的でわかりやすくないですか？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(byebug) result</span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>]</span><br><span class="line">(byebug) result.first</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">(byebug) result.last</span><br><span class="line"><span class="string">"3"</span></span><br></pre></td></tr></table></figure><p>最後に追加、削除、変更をやってみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(byebug) result = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>]</span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>]</span><br><span class="line">(byebug) result &lt;&lt; <span class="string">'4'</span></span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>]</span><br><span class="line">(byebug) result.push(<span class="string">'4'</span>)</span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"4"</span>]</span><br><span class="line">(byebug) result.delete_at(3)</span><br><span class="line"><span class="string">"4"</span></span><br><span class="line">(byebug) result</span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>]</span><br><span class="line">(byebug) result[2] = <span class="string">'30'</span></span><br><span class="line"><span class="string">"30"</span></span><br><span class="line">(byebug) result</span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"30"</span>, <span class="string">"4"</span>]</span><br></pre></td></tr></table></figure><p><strong>配列</strong> の振る舞いもだいぶイメージできたのでデバッガを終了させてテストコードを少し変えてみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(byebug) q</span><br><span class="line">Really quit? (y/n) y</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'1から100までの数の配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">        result = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line">        assert_equal <span class="string">'1'</span>, result.first</span><br><span class="line">        assert_equal <span class="string">'2'</span>, result[<span class="number">1</span>]</span><br><span class="line">        assert_equal <span class="string">'3'</span>, result.last</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 39118</span><br><span class="line"></span><br><span class="line">  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00186s</span><br><span class="line">5 tests, 7 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p><strong>変数</strong> <code>result</code> に配列を返すメソッドを作れば良さそうですね。とりあえずメソッド名は今の時点ではあまり考えずに・・・</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'1から100までの数の配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">        result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">        assert_equal <span class="string">'1'</span>, result.first</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 19247</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_配列の初めは文字列の1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007faaea925058 @name="FizzBuzz::1から</span></span><br><span class="line">100までの数の配列を返す<span class="string">"&gt;, 0.0017889999980980065]</span></span><br><span class="line"><span class="string"> test_配列の初めは文字列の1を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)</span></span><br><span class="line"><span class="string">NoMethodError:         NoMethodError: undefined method `print_1_to_100' for FizzBuzz:Class</span></span><br><span class="line"><span class="string">            main.rb:37:in `test_配列の初めは文字列の1を返す'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00454s</span></span><br><span class="line"><span class="string">5 tests, 4 assertions, 0 failures, 1 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>ここまでくれば <strong>仮実装</strong> はできますね。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero? &amp;&amp; number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'FizzBuzz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'Buzz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_1_to_100</span></span></span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 24564</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_配列の初めは文字列の1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fefd8917060 @name="FizzBuzz::1から</span></span><br><span class="line">100までの数の配列を返す<span class="string">"&gt;, 0.0011969999977736734]</span></span><br><span class="line"><span class="string"> test_配列の初めは文字列の1を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)</span></span><br><span class="line"><span class="string">        Expected: "</span>1<span class="string">"</span></span><br><span class="line"><span class="string">          Actual: 1</span></span><br><span class="line"><span class="string">        main.rb:38:in `test_配列の初めは文字列の1を返す'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00209s</span></span><br><span class="line"><span class="string">5 tests, 5 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>ファッ！？、ああ、数字ではなく文字列で返すのだからこうですね。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_1_to_100</span></span></span><br><span class="line">    [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>%記法</strong> を使うとより Ruby らしく書けます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_1_to_100</span></span></span><br><span class="line">    <span class="string">%w[1 2 3]</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>%記法とは、文字列や正規表現などを定義する際に、%を使った特別な書き方をすることでエスケープ文字を省略するなど、可読性を高めることができる記法です。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 42995</span><br><span class="line"></span><br><span class="line">  5/5: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00195s</span><br><span class="line">5 tests, 5 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p><strong>TODO リスト</strong> の１つ目を <strong>仮実装</strong> で片づけことができました。ちなみにテストコードを使ってソフトウェアの振る舞いを検証するテクニックを <strong>学習用テスト</strong> と言います。</p><blockquote><p>学習用テスト</p><p>チーム外の誰かが書いたソフトウェアのテストを書くのはどのようなときか—-そのソフトウェアの新機能を初めて使う際に書いてみよう。</p><p>— テスト駆動開発</p></blockquote><p>TODO リスト</p><ul><li><p>1 から 100 までの数の配列を返す</p><ul><li><p><del>配列の初めは文字列の 1 を返す</del></p></li><li><p>配列の最後は文字列の 100 を返す</p></li></ul></li><li><p>プリントする</p></li></ul><h4 id="繰り返し処理"><a href="#繰り返し処理" class="headerlink" title="繰り返し処理"></a>繰り返し処理</h4><p><code>FizzBuzz::print_1_to_100</code> メソッドはまだ最後の要素が検証されていませんね。<strong>三角測量</strong> を使って小さなステップで進めていくことにしましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'1から100までの数の配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">        result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">        assert_equal <span class="string">'1'</span>, result.first</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の最後は文字列の100を返す</span></span><br><span class="line">        result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">        assert_equal <span class="string">'100'</span>, result.last</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 12031</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_配列の最後は文字列の100を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fccc9828500 @name="FizzBuzz::1から100までの数の配列を返す"&gt;, 0.0018540000019129366]</span></span><br><span class="line"> test_配列の最後は文字列の100を返す<span class="comment">#FizzBuzz::1から100までの数の配列を返す (0.00s)</span></span><br><span class="line">        Expected: <span class="string">"100"</span></span><br><span class="line">          Actual: <span class="string">"3"</span></span><br><span class="line">        main.rb:43:<span class="keyword">in</span> `test_配列の最後は文字列の100を返す<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  6/6: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.02936s</span></span><br></pre></td></tr></table></figure><p>配列は 3 までなので想定通りテストは失敗します。さて、1 から 100 までの文字列で構成される配列をどうやって作りましょうか？ 先程は <strong>if 式</strong> を使って <strong>条件分岐</strong> をプログラムで実行しました。今回は <strong>繰り返し処理</strong> をプログラムで実行する必要がありそうですね。Ruby の繰り返し処理には <strong>for 式</strong> <strong>while/until/loop</strong> などがありますが実際のところ <strong>each メソッド</strong> を使った繰り返し処理が主流です。とはいえ、実際に動かして振る舞いを確認しないとイメージは難しいですよね。 <strong>学習用テスト</strong> を書いてもいいのですが今回は <em>irb 上で簡単なコードを動かしてみる</em><a href="#pruby">6</a>ことで振る舞いを検証してみましょう。まずコマンドラインで<code>irb</code>を起動します。</p><blockquote><p>Ruby には for 文はあります。ですが、ほとんどの Ruby プログラマは for 文を使いません。筆者も 5〜6 年 Ruby を使っていますが、for 文を書いたことは一度もありません。Ruby の場合は for のような構文で繰り返し処理をさせるのではなく、配列自身に対して「繰り返せ」という命令を送ります。ここで登場するのが each メソッドです。</p><p>— プロを目指す人のための Ruby 入門</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ irb</span><br><span class="line">irb(main):001:0&gt;</span><br></pre></td></tr></table></figure><p>まず先程デバッガで検証した配列の作成をやってみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">irb(main):001:0&gt; result = %w[1 2 3]</span><br><span class="line">=&gt; [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>]</span><br></pre></td></tr></table></figure><p>配列の each メソッドをつかって配列の中身を繰り返し処理で表示させてみましょう。<code>p</code> はプリントメソッドです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">irb(main):003:0&gt; result.each <span class="keyword">do</span> |n| p n end</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line"><span class="string">"2"</span></span><br><span class="line"><span class="string">"3"</span></span><br><span class="line">=&gt; [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>]</span><br></pre></td></tr></table></figure><p>配列の中身を繰り返し処理で取り出す方法はわかりました。あとは 100 までの配列をどうやって作ればよいのでしょうか？<code>[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;…​&#39;100&#39;]</code>と手書きで作りますか？100 件ぐらいならまあできなくもないでしょうが 1000 件,10000 件ならどうでしょうか？無理ですね。計算機にやってもらいましょう、調べてみると Ruby には <strong>レンジオブジェクト(Range)</strong> というもの用意されいるそうです。説明を読んでもピンと来ないので実際に動作を確認してみましょう。</p><blockquote><p>レンジオブジェクト（範囲オブジェクトとも呼ばれます）は Range クラスのオブジェクトのことで、「..」や「…​」演算子を使って定義します。「1..3」のように定義し、主に整数値や文字列を使って範囲を表現します。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">irb(main):008:0&gt; (1..5).each <span class="keyword">do</span> |n| p n end</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">=&gt; 1..5</span><br><span class="line">irb(main):009:0&gt; (1...5).each <span class="keyword">do</span> |n| p n end</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>100 まで表示したいのでこうですね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">irb(main):010:0&gt; (1..100).each <span class="keyword">do</span> |n| p n end</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">..</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">=&gt; 1..100</span><br></pre></td></tr></table></figure><p><code>FizzBuzz::print_1_to_100</code> <strong>メソッド</strong> の <strong>明白な実装</strong> イメージができましたか？ <code>irb</code> を終了させてプロダクトコードを変更しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irb(main):011:0&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_1_to_100</span></span></span><br><span class="line">    result = []</span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">      result &lt;&lt; n</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 38412</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_配列の初めは文字列の1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007f858480edf8 @name="FizzBuzz::1から</span></span><br><span class="line">100までの数の配列を返す<span class="string">"&gt;, 0.0012219999989611097]</span></span><br><span class="line"><span class="string"> test_配列の初めは文字列の1を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)</span></span><br><span class="line"><span class="string">        Expected: "</span>1<span class="string">"</span></span><br><span class="line"><span class="string">          Actual: 1</span></span><br><span class="line"><span class="string">        main.rb:38:in `test_配列の初めは文字列の1を返す'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> FAIL["</span>test_配列の最後は文字列の100を返す<span class="string">", #&lt;Minitest::Reporters::Suite:0x00007f858480c8f0 @name="</span>FizzBuzz::1から100までの数の配列を返す<span class="string">"&gt;, 0.0014040000023669563]</span></span><br><span class="line"><span class="string"> test_配列の最後は文字列の100を返す#FizzBuzz::1から100までの数の配列を返す (0.00s)</span></span><br><span class="line"><span class="string">        Expected: "</span>100<span class="string">"</span></span><br><span class="line"><span class="string">          Actual: 100</span></span><br><span class="line"><span class="string">        main.rb:43:in `test_配列の最後は文字列の100を返す'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  6/6: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00218s</span></span><br><span class="line"><span class="string">6 tests, 6 assertions, 2 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>ファッ！？また、やらかしました。文字列に変換しなといけませんね。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_1_to_100</span></span></span><br><span class="line">    result = []</span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">      result &lt;&lt; n.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 40179</span><br><span class="line"></span><br><span class="line">  6/6: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00196s</span><br><span class="line">6 tests, 6 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>ちなみに、<em>do …​ end を使う代わりに、{}で囲んでもブロックを作れる</em><a href="#pruby">6</a>のでこのように書き換えることができます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_1_to_100</span></span></span><br><span class="line">    result = []</span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each &#123; <span class="params">|n|</span> result &lt;&lt; n.to_s &#125;</span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>変更したらテストして確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 59102</span><br><span class="line"></span><br><span class="line">  7/7: [===========================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00236s</span><br><span class="line">7 tests, 7 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>ここで、一旦コミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'test: 1から100までの数を返す'</span></span><br></pre></td></tr></table></figure><p>TODO リスト</p><ul><li><p>1 から 100 までの数の配列を返す</p><ul><li><p><del>配列の初めは文字列の 1 を返す</del></p></li><li><p><del>配列の最後は文字列の 100 を返す</del></p></li></ul></li><li><p>プリントする</p></li></ul><h4 id="メソッド呼び出し"><a href="#メソッド呼び出し" class="headerlink" title="メソッド呼び出し"></a>メソッド呼び出し</h4><p>1 から 100 までの数の配列を返すメソッドはできました。しかし、このプログラムは 1 から 100 までの数を <code>FizzBuzz::generate</code> した結果を返すのが正しい振る舞いですよね。 <strong>TODO リスト</strong> を追加してテストも追加します。</p><p>TODO リスト</p><ul><li><p>1 から 100 までの数の配列を返す</p><ul><li><p><del>配列の初めは文字列の 1 を返す</del></p></li><li><p><del>配列の最後は文字列の 100 を返す</del></p></li><li><p><strong>配列の 2 番めは文字列の Fizz を返す</strong></p></li></ul></li><li><p>プリントする</p></li></ul><!-- end list --><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の2番目は文字列の<span class="title">Fizz</span>を返す</span></span><br><span class="line">        result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">        assert_equal <span class="string">'Fizz'</span>, result[<span class="number">2</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed <span class="number">50411</span></span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_配列の2番目は文字列のFizzを返す"</span>, #&lt;Minitest::Reporters::Suite:0x00007fe8a1917dc8 @name="FizzBuzz::1から100までの数の配列を返す"&gt;, <span class="number">0</span>.<span class="number">0160</span>8900000428548]</span><br><span class="line"> test<span class="number">_</span>配列の<span class="number">2</span>番目は文字列のをFizz返す<span class="comment">#FizzBuzz::1から100までの数の配列を返す (0.02s)</span></span><br><span class="line">        --- expected</span><br><span class="line">        +++ actual</span><br><span class="line">        @@ -<span class="number">1</span> +<span class="number">1</span>,<span class="number">3</span> @@</span><br><span class="line">        -<span class="string">"Fizz"</span></span><br><span class="line">        +<span class="comment"># encoding: US-ASCII</span></span><br><span class="line">        +<span class="comment">#    valid: true</span></span><br><span class="line">        +<span class="string">"3"</span></span><br><span class="line">        main.<span class="symbol">rb:</span><span class="number">48</span><span class="symbol">:in</span> <span class="string">`test_配列の2番目は文字列のFizzを返す'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  7/7: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.03112s</span></span><br><span class="line"><span class="string">7 tests, 7 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>ですよね、ここは <strong>繰り返し処理</strong> の中で <code>FizzBuzz::generate</code> を呼び出すように変更しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_1_to_100</span></span></span><br><span class="line">    result = []</span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each &#123; <span class="params">|n|</span> result &lt;&lt; generate(n) &#125;</span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed <span class="number">15549</span></span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_配列の最後は文字列の100を返す"</span>, #&lt;Minitest::Reporters::Suite:0x00007ff80a907e28 @name="FizzBuzz::1から100までの数の配列を返す"&gt;, <span class="number">0</span>.<span class="number">001347000004</span>898291]</span><br><span class="line"> test<span class="number">_</span>配列の最後は文字列の<span class="number">100</span>を返す<span class="comment">#FizzBuzz::1から100までの数の配列を返す (0.00s)</span></span><br><span class="line">        <span class="symbol">Expected:</span> <span class="string">"100"</span></span><br><span class="line">          <span class="symbol">Actual:</span> <span class="string">"Buzz"</span></span><br><span class="line">        main.<span class="symbol">rb:</span><span class="number">43</span><span class="symbol">:in</span> <span class="string">`test_配列の最後は文字列の100を返す'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  7/7: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.00218s</span></span><br><span class="line"><span class="string">7 tests, 7 assertions, 1 failures, 0 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>新規に追加したテストはパスしたのですが２つ目のテストが失敗しています。これはテストケースが間違っていますね。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の最後は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">        result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">        assert_equal <span class="string">'Buzz'</span>, result.last</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の2番目は文字列の<span class="title">Fizz</span>を返す</span></span><br><span class="line">        result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">        assert_equal <span class="string">'Fizz'</span>, result[<span class="number">2</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 21247</span><br><span class="line"></span><br><span class="line">  7/7: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00217s</span><br><span class="line">7 tests, 7 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>他のパターンも明記しておきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">        result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">        assert_equal <span class="string">'1'</span>, result.first</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の最後は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">        result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">        assert_equal <span class="string">'Buzz'</span>, result.last</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の2番目は文字列の<span class="title">Fizz</span>を返す</span></span><br><span class="line">        result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">        assert_equal <span class="string">'Fizz'</span>, result[<span class="number">2</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の4番目は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">        result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">        assert_equal <span class="string">'Buzz'</span>, result[<span class="number">4</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の14番目は文字列の<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">        result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">        assert_equal <span class="string">'FizzBuzz'</span>, result[<span class="number">14</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>説明変数</strong> への代入が重複しています。ついでに <strong>メソッドの抽出</strong> をして重複をなくしておきましょう。</p><blockquote><p>最初のステップ「準備(Arrange)」は、テスト間で重複しがちだ。それとは対象的に「実行(Act)」「アサート(Assert)」は重複しないことが多い。</p><p>— テスト駆動開発</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">        assert_equal <span class="string">'1'</span>, @result.first</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の最後は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Buzz'</span>, @result.last</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の2番目は文字列の<span class="title">Fizz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Fizz'</span>, @result[<span class="number">2</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の4番目は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Buzz'</span>, @result[<span class="number">4</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の14番目は文字列の<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'FizzBuzz'</span>, @result[<span class="number">14</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 17460</span><br><span class="line"></span><br><span class="line">  9/9: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00207s</span><br><span class="line">9 tests, 9 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>とりあえず、現時点で仕様を満たすプログラムにはなったみたいですね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'test: 1から100までのFizzBuzzの配列を返す'</span></span><br></pre></td></tr></table></figure><p>TODO リスト</p><ul><li><p><del>1 から 100 までの FizzBuzz の配列を返す</del></p><ul><li><p><del>配列の初めは文字列の 1 を返す</del></p></li><li><p><del>配列の最後は文字列の 100 を返す</del></p></li><li><p><del>配列の 2 番めは文字列の Fizz を返す</del></p></li><li><p><del>配列の 4 番目は文字列の Buzz を返す</del></p></li><li><p><del>配列の 14 番目は文字列の FizzBuzz を返す</del></p></li></ul></li><li><p>プリントする</p></li></ul><h4 id="配列や繰り返し処理の理解"><a href="#配列や繰り返し処理の理解" class="headerlink" title="配列や繰り返し処理の理解"></a>配列や繰り返し処理の理解</h4><p>まだリファクタリングが残っているのですがその前に Ruby の配列メソッドの理解をもう少し深めたいので <strong>学習用テスト</strong> を追加しましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">...</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'配列や繰り返し処理を理解する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>繰り返し処理</span></span><br><span class="line">      $stdout = StringIO.new</span><br><span class="line">      [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].each &#123; <span class="params">|i|</span> p i * i &#125;</span><br><span class="line">      output = $stdout.string</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">"1\n"</span> + <span class="string">"4\n"</span> + <span class="string">"9\n"</span>, output</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].select(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].find_all(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たさない要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].reject(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">1.1</span>, <span class="number">3.3</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.map(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.collect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.find(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.detect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定した評価式で並び変えた配列を返す</span></span><br><span class="line">      assert_equal <span class="string">%w[1 10 13 2 3 4]</span>, <span class="string">%w[2 4 13 3 1 10]</span>.sort</span><br><span class="line">      assert_equal <span class="string">%w[1 2 3 4 10 13]</span>,</span><br><span class="line">                   <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|a, b|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line">      assert_equal <span class="string">%w[13 10 4 3 2 1]</span>,</span><br><span class="line">                   <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|b, a|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry apricot]</span>.grep(<span class="regexp">/^a/</span>)</span><br><span class="line">      assert_equal <span class="string">%w[apple apricot]</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である間までの要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>].take_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である以降の要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>].drop_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].inject(<span class="number">0</span>) &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 18136</span><br><span class="line"></span><br><span class="line">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00307s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'test: 学習用テスト'</span></span><br></pre></td></tr></table></figure><h3 id="コードの不吉な臭い"><a href="#コードの不吉な臭い" class="headerlink" title="コードの不吉な臭い"></a>コードの不吉な臭い</h3><p>終わりが見えてきましたがまだリファクタリングの必要がありそうです。</p><blockquote><p>開発を終えるまでに考えつくまでに考えつく限りのテストを書き、テストに支えられたリファクタリングが、網羅性のあるテストに支えられてたリファクタリングになるようにしなければならない。</p><p>— テスト駆動開発</p></blockquote><p>ここでプロダクトコードを眺めてみましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero? &amp;&amp; number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'FizzBuzz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'Buzz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_1_to_100</span></span></span><br><span class="line">    result = []</span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each &#123; <span class="params">|n|</span> result &lt;&lt; generate(n) &#125;</span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>コードの不吉な臭い</strong> が漂ってきませんか？私が感じた部分を解説していきますね。</p><h4 id="不思議な名前"><a href="#不思議な名前" class="headerlink" title="不思議な名前"></a>不思議な名前</h4><blockquote><p>不思議な名前</p><p>明快なコードにするために最も重要なのは、適切な名前付けです。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>変数や関数などの構成要素の名前は、抽象的ではなく具体的なものにしよう。</p><p>— リーダブルコード</p></blockquote><p>まず、気になったのが <code>print_1_to_100</code> メソッドです。このメソッドは FizzBuzz の配列を返すメソッドであって 1 から 100 までを表示するメソッドではありませんよね。ここは <strong>メソッド名の変更</strong> を適用して処理の内容に沿った名前に変更しましょう。え？動いている処理をわざわざ変更してプログラムを壊す危険を犯す必要があるのかですって。確かに自動テストのない状況でドジっ子プログラマがそんなことをすればいずれ残念なことになるでしょうね。でも、すでに自動テストが用意されている今なら自信をもって動いている処理でも変更できますよね。</p><blockquote><p>リファクタリングに入る前に、しっかりとした一連のテスト群を用意しておくこと。これらのテストには自己診断機能が不可欠である。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>テストは不安を退屈に変える賢者の石だ。</p><p>— テスト駆動開発</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_1_to_100</span></span></span><br><span class="line">    result = []</span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each &#123; <span class="params">|n|</span> result &lt;&lt; generate(n) &#125;</span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    result = []</span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each &#123; <span class="params">|n|</span> result &lt;&lt; generate(n) &#125;</span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>変更で壊れていないか確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 47414</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_配列の初めは文字列の1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fe9e6858108 @name="FizzBuzz::1から</span></span><br><span class="line">100までのFizzBuzzの配列を返す<span class="string">"&gt;, 0.0023099999998521525]</span></span><br><span class="line"><span class="string"> test_配列の初めは文字列の1を返す#FizzBuzz::1から100までのFizzBuzzの配列を返す (0.00s)</span></span><br><span class="line"><span class="string">NoMethodError:         NoMethodError: undefined method `print_1_to_100' for FizzBuzz:Class</span></span><br><span class="line"><span class="string">            main.rb:37:in `setup'</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ERROR["</span>test_配列の最後は文字列のBuzzを返す<span class="string">", #&lt;Minitest::Reporters::Suite:0x00007fe9f7097160 @name="</span>FizzBuzz::1から100までのFizzBuzzの配列を返す<span class="string">"&gt;, 0.011574000000109663]</span></span><br><span class="line"><span class="string"> test_配列の最後は文字列のBuzzを返す#FizzBuzz::1から100までのFizzBuzzの配列を返す (0.01s)</span></span><br><span class="line"><span class="string">NoMethodError:         NoMethodError: undefined method `print_1_to_100' for FizzBuzz:Class</span></span><br><span class="line"><span class="string">            main.rb:37:in `setup'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.01479s</span></span><br><span class="line"><span class="string">19 tests, 16 assertions, 0 failures, 5 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>いきなり失敗しちゃいました。でも、焦らずエラーメッセージを読みましょう。 <code>NoMethodError: NoMethodError:undefined method `print_1_to_100&#39; for FizzBuzz:Class</code> メソッド名の変更したけどテストは以前のままでしたね。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @result = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @result = FizzBuzz.generate_list</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 54699</span><br><span class="line"></span><br><span class="line">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00351s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>プロダクトコードは壊れていなことが確認できたので自信を持ってコミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'refactor:　メソッド名の変更'</span></span><br></pre></td></tr></table></figure><blockquote><p>TDD におけるテストの考え方は実用主義に貫かれている。TDD においてテストは目的を達成するための手段であり、その目的は、大きなる自信を伴うコードだ。</p><p>— テスト駆動開発</p></blockquote><h4 id="長い関数"><a href="#長い関数" class="headerlink" title="長い関数"></a>長い関数</h4><blockquote><p>長い関数</p><p>経験上、長く充実した人生を送るのは、短い関数を持ったプログラムです。</p><p>— リファクタリング(第 2 版)</p></blockquote><p>次に気になったのが <code>FizzBuzz::generate</code> メソッド内の if 分岐処理ですね。こうした条件分岐には仕様変更の際に追加ロジックが新たな if 分岐として追加されてどんどん長くなって読みづらいコードに成長する危険性があります。そういうコードは早めに対策を打っておくのが賢明です。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero? &amp;&amp; number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'FizzBuzz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'Buzz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    result = []</span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each &#123; <span class="params">|n|</span> result &lt;&lt; generate(n) &#125;</span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>まずコードをもう少し読みやすくしましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero? &amp;&amp; number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'FizzBuzz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'Buzz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each &#123; <span class="params">|n|</span> result &lt;&lt; generate(n) &#125;</span><br><span class="line"></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>FizzBuzz</code> の <strong>メソッド</strong> は大きく分けて <strong>変数</strong> の初期化 <strong>条件分岐</strong> <strong>繰り返し処理</strong> による判断、計算そして結果の <strong>代入</strong> を行い最後に <strong>代入</strong> された <strong>変数</strong> を返す流れになっています。 そこで各単位ごとにスペースを挿入してコードの可読性を上げておきましょう。</p><blockquote><p>人間の脳はグループや階層を１つの単位として考える。コードの概要をすばやく把握してもらうには、このような「単位」を作ればいい。</p><p>— リーダブルコード</p></blockquote><p>処理の単位ごとに区切りをつけました。次は if 分岐ですがこうします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero? &amp;&amp; number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'FizzBuzz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">      result = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">elsif</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">      result = <span class="string">'Buzz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero? &amp;&amp; number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 62095</span><br><span class="line"></span><br><span class="line">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00296s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>条件に該当した場合は処理を最後まで進めずその場で終了させる書き方を <strong>ガード節</strong> と言います。このように書くことで追加ロジックが発生しても既存のコードを編集することなく追加することができるので安全に簡単に変更できるコードにすることができます。</p><blockquote><p>ガード節による入れ子条件記述の置き換え</p><p>メソッド内に正常ルートが不明確な条件つき振る舞いがある。</p><p>特殊ケースすべてに対してガード節を使う。</p><p>— 新装版 リファクタリング</p></blockquote><blockquote><p>関数で複数の return 文を使ってはいけないと思っている人がいる。アホくさ。関数から早く返すのはいいことだ。むしろ望ましいときもある。</p><p>— リーダブルコード</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'refactor: ガード節による入れ子条件の置き換え'</span></span><br></pre></td></tr></table></figure><p>どの条件にも該当しない場合は数字を文字列してかえすのですが <strong>一時変数</strong> の <code>result</code> は最後でしか使われていませんね。このような場合は <strong>変数のインライン化</strong> を適用しましょう。</p><blockquote><p>一時変数のインライン化</p><p>簡単な式によって一度だけ代入される一時変数があり、それが他のリファクタリングの障害となっている。</p><p>その一時変数への参照をすべて式で置き換える。</p><p>— 新装版 リファクタリング</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    result = number.to_s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero? &amp;&amp; number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero? &amp;&amp; number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 2528</span><br><span class="line"></span><br><span class="line">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00255s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>変更によって壊れていないことが確認できたのでコミットします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'refactor:　変数のインライン化'</span></span><br></pre></td></tr></table></figure><p>続いて、FizzBuzz を判定する部分ですがもう少しわかりやすくするため <strong>説明用変数の導入</strong> を適用します。</p><blockquote><p>説明用変数の導入</p><p>複雑な式がある。</p><p>その式の結果または部分的な結果を、その目的を説明する名前をつけた一時変数に代入する。</p><p>— リファクタリング(第 2 版)</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero? &amp;&amp; number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> number.modulo(<span class="number">3</span>).zero? &amp;&amp; number.modulo(<span class="number">5</span>).zero?</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>３で割り切れる場合の結果を <code>isFizz</code> 変数に 5 で割り切れる場合の結果 <code>isBuzz</code> 変数に代入して使えるようにしました。このような変数を <strong>説明変数</strong> と呼びます。また似たようなパターンに <strong>要約変数</strong> というものがあります。FizzBuzz を返す判定部分にこの <strong>説明変数</strong> を適用しました。壊れていないか確認しておきましょう。</p><blockquote><p>説明変数</p><p>式を簡単に分割するには、式を表す変数を使えばいい。この変数を「説明変数」と呼ぶこともある。</p><p>— リーダブルコード</p></blockquote><blockquote><p>要約変数</p><p>大きなコードの塊を小さな名前に置き換えて、管理や把握を簡単にする変数のことを要約変数と呼ぶ。</p><p>— リーダブルコード</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 4314</span><br><span class="line"></span><br><span class="line">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00262s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>壊れていませんね。ではコミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'refactor:　変数の抽出'</span></span><br></pre></td></tr></table></figure><h4 id="ループと変更可能なデータ"><a href="#ループと変更可能なデータ" class="headerlink" title="ループと変更可能なデータ"></a>ループと変更可能なデータ</h4><blockquote><p>ループ</p><p>プログラミング言語の黎明期から、ループは中心的な存在でした。しかし今ではベルボトムのジーンズやペナントのお土産のように、あまり重要でなくなりつつあります。</p><p>— リファクタリング(第 2 版)</p></blockquote><p><code>FizzBuzz::generate</code> メソッドのリファクタリングはできたので続いて <code>FizzBuzz::generate_list</code> メソッドを見ていきましょう。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each &#123; <span class="params">|n|</span> result &lt;&lt; generate(n) &#125;</span><br><span class="line"></span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>空の <strong>配列</strong> を変数に代入してその変数に <code>FizzBuzz::generate</code> メソッドの結果を追加して返す処理ですがもしこのような変更をしてしまったらどうなるでしょうか？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each &#123; <span class="params">|n|</span> result &lt;&lt; generate(n) &#125;</span><br><span class="line"></span><br><span class="line">    result = []</span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 19180</span><br><span class="line"></span><br><span class="line"> FAIL[<span class="string">"test_配列の14番目は文字列のをFizzBuzz返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fa72805c018 @name="FizzBuzz::1から100までのFizzBuzzの配列を返す"&gt;, 0.0021289999967848416]</span></span><br><span class="line"> test_配列の14番目は文字列のをFizzBuzz返す<span class="comment">#FizzBuzz::1から100までのFizzBuzzの配列を返す (0.00s)</span></span><br><span class="line">        Expected: <span class="string">"FizzBuzz"</span></span><br><span class="line">          Actual: nil</span><br><span class="line">        main.rb:57:<span class="keyword">in</span> `test_配列の14番目は文字列のをFizzBuzz返す<span class="string">'</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.03063s</span></span><br><span class="line"><span class="string">19 tests, 21 assertions, 5 failures, 0 errors, 0 sk</span></span><br></pre></td></tr></table></figure><p>せっかく作った配列を初期化して返してしまいましたね。このようにミュータブルな変数はバグを作り込む原因となる傾向があります。まず一時変数を使わないように変更しましょう。</p><blockquote><p>変更可能なデータ</p><p>データの変更はしばしば予期せぬ結果や、厄介なバグを引き起こします。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>「永続的に変更されない」変数は扱いやすい。</p><p>— リーダブルコード</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>..<span class="number">100</span>).each &#123; <span class="params">|n|</span> result &lt;&lt; generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 56578</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_配列の4番目は文字列のをBuzz返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fe705854af0 @name="FizzBuzz::1から100までのFizzBuzzの配列を返す"&gt;, 0.001975000002857996]</span></span><br><span class="line"> test_配列の4番目は文字列のをBuzz返す<span class="comment">#FizzBuzz::1から100までのFizzBuzzの配列を返す (0.00s)</span></span><br><span class="line">NameError:         NameError: undefined <span class="built_in">local</span> variable or method `result<span class="string">' for FizzBuzz:Class</span></span><br><span class="line"><span class="string">            main.rb:153:in `block in generate_list'</span></span><br><span class="line">            main.rb:153:<span class="keyword">in</span> `each<span class="string">'</span></span><br><span class="line"><span class="string">            main.rb:153:in `generate_list'</span></span><br><span class="line">            main.rb:37:<span class="keyword">in</span> `setup<span class="string">'</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.01032s</span></span><br><span class="line"><span class="string">19 tests, 16 assertions, 0 failures, 5 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>一時変数 <code>result</code> は使わないので</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>..<span class="number">100</span>).each &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 35137</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_配列の4番目は文字列のをBuzz返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007f7f1384ff78 @name="FizzBuzz::1から100までのFizzBuzzの配列を返す"&gt;, 0.0014560000017809216]</span></span><br><span class="line"> test_配列の4番目は文字列のをBuzz返す<span class="comment">#FizzBuzz::1から100までのFizzBuzzの配列を返す (0.00s)</span></span><br><span class="line">NoMethodError:         NoMethodError: undefined method `[]<span class="string">' for 1..100:Range</span></span><br><span class="line"><span class="string">            main.rb:53:in `test_配列の4番目は文字列のをBuzz返す'</span></span><br><span class="line">...</span><br><span class="line">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.03285s</span><br><span class="line">19 tests, 18 assertions, 2 failures, 3 errors, 0 skips</span><br></pre></td></tr></table></figure><p>結果を配列にして返したいのですが <strong>each メソッド</strong> ではうまくできませんね。Ruby には新しい配列を  作成する <strong>map メソッド</strong> が用意されいるのでそちらを使いましょう。</p><blockquote><p>map は配列の要素を画する際によく利用されるメソッドで、ブロックの最後の要素（メモ）で新しい配列を作ります。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>..<span class="number">100</span>).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> $ ruby main.rb</span><br><span class="line">Started with run options --seed 44043</span><br><span class="line"></span><br><span class="line">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00261s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>うまくいきましたね。あと、Ruby では return を省略できるので</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 7994</span><br><span class="line"></span><br><span class="line">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00238s</span><br></pre></td></tr></table></figure><p><strong>パイプラインによるループの置き換え</strong> の適用により <strong>each メソッド</strong> による繰り返し処理を <strong>map メソッド</strong> を使ったイミュータブルなコレクションパイプライン処理に変えることができました。</p><blockquote><p>パイプラインによるループの置き換え</p><p>多くのプログラマと同様に、私もオブジェクトの集合の反復処理にはループを使うように教えられました。しかし言語環境は、よりすぐれた仕組みとしてコレクションのパイプラインを提供するようになりました。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>Ruby に限らず、プログラミングの世界ではしばしばミュータブル（mutable)とイミュータブル（imutable）と言う言葉が登場します。ミュータブルは「変更可能な」という意味で、反対にイミュータブルは「変更できない、不変の」という意味です。</p><p>— プロを目指す人のための Ruby 入門</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'refactor: パイプラインによるループの置き換え'</span></span><br></pre></td></tr></table></figure><h4 id="マジックナンバー"><a href="#マジックナンバー" class="headerlink" title="マジックナンバー"></a>マジックナンバー</h4><p>最大値は 100 にしていますが変更することもあるので <strong>マジックナンバーの置き換え</strong> を適用してわかりやすくしておきましょう。</p><blockquote><p>シンボル定数によるマジックナンバーの置き換え</p><p>特別な意味を持った数字のリテラルがある。</p><p>定数を作り、それにふさわしい名前をつけて、そのリテラルを置き換える。</p><p>— 新装版 リファクタリング</p></blockquote><p>Ruby では定数は英字の大文字で始まる名前をつけると自動的に定数として扱われます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>意味のわかる定数として宣言しました。コードに直接記述された <code>100</code> をといった <strong>数値リテラル</strong> はマジックナンバーと呼ばれ往々にして後で何を意味するものかわからなくなり変更を難しくする原因となります。早めに意味を表す定数にしておきましょう。</p><blockquote><p>名前付けされずにプログラム内に直接記述されている数値をマジックナンバーと呼び、一般的には極力避けるようにします。</p><p>— かんたん Ruby</p></blockquote><blockquote><p>いい名前というのは、変数の目的や値を表すものだ。</p><p>— リーダブルコード</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">Started with run options --seed 32408</span><br><span class="line"></span><br><span class="line">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00241s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>テストは通りました。でもこのコードは初見の人には分かりづらいのでコメントを入れておきましょう。Ruby の <strong>単一行コメントアウト</strong> のやり方は行頭に <code>#</code> を使います。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>ここではなぜこのような処理を選択したかをコメントしましたが何でもコメントすればよいというわけではありません。</p><blockquote><p>コメント</p><p>ここでコメントについて言及しているのは、コメントが消臭剤として使われることがあるからです。コメントが非常に丁寧に書かれているのは、実はわかりにくいコードを補うためだったとうことがよくあるのです。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>コメントを書くのであれば、正確に書くべきだ（できるだけ明確で詳細に）。また、コメントには画面の領域を取られるし、読むのにも時間がかかるので、簡潔なものでなければいけない。</p><p>— リーダブルコード</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add main.rb</span><br><span class="line">$ git commit -m <span class="string">'refactor: マジックナンバーの置き換え'</span></span><br></pre></td></tr></table></figure><h3 id="動作するきれいなコード"><a href="#動作するきれいなコード" class="headerlink" title="動作するきれいなコード"></a>動作するきれいなコード</h3><p>TODO リスト</p><ul><li><p><del>数を文字列にして返す</del></p><ul><li><p><del>1 を渡したら文字列”1”を返す</del></p></li><li><p><del>2 を渡したら文字列”2”を返す</del></p></li></ul></li><li><p><del>3 の倍数のときは数の代わりに｢Fizz｣と返す</del></p><ul><li><del>3 を渡したら文字列”Fizz”を返す</del></li></ul></li><li><p><del>5 の倍数のときは｢Buzz｣と返す</del></p><ul><li><del>5 を渡したら文字列”Buzz”を返す</del></li></ul></li><li><p><del>13 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</del></p><ul><li><del>15 を渡したら文字列 FizzBuzz を返す</del></li></ul></li><li><p><del>1 から 100 までの FizzBuzz の配列を返す</del></p><ul><li><p><del>配列の初めは文字列の 1 を返す</del></p></li><li><p><del>配列の最後は文字列の 100 を返す</del></p></li><li><p><del>配列の 2 番めは文字列の Fizz を返す</del></p></li><li><p><del>配列の 4 番目は文字列の Buzz を返す</del></p></li><li><p><del>配列の 14 番目は文字列の FizzBuzz を返す</del></p></li></ul></li><li><p>プリントする</p></li></ul><p><strong>TODO リスト</strong> も残すところあと１つとなりました。これまで <code>main.rb</code> ファイル１つだけで開発を行ってきましたがリリースするにはもうひと手間かけたほうがいいでしょうね。lib ディレクトリを作成したあと <code>main.rb</code> ファイルを <code>fizz_buzz.rb</code> ファイルに名前を変更して lib ディレクトリに移動します。</p><pre><code>/|--lib/    |     -- fizz_buzz.rb</code></pre><p>続いてテストコードをテストディレクトリに保存してプログラム本体とテストコードを分離します</p><pre><code>/|--lib/    |     -- fizz_buzz.rb|--test/    |     -- fizz_buzz_test.rb</code></pre><p>分離したテストが動くか確認しておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fizz_buzz_test.rb</span><br><span class="line">Started with run options --seed 17134</span><br><span class="line"></span><br><span class="line">ERROR[<span class="string">"test_1を渡したら文字列1を返す"</span>, <span class="comment">#&lt;Minitest::Reporters::Suite:0x00007fc07a085060 @name="FizzBuzz::その他の場合"&gt;, 0.001282999997783918]</span></span><br><span class="line"> test_1を渡したら文字列1を返す<span class="comment">#FizzBuzz::その他の場合 (0.00s)</span></span><br><span class="line">NameError:         NameError: uninitialized constant FizzBuzzTest::FizzBuzz</span><br><span class="line">        Did you mean?  FizzBuzzTest</span><br><span class="line">            <span class="built_in">test</span>/fizz_buzz_test.rb:8:<span class="keyword">in</span> `setup<span class="string">'</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">  19/19: [===============================] 100% Time: 00:00:00, Time: 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished in 0.03717s</span></span><br><span class="line"><span class="string">19 tests, 12 assertions, 0 failures, 9 errors, 0 skips</span></span><br></pre></td></tr></table></figure><p>テストファイルから FizzBuzz クラスを読み込めるようにする必要があります。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Ruby で別のファイルを読み込むには <strong>require</strong> を使います。</p><blockquote><p>require を使う用途は主に三つあります。</p><ul><li><p>標準添付ライブラリを読み込む</p></li><li><p>第三者が作成しているライブラリを読み込む</p></li><li><p>別ファイルに定義した自分のファイルを読み込む</p></li></ul><p>— かんたん Ruby</p></blockquote><p>また、<strong>require_relative</strong></p><blockquote><p>という方法も用意されています。どう違うのでしょうか？</p></blockquote><blockquote><p>require_relative は$LOAD_PATH の参照は行わず「relative」という名称の通り相対的なパスでファイルの読み込みを行います。</p><p>— かんたん Ruby</p></blockquote><p>ちょっと何言ってるかわからないうちは <strong>require</strong> を上記のフォルダ構成で使っていてください。一応以下の使い分けがありますが今は頭の隅に留めるだけでいいと思います。</p><blockquote><p>require は標準添付ライブラリなどの自分が書いていないコードを読み込む時に使い、こちらの require_relative は自分の書いたコードを読み込む時に使うように使い分けるのが良いでしょう。</p><p>— かんたん Ruby</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fizz_buzz_test.rb</span><br><span class="line">Started with run options --seed 44438</span><br><span class="line"></span><br><span class="line">  19/19: [=================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00279s</span><br><span class="line">19 tests, 21 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>では最後に <code>main.rb</code> ファイルを追加して <code>FizzBuzz:generate_list</code> を呼び出すようにします。</p><pre><code>/main.rb  |--lib/      |       -- fizz_buzz.rb  |--test/      |       -- fizz_buzz_test.rb</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz.rb'</span></span><br><span class="line"></span><br><span class="line">puts FizzBuzz.generate_list</span><br></pre></td></tr></table></figure><p><strong>puts</strong> は結果を画面に出力するメソッドです。 先程は <strong>p</strong> メソッドを使って画面に <strong>配列</strong> の中身を１件ずつ表示していましたが今回は <strong>配列</strong> 自体を改行して画面に出力するため <strong>puts</strong> メソッドを使います。機能的にはほどんど変わらないのですが以下の様に使い分けるそうです。</p><blockquote><p>まず、用途としては puts メソッドと print メソッドは一般ユーザ向け、p メソッドは開発者向け、というふうに別かれます。</p><p>— プロを目指す人のための Ruby 入門</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">Fizz</span><br><span class="line">4</span><br><span class="line">Buzz</span><br><span class="line">Fizz</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">Fizz</span><br><span class="line">Buzz</span><br><span class="line">11</span><br><span class="line">Fizz</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">FizzBuzz</span><br><span class="line">...</span><br><span class="line">Buzz</span><br></pre></td></tr></table></figure><p>ちなみに <strong>print</strong> メソッドを使った場合はこのように出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ruby main.rb</span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"Fizz"</span>, <span class="string">"4"</span>, <span class="string">"Buzz"</span>, <span class="string">"Fizz"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"Fizz"</span>, <span class="string">"Buzz"</span>, <span class="string">"11"</span>, <span class="string">"Fizz"</span>, <span class="string">"13"</span>, <span class="string">"14"</span>, <span class="string">"FizzBuzz"</span>, <span class="string">"16"</span>, <span class="string">"17"</span>, <span class="string">"Fizz"</span>, <span class="string">"19"</span>, <span class="string">"Buzz"</span>, <span class="string">"Fizz"</span>, <span class="string">"22"</span>, <span class="string">"23"</span>, <span class="string">"Fizz"</span>, <span class="string">"Buzz"</span>, <span class="string">"26"</span>, <span class="string">"Fizz"</span>, <span class="string">"28"</span>, <span class="string">"29"</span>, <span class="string">"FizzBuzz"</span>, <span class="string">"31"</span>, <span class="string">"32"</span>, <span class="string">"Fizz"</span>, <span class="string">"34"</span>, <span class="string">"Buzz"</span>, <span class="string">"Fizz"</span>, <span class="string">"37"</span>, <span class="string">"38"</span>, <span class="string">"Fizz"</span>, <span class="string">"Buzz"</span>, <span class="string">"41"</span>, <span class="string">"Fizz"</span>, <span class="string">"43"</span>, <span class="string">"44"</span>, <span class="string">"FizzBuzz"</span>, <span class="string">"46"</span>, <span class="string">"47"</span>, <span class="string">"Fizz"</span>, <span class="string">"49"</span>, <span class="string">"Buzz"</span>, <span class="string">"Fizz"</span>, <span class="string">"52"</span>, <span class="string">"53"</span>, <span class="string">"Fizz"</span>, <span class="string">"Buzz"</span>, <span class="string">"56"</span>, <span class="string">"Fizz"</span>, <span class="string">"58"</span>, <span class="string">"59"</span>, <span class="string">"FizzBuzz"</span>, <span class="string">"61"</span>, <span class="string">"62"</span>, <span class="string">"Fizz"</span>, <span class="string">"64"</span>, <span class="string">"Buzz"</span>, <span class="string">"Fizz"</span>, <span class="string">"67"</span>, <span class="string">"68"</span>, <span class="string">"Fizz"</span>, <span class="string">"Buzz"</span>, <span class="string">"71"</span>, <span class="string">"Fizz"</span>, <span class="string">"73"</span>, <span class="string">"74"</span>, <span class="string">"FizzBuzz"</span>, <span class="string">"76"</span>, <span class="string">"77"</span>, <span class="string">"Fizz"</span>, <span class="string">"79"</span>, <span class="string">"Buzz"</span>, <span class="string">"Fizz"</span>, <span class="string">"82"</span>, <span class="string">"83"</span>, <span class="string">"Fizz"</span>, <span class="string">"Buzz"</span>, <span class="string">"86"</span>, <span class="string">"Fizz"</span>, <span class="string">"88"</span>, <span class="string">"89"</span>, <span class="string">"FizzBuzz"</span>, <span class="string">"91"</span>, <span class="string">"92"</span>, <span class="string">"Fizz"</span>, <span class="string">"94"</span>, <span class="string">"Buzz"</span>, <span class="string">"Fizz"</span>, <span class="string">"97"</span>, <span class="string">"98"</span>, <span class="string">"Fizz"</span>, <span class="string">"Buzz"</span>] $</span><br></pre></td></tr></table></figure><p>プログラムの完成です。コミットしておきましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">'feat: プリントする'</span></span><br></pre></td></tr></table></figure><p>TODO リスト</p><ul><li><p><del>数を文字列にして返す</del></p><ul><li><p><del>1 を渡したら文字列”1”を返す</del></p></li><li><p><del>2 を渡したら文字列”2”を返す</del></p></li></ul></li><li><p><del>3 の倍数のときは数の代わりに｢Fizz｣と返す</del></p><ul><li><del>3 を渡したら文字列”Fizz”を返す</del></li></ul></li><li><p><del>5 の倍数のときは｢Buzz｣と返す</del></p><ul><li><del>5 を渡したら文字列”Buzz”を返す</del></li></ul></li><li><p><del>13 と 5 両方の倍数の場合には｢FizzBuzz｣と返す</del></p><ul><li><del>15 を渡したら文字列 FizzBuzz を返す</del></li></ul></li><li><p><del>1 から 100 までの FizzBuzz の配列を返す</del></p><ul><li><p><del>配列の初めは文字列の 1 を返す</del></p></li><li><p><del>配列の最後は文字列の 100 を返す</del></p></li><li><p><del>配列の 2 番めは文字列の Fizz を返す</del></p></li><li><p><del>配列の 4 番目は文字列の Buzz を返す</del></p></li><li><p><del>配列の 14 番目は文字列の FizzBuzz を返す</del></p></li></ul></li><li><p><del>プリントする</del></p></li></ul><h4 id="ふりかえり"><a href="#ふりかえり" class="headerlink" title="ふりかえり"></a>ふりかえり</h4><p><code>FizzBuzz</code> プログラムの最初のバージョンをリリースすることができたのでこれまでのふりかえりをしておきましょう。</p><p>まず <strong>TODO リスト</strong> を作成して <strong>テストファースト</strong> で１つずつ小さなステップで開発を進めていきました。 <strong>仮実装を経て本実装へ</strong> の過程で Ruby の <strong>クラス</strong> を定義して <strong>文字列リテラル</strong> を返す <strong>メソッド</strong> を作成しました。この時点で Ruby の <strong>オブジェクトとメソッド</strong> という概念に触れています。</p><blockquote><p>Ruby の世界では、ほぼどのような値もオブジェクトという概念で表されます。オブジェクトという表現はかなり範囲の広い表現方法で、クラスやインスタンスを含めてオブジェクトと称します。</p><p>— かんたん Ruby</p></blockquote><blockquote><p>プログラミング言語においてメソッド、あるいは関数と呼ばれるものを簡単に説明すると処理をひとかたまりにまとめたものと言って良いでしょう。</p><p>— かんたん Ruby</p></blockquote><p>ちょっと何言ってるかわからないかもしれませんが、今はそういう概念があってこうやって書くのねという程度の理解で十分です。</p><p>その後 <strong>リファクタリング</strong> を通じて多くの概念に触れることになりました。 まず <strong>変数名の変更</strong> で Ruby における <strong>変数</strong>の概念と操作を通じて名前付けの重要性を学びました。</p><blockquote><p>Ruby では変数を扱うために特別な宣言やキーワードは必要ありません。「=」 の左辺に任意の変数名を記述するだけで変数宣言となります。</p><p>— かんたん Ruby</p></blockquote><p>続いて <strong>明白な実装</strong> を通して <strong>制御構造</strong> のうち <strong>条件分岐</strong> のための <strong>if 式</strong> と <strong>演算子</strong> を使いプログラムを制御し判定・計算をする方法を学びました。また、<strong>アルゴリズムの置き換え</strong> を適用してコードをよりわかりやすくしました。</p><blockquote><p>Ruby ではプログラムを構成する最小の要素を式と呼びます。変数やリテラル、制御構文、演算子などが式として扱われます。</p><p>— かんたん Ruby</p></blockquote><p>そして、 <strong>学習用テスト</strong> を通して新しい問題を解決するために <strong>配列オブジェクト</strong> <strong>レンジオブジェクト</strong> といった <strong>文字列リテラル</strong> <strong>数値リテラル</strong> 以外の <strong>データ構造</strong> の使い方を学習して、<strong>配列</strong> を操作するための <strong>制御構造</strong> として <strong>繰り返し処理</strong> を <strong>each メソッド</strong> を使って実現しました。</p><blockquote><p>これら「100」や「3.14」といった部分を数値リテラルと呼びます。</p><p>— かんたん Ruby</p></blockquote><blockquote><p>このように文字列をシングルクオートやダブルクオートで括っている表記を文字列リテラルと呼びます。</p><p>— かんたん Ruby</p></blockquote><p>仕上げは、<strong>コードの不吉な臭い</strong> からさらなる改善を実施しました。 <strong>不思議な名前</strong> の <strong>メソッド</strong> を <strong>自動的テスト</strong>を用意することで自信を持って <strong>リファクタリング</strong> を実施し、<strong>長い関数</strong> に対して <strong>ガード節</strong> を導入し <strong>一時変数</strong> <strong>説明変数</strong> など <strong>変数</strong> バリエーションの取り扱いを学びました。そして、<strong>ループ</strong> と <strong>変更可能なデータ</strong> から <strong>コレクションパイプライン</strong> の使い方と <strong>ミュータブル</strong> <strong>イミュータブル</strong> の概念を学び、<strong>コメント</strong> のやり方と <strong>定数</strong> と <strong>マジックナンバー</strong> の問題を学びました。</p><p>最後に、<strong>require</strong> の使い方を通してファイルの分割方法を学ぶことができました。</p><p>ちょっと何言ってるかわからない単語ばかり出てきたかもしれませんがこれで Ruby の基本の半分は抑えています。自分で FizzBuzz コードが書けて用語の意味が説明できるようになれば技能・学科第一段階の半分ぐらいといったところでしょうか。仮免許取得にはまだ習得しなければならない技術と知識がありますので。</p><h4 id="良いコード"><a href="#良いコード" class="headerlink" title="良いコード"></a>良いコード</h4><p>以下のコードを作成しました。</p><p><strong>/main.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz.rb'</span></span><br><span class="line"></span><br><span class="line">puts FizzBuzz.generate_list</span><br></pre></td></tr></table></figure><p><strong>/lib/fizz_buzz.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  MAX_NUMBER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate</span><span class="params">(number)</span></span></span><br><span class="line">    is_fizz = number.modulo(<span class="number">3</span>).zero?</span><br><span class="line">    is_buzz = number.modulo(<span class="number">5</span>).zero?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FizzBuzz'</span> <span class="keyword">if</span> is_fizz &amp;&amp; is_buzz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Fizz'</span> <span class="keyword">if</span> is_fizz</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Buzz'</span> <span class="keyword">if</span> is_buzz</span><br><span class="line"></span><br><span class="line">    number.to_s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">generate_list</span></span></span><br><span class="line">    <span class="comment"># 1から最大値までのFizzBuzz配列を1発で作る</span></span><br><span class="line">    (<span class="number">1</span>..MAX_NUMBER).map &#123; <span class="params">|n|</span> generate(n) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>/test/fizz_buzz_test.rb.</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./lib/fizz_buzz'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @fizzbuzz = FizzBuzz</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'三の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列<span class="title">Fizz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Fizz'</span>, @fizzbuzz.generate(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Buzz'</span>, @fizzbuzz.generate(<span class="number">5</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'三と五の倍数の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'FizzBuzz'</span>, @fizzbuzz.generate(<span class="number">15</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'その他の場合'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">        assert_equal <span class="string">'1'</span>, @fizzbuzz.generate(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_2</span>を渡したら文字列2を返す</span></span><br><span class="line">        assert_equal <span class="string">'2'</span>, @fizzbuzz.generate(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'1から100までのFizzBuzzの配列を返す'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @result = FizzBuzz.generate_list</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">        assert_equal <span class="string">'1'</span>, @result.first</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の最後は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Buzz'</span>, @result.last</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の2番目は文字列の<span class="title">Fizz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Fizz'</span>, @result[<span class="number">2</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の4番目は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Buzz'</span>, @result[<span class="number">4</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の14番目は文字列の<span class="title">FizzBuzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'FizzBuzz'</span>, @result[<span class="number">14</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">'配列や繰り返し処理を理解する'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>繰り返し処理</span></span><br><span class="line">      $stdout = StringIO.new</span><br><span class="line">      [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].each &#123; <span class="params">|i|</span> p i * i &#125;</span><br><span class="line">      output = $stdout.string</span><br><span class="line"></span><br><span class="line">      assert_equal <span class="string">"1\n"</span> + <span class="string">"4\n"</span> + <span class="string">"9\n"</span>, output</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].select(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たす要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].find_all(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">2</span>, <span class="number">4</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>特定の条件を満たさない要素だけを配列に入れて返す</span></span><br><span class="line">      result = [<span class="number">1.1</span>, <span class="number">2</span>, <span class="number">3.3</span>, <span class="number">4</span>].reject(&amp;<span class="symbol">:integer?</span>)</span><br><span class="line">      assert_equal [<span class="number">1.1</span>, <span class="number">3.3</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.map(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>新しい要素の配列を返す</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.collect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal [<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.find(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry]</span>.detect(&amp;<span class="symbol">:size</span>)</span><br><span class="line">      assert_equal <span class="string">'apple'</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定した評価式で並び変えた配列を返す</span></span><br><span class="line">      assert_equal <span class="string">%w[1 10 13 2 3 4]</span>, <span class="string">%w[2 4 13 3 1 10]</span>.sort</span><br><span class="line">      assert_equal <span class="string">%w[1 2 3 4 10 13]</span>,</span><br><span class="line">                   <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|a, b|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line">      assert_equal <span class="string">%w[13 10 4 3 2 1]</span>,</span><br><span class="line">                   <span class="string">%w[2 4 13 3 1 10]</span>.sort &#123; <span class="params">|b, a|</span> a.to_i &lt;=&gt; b.to_i &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の中から条件に一致する要素を取得する</span></span><br><span class="line">      result = <span class="string">%w[apple orange pineapple strawberry apricot]</span>.grep(<span class="regexp">/^a/</span>)</span><br><span class="line">      assert_equal <span class="string">%w[apple apricot]</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である間までの要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>].take_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>ブロック内の条件式が真である以降の要素を返す</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>].drop_while &#123; <span class="params">|item|</span> item &lt; <span class="number">6</span> &#125;</span><br><span class="line">      assert_equal [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].inject(<span class="number">0</span>) &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_</span>畳み込み演算を行う</span></span><br><span class="line">      result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce &#123; <span class="params">|total, n|</span> total + n &#125;</span><br><span class="line">      assert_equal <span class="number">15</span>, result</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>どうでしょう、学習用テストは除くとしてプロダクトコードに対して倍以上のテストコードを作っていますよね。テストコードを作らず一発で <code>fizz_buzz.rb</code> のようなコードを書くことはできますか？ たしかに <a href="https://www.google.com/search?hl=ja&sxsrf=ACYBGNTdUEAzXtUgi9nlBCK6fnpac2rtIg%3A1579588091710&source=hp&ei=-5kmXs7SKIPnwQO9rYbgBA&q=fizz+buzz+ruby&oq=fizz&gs_l=psy-ab.3.0.35i39l3j0l3j0i131j0.636.1384..2671...1.0..0.205.540.1j2j1......0....1..gws-wiz.......0i4j0i131i4.du79cnj-Ge4" target="_blank" rel="noopener">fizz buzz ruby</a> といったキーワードで検索すればサンプルコードは見つかるのでコピーして同じ振る舞いをするコードをすぐに書くことはできるでしょう。でも仕様が追加された場合はどうしましょう。</p><p>仕様</p><pre><code>1 から 100 までの数をプリントするプログラムを書け。ただし 3 の倍数のときは数の代わりに｢Fizz｣と、5 の倍数のときは｢Buzz｣とプリントし、3 と 5 両方の倍数の場合には｢FizzBuzz｣とプリントすること。タイプごとに出力を切り替えることができる。タイプ１は通常、タイプ２は数字のみ、タイプ３は FizzBuzz の場合のみをプリントする。</code></pre><p>また同じようなコードサンプルを探しますか？私ならば <strong>TODO リスト</strong> に以下の項目を追加することから始めます。</p><p>TODO リスト</p><ul><li><p>タイプ 1 の場合</p><ul><li><p>数を文字列にして返す</p><ul><li>1 を渡したら文字列”1”を返す</li></ul></li></ul></li></ul><p>次に何をやるかはもうわかりますよね。テスト駆動開発とはただ失敗するテストを１つずつ書いて通していくことではありません。</p><blockquote><p>TDD は分析技法であり、設計技法であり、実際には開発のすべてのアクティビティを構造化する技法なのだ。</p><p>— テスト駆動開発</p></blockquote><p>ではテストファーストで書けば質の高い良いコードがかけるようになるのでしょうか？以下のコードを見てください。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/reporters'</span></span><br><span class="line">Minitest::Reporters.use!</span><br><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz</span></span></span><br><span class="line">  <span class="comment"># fizz_buzzメソッドを実行する</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">fizz_buzz</span><span class="params">(n)</span></span></span><br><span class="line">  a = n.to_s</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">3</span> == <span class="number">0</span></span><br><span class="line">      a = <span class="string">'Fizz'</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">15</span> == <span class="number">0</span></span><br><span class="line">      a = <span class="string">'FizzBuzz'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">elsif</span> n % <span class="number">5</span> == <span class="number">0</span></span><br><span class="line">          a = <span class="string">'Buzz'</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">           a</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1から100までをプリントする</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_1_to_100</span></span></span><br><span class="line">              n = []</span><br><span class="line">    (<span class="number">1</span>..<span class="number">100</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  n &lt;&lt; fizz_buzz(i)</span><br><span class="line">                        <span class="keyword">end</span></span><br><span class="line">  n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FizzBuzzTest</span> &lt; Minitest::Test</span></span><br><span class="line">  describe <span class="string">'FizzBuzz'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">      @p = FizzBuzz</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_15</span>を渡したら文字列<span class="title">p</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'FizzBuzz'</span>, FizzBuzz.fizz_buzz(<span class="number">15</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_3</span>を渡したら文字列3を返す</span></span><br><span class="line">        assert_equal <span class="string">'Fizz'</span>, FizzBuzz.fizz_buzz(<span class="number">3</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_1</span>を渡したら文字列1を返す</span></span><br><span class="line">        assert_equal <span class="string">'1'</span>, @p.fizz_buzz(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_5</span>を渡したら文字列<span class="title">Buzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Buzz'</span>, FizzBuzz.fizz_buzz(<span class="number">5</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    describe <span class="string">'1から100までプリントする'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @x = FizzBuzz.print_1_to_10<span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の4番目は文字列のを<span class="title">Buzz</span>返す</span></span><br><span class="line">    assert_equal <span class="string">'Buzz'</span>, @x[<span class="number">4</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の初めは文字列の1を返す</span></span><br><span class="line">        assert_equal <span class="string">'1'</span>, @x.first</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の最後は文字列の<span class="title">Buzz</span>を返す</span></span><br><span class="line">        assert_equal <span class="string">'Buzz'</span>, FizzBuzz.print_1_to_10<span class="number">0</span>.last</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の14番目は文字列の<span class="title">FizzBuzz</span>返す</span></span><br><span class="line">  assert_equal <span class="string">'FizzBuzz'</span>, @x[<span class="number">14</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>配列の2番目は文字列の2を返す</span></span><br><span class="line">    assert_equal <span class="string">'Fizz'</span>, @x[<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="built_in">test</span>/fizz_buzz_tfd_test.rb</span><br><span class="line">Started with run options --seed 43131</span><br><span class="line"></span><br><span class="line">  9/9: [===================================================================] 100% Time: 00:00:00, Time: 00:00:00</span><br><span class="line"></span><br><span class="line">Finished <span class="keyword">in</span> 0.00135s</span><br><span class="line">9 tests, 9 assertions, 0 failures, 0 errors, 0 skips</span><br></pre></td></tr></table></figure><p>プログラムは動くしテストも通ります。でもこれはテスト駆動開発で作られたと言えるでしょうか？質の高い良いコードでしょうか？何が足りないかはわかりますよね。</p><blockquote><p>テスト駆動開発における質の向上の手段は、リファクタリングによる継続的でインクリメンタルな設計であり、「単なるテストファースト」と「テスト駆動開発」の違いはそこにあります。</p><p>— テスト駆動開発 付録 C 訳者解説</p></blockquote><p>そもそも良いコードは何なのでしょうか？いくつかの見解があるようです。</p><blockquote><p>TDD は「より良いコードを書けば、よりうまくいく」という素朴で奇妙な仮設によって成り立っている</p><p>— テスト駆動開発</p></blockquote><blockquote><p>「動作するきれいなコード」。RonJeffries のこの簡潔な言葉が、テスト駆動開発(TDD)のゴールだ。動作するきれいなコードはあらゆる意味で価値がある。</p><p>— テスト駆動開発</p></blockquote><blockquote><p>良いコードかどうかは、変更がどれだけ容易なのかで決まる。</p><p>— リファクタリング(第 2 版)</p></blockquote><blockquote><p>コードは理解しやすくなければいけない。</p><p>— リーダブルコード</p></blockquote><blockquote><p>コードは他の人が最短時間で理解できるように書かなければいけない。</p><p>— リーダブルコード</p></blockquote><blockquote><p>優れたソースコードは「目に優しい」ものでなければいけない。</p><p>— リーダブルコード</p></blockquote><p>少なくともテスト駆動開発のゴールに良いコードがあるということはいえるでしょう。え？どうやったら良いコードを書けるようになるかって？私が教えてほしいのですがただ言えることは他の分野と同様に規律の習得と絶え間ない練習と実践の積み重ねのむこうにあるのだろうということだけです。</p><blockquote><p>私がかつて発見した、そして多くの人に気づいてもらいたい効果とは、反復可能な振る舞いを規則にまで還元することで、規則の適用は機会的に反復可能になるということだ。</p><p>— テスト駆動開発</p></blockquote><blockquote><p>ここで、Kent Beck が自ら語ったセリフを思い出しました。「僕は、偉大なプログラマなんかじゃない。偉大な習慣を身につけた少しましなプログラマなんだ」。</p><p>— リファクタリング(第 2 版)</p></blockquote><h1 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h1><h2 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h2><ul><li><a href="https://channel9.msdn.com/Events/de-code/2017/DO03?ocid=player" target="_blank" rel="noopener">50 分でわかるテスト駆動開発</a></li><li><a href="https://backlog.com/ja/git-tutorial/" target="_blank" rel="noopener">サルでもわかる Git 入門〜バージョン管理を使いこなそう〜</a></li><li><a href="https://docs.ruby-lang.org/ja/" target="_blank" rel="noopener">プログラミング言語 Ruby リファレンスマニュアル</a></li><li><a href="https://qiita.com/jnchito/items/2dc760ee0716ea12bbf0" target="_blank" rel="noopener">検索結果を要チェック！Ruby の公式リファレンスは docs.ruby-lang.org です〜公式な情報源を調べるクセを付けよう〜</a></li><li><a href="https://t-wada.hatenablog.jp/entry/clean-code-that-works" target="_blank" rel="noopener">動作するきれいなコード: SeleniumConf Tokyo 2019 基調講演文字起こし+α</a></li></ul><h2 id="参考図書"><a href="#参考図書" class="headerlink" title="参考図書"></a>参考図書</h2><ul><li><p>[1] テスト駆動開発 Kent Beck (著), 和田 卓人 (翻訳): オーム社; 新訳版 (2017/10/14)</p></li><li><p>[2] 新装版 リファクタリング―既存のコードを安全に改善する― (OBJECT TECHNOLOGY SERIES) Martin<br>Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章 (翻訳), その他: オーム社; 新装版<br>(2014/7/26)</p></li><li><p>[3] リファクタリング(第 2 版): 既存のコードを安全に改善する (OBJECT TECHNOLOGY SERIES) Martin<br>Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章 (翻訳), その他: オーム社; 第 2 版<br>(2019/12/1)</p></li><li><p>[4] リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)<br>Dustin Boswell (著), Trevor Foucher (著), 須藤 功平 (解説), 角 征典 (翻訳):<br>オライリージャパン; 初版八刷版 (2012/6/23)</p></li><li><p>[5] かんたん Ruby (プログラミングの教科書) すがわらまさのり (著) 技術評論社 (2018/6/21)</p></li><li><p>[6] プロを目指す人のための Ruby 入門 言語仕様からテスト駆動開発・デバッグ技法まで (Software Design plus シリーズ) 伊藤 淳一 (著): 技術評論社 (2017/11/25)</p></li></ul><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&t=k2works0c-22&m=amazon&o=9&p=8&l=as1&IS1=1&detail=1&asins=4274217884&linkId=568f25b974af5645e862928a12c354e1&bc1=ffffff&lt1=_top&fc1=333333&lc1=0066c0&bg1=ffffff&f=ifr"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&t=k2works0c-22&m=amazon&o=9&p=8&l=as1&IS1=1&detail=1&asins=427405019X&linkId=08e705a5969e20f5129b4d3cefbcdb15&bc1=000000&lt1=_top&fc1=333333&lc1=0066c0&bg1=ffffff&f=ifr"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4274224546&linkId=5f857b58e988073ce92e0adcf1dd3ebb"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4873115655&linkId=82416afd8e4042cbfd2dc6d4b80653f1"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B078HYWY5X&linkId=920b3fce45a79c528e5be0b2140cce9c"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4774198617&linkId=7858ddef815d9a093fcacb3a1208b774"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=k2works0c-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4774193976&linkId=fee0d915272172c2e25393dd52537bdc"></iframe>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
          <category> プログラミング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> テスト駆動開発 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>環境構築から始めるテスト駆動開発 ~Ruby開発環境を構築する(WSL版)~</title>
      <link href="/2020/04/07/2020-04-08-3/"/>
      <url>/2020/04/07/2020-04-08-3/</url>
      
        <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>これは <a href="https://k2works.github.io/2020/04/07/2020-04-08-1/">環境構築から始めるテスト駆動開発 ~ プログラミング環境の共通基盤を構築する ~</a> の開発言語セットアップ記事です。Windows 10 Home で共通基盤が構築されていることを前提としています。</p><a id="more"></a><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>Ruby 開発環境の自動構築をするため以下のレポジトリを自分のレポジトリにフォークします。</p><p><a href="https://github.com/hiroshima-arc/tdd_rb" target="_blank" rel="noopener">テスト駆動開発から始める Ruby 入門</a></p><p><code>Fork</code> を押します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-001.png?raw=true" alt="provision 001"></p><p><code>Fork</code> が完了して自分のレポジトリにコピーされたら <code>Clone or download</code> を押してレポジトリの URL をコピーします。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-002.png?raw=true" alt="provision 002"></p><p>エクスプローラアイコンメニューから <code>レポジトリをクローンする</code> を押します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-003.png?raw=true" alt="provision 003"></p><p>先程コピーしたレポジトリの URL を貼り付けます。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-004.png?raw=true" alt="provision 004"></p><p>保存先はそのままで <code>OK</code> を押します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-005.png?raw=true" alt="provision 005"></p><p><code>開く</code> を押します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-006.png?raw=true" alt="provision 006"></p><p>メニューから <code>ターミナル</code> <code>新しいターミナル</code> を選択します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-007-1.png?raw=true" alt="provision 007 1"></p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-007-2.png?raw=true" alt="provision 007 2"></p><p>ターミナルに以下のコマンドを入力します。実行時にパスワード入力が求められるので WSL で設定したパスワードを入力してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update -y</span><br><span class="line">[sudo] password <span class="keyword">for</span> newbie4649:</span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-008.png?raw=true" alt="provision 008"></p><p>続いて、ターミナルに以下のコマンドを入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install ansible -y</span><br></pre></td></tr></table></figure><p>続いて、エクスプローラから　<code>provisioning/vars/site.yml</code> をファイルを開いて <code>user:</code> の名前を WSL で設定したユーザー ID に変更します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-009.png?raw=true" alt="provision 009"></p><p>変更を保存したらターミナルに以下のコマンドを入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> provisioning/tasks/</span><br><span class="line">$ sudo ansible-playbook --inventory=localhost, --connection=<span class="built_in">local</span> site.yml</span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-010.png?raw=true" alt="provision 010"></p><p>セットアップが完了したらエディタを再起動してプロジェクトを開きます。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-010-2.png?raw=true" alt="provision 010 2"></p><p>以下のコマンドを入力して Ruby がセットアップされていることを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -v</span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-011.png?raw=true" alt="provision 011"></p><p>続いて、ターミナルに以下のコマンドを入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ code ~/.bashrc</span><br></pre></td></tr></table></figure><p>表示されたファイルの一番最後に以下のコードを追加して保存します。</p><pre><code>...export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot; # This loads nvm bash_compl</code></pre><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-012.png?raw=true" alt="provision 012"></p><p>保存したら以下のコマンドを実行して Node.js のバージョンが表示されたらセットアップ完了です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">$ nvm install --lts</span><br><span class="line">$ node -v</span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/provision-013.png?raw=true" alt="provision 013"></p><h2 id="追加パッケージのインストール"><a href="#追加パッケージのインストール" class="headerlink" title="追加パッケージのインストール"></a>追加パッケージのインストール</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby" target="_blank" rel="noopener">Ruby for Visual Studio Code</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=castwide.solargraph" target="_blank" rel="noopener">Ruby Solargraph</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=kaiwood.endwise" target="_blank" rel="noopener">vscode-endwise</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=misogi.ruby-rubocop" target="_blank" rel="noopener">ruby-rubocop</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-test-explorer" target="_blank" rel="noopener">Test Explorer UI</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=connorshea.vscode-ruby-test-adapter" target="_blank" rel="noopener">Ruby Test Explorer</a></p><p>ターミナルに以下のコマンドを入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gem install rubocop</span><br><span class="line">gem install debase</span><br><span class="line">gem install ruby-debug-ide</span><br><span class="line">gem install solargraph</span><br></pre></td></tr></table></figure><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><h3 id="プログラムを作成する"><a href="#プログラムを作成する" class="headerlink" title="プログラムを作成する"></a>プログラムを作成する</h3><p><code>REAMD.md</code> を選択してから <code>新しいファイル</code> 作成アイコンを押します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-001.png?raw=true" alt="ruby hello 001"></p><p>ファイル名は <code>main.rb</code> とします。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-002.png?raw=true" alt="ruby hello 002"></p><p>ファイルに以下のコードを入力したら Run アイコンを選択して <code>create a launch.json file</code> を押してメニューから Ruby を選択します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-003.png?raw=true" alt="ruby hello 003"></p><p><code>Debug Local File</code> を選択します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-004.png?raw=true" alt="ruby hello 004"></p><p><code>launch.json</code> ファイルが作成されたら <code>main.rb</code> タブに戻って F5 キーを押します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-005.png?raw=true" alt="ruby hello 005"></p><p>デバッグコンソールに実行結果が表示されれば準備完了です。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-006.png?raw=true" alt="ruby hello 006"></p><p>テストをパスするようにコードを修正して F5 キーを押します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-007.png?raw=true" alt="ruby hello 007"></p><p>テスティングフレームワークの動作が確認できたので <code>hello_world</code> 関数の作成に入ります。まず以下のコードを追加して F5 キーを押してテストが失敗することを確認します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>簡単な挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-008.png?raw=true" alt="ruby hello 008"></p><p><code>hello_world</code> 関数を追加してテストをパスさせます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>簡単な挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span></span></span><br><span class="line">  <span class="string">'Hello from Ruby'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-009.png?raw=true" alt="ruby hello 009"></p><p>指定された名前で挨拶を返すようにします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>簡単な挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定された名前で挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from VSCode'</span>, hello_world(<span class="string">'VSCode'</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span></span></span><br><span class="line">  <span class="string">"Hello from Ruby"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-010.png?raw=true" alt="ruby hello 010"></p><p>関数に引数を追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>簡単な挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定された名前で挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from VSCode'</span>, hello_world(<span class="string">'VSCode'</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(name)</span></span></span><br><span class="line">  <span class="string">"Hello from <span class="subst">#&#123;name&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-011.png?raw=true" alt="ruby hello 011"></p><p><code>指定された名前で挨拶を返す</code> テストはパスしましたが今度は <code>簡単な挨拶を返す</code> テストが失敗するようになりましたのでデフォルト引数を設定してテストをパスするようにします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>簡単な挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定された名前で挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from VSCode'</span>, hello_world(<span class="string">'VSCode'</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(name = <span class="string">'Ruby'</span>)</span></span></span><br><span class="line">  <span class="string">"Hello from <span class="subst">#&#123;name&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-012.png?raw=true" alt="ruby hello 012"></p><p>仕上げに不要なテストを削除してテストケースの文言をわかりやすくしておきます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何も指定されていない場合は既定の挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定された名前で挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from VSCode'</span>, hello_world(<span class="string">'VSCode'</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(name = <span class="string">'Ruby'</span>)</span></span></span><br><span class="line">  <span class="string">"Hello from <span class="subst">#&#123;name&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-hello-013.png?raw=true" alt="ruby hello 013"></p><h3 id="プログラムをデバッグする"><a href="#プログラムをデバッグする" class="headerlink" title="プログラムをデバッグする"></a>プログラムをデバッグする</h3><p>まず確認したいプログラムの行を左部分を押してブレークポイント（赤丸）を設定します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-debug-001.png?raw=true" alt="ruby debug001"></p><p>ブレークポイントを設定したら F5 を押してプログラムの実行します。そうするとブレークポイント部分でプログラムが停止して変数などの情報が確認できるようになります。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-debug-002.png?raw=true" alt="ruby debug 002"></p><p>画面上の実行ボタンを押すと次のブレークポイントに移動します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-debug-003.png?raw=true" alt="ruby debug 003"></p><p>デバッガを終了するには終了ボタンを押します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-debug-004.png?raw=true" alt="ruby debug 004"></p><p>ブレークポイントを再度押すことで解除ができます。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-debug-005.png?raw=true" alt="ruby debug 005"></p><h3 id="プログラムをレポジトリに保存する"><a href="#プログラムをレポジトリに保存する" class="headerlink" title="プログラムをレポジトリに保存する"></a>プログラムをレポジトリに保存する</h3><p><code>全ての変更をステージ</code> を選択します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-git-001.png?raw=true" alt="ruby git 001"></p><p>変更内容に <code>feat: HelloWorld</code> と入力して <code>コミット</code> を押します。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-git-002.png?raw=true" alt="ruby git 002"></p><p>変更内容は <code>GitLens</code> から確認できます。</p><p><img src="https://github.com/hiroshima-arc/tdd_rb/blob/feature/episode-0/docs/images/article/episode_0/ruby-git-003.png?raw=true" alt="ruby git 003"></p>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
          <category> プログラミング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> テスト駆動開発 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>環境構築から始めるテスト駆動開発 ~Ruby開発環境を構築する~</title>
      <link href="/2020/04/07/2020-04-08-2/"/>
      <url>/2020/04/07/2020-04-08-2/</url>
      
        <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>これは <a href="https://k2works.github.io/2020/04/07/2020-04-08-1/">環境構築から始めるテスト駆動開発 ~ プログラミング環境の共通基盤を構築する ~</a> の開発言語セットアップ記事です。Windows 10 Home で共通基盤が構築されていることを前提としています。</p><a id="more"></a><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>スタートメニューから <code>Windows PowerShell</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pkg-001.png?raw=true" alt="pkg 001"></p><p>以下のコマンドを入力します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install ruby</span><br></pre></td></tr></table></figure><p>インストール完了後に MSYS2 のインストールを促されるのでインストールします。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install msys2</span><br></pre></td></tr></table></figure><p>続いて、以下のコマンドを入力して <code>3</code> を指定して実行します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ridk install</span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-install-001.png?raw=true" alt="ruby win install 001"></p><h2 id="追加パッケージのインストール"><a href="#追加パッケージのインストール" class="headerlink" title="追加パッケージのインストール"></a>追加パッケージのインストール</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby" target="_blank" rel="noopener">Ruby for Visual Studio Code</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=castwide.solargraph" target="_blank" rel="noopener">Ruby Solargraph</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=kaiwood.endwise" target="_blank" rel="noopener">vscode-endwise</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=misogi.ruby-rubocop" target="_blank" rel="noopener">ruby-rubocop</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-test-explorer" target="_blank" rel="noopener">Test Explorer UI</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=connorshea.vscode-ruby-test-adapter" target="_blank" rel="noopener">Ruby Test Explorer</a></p><h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>新しいターミナルを開いて以下のコマンドを入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gem install rubocop</span><br><span class="line">gem install ruby-debug-ide</span><br><span class="line">gem install solargraph</span><br><span class="line">gem install minitest</span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-vscode-003.png?raw=true" alt="ruby win vscode 003"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-vscode-004.png?raw=true" alt="ruby win vscode 004"></p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><h3 id="プログラムを作成する"><a href="#プログラムを作成する" class="headerlink" title="プログラムを作成する"></a>プログラムを作成する</h3><p><code>Projects</code> フォルダ内に <code>Ruby</code> フォルダを作成してエディタからフォルダを開きます。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-001.png?raw=true" alt="ruby win hello 001"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-002.png?raw=true" alt="ruby win hello 002"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-003.png?raw=true" alt="ruby win hello 003"></p><p><code>新しいファイル</code> 作成アイコンを押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-004.png?raw=true" alt="ruby win hello 004"></p><p>ファイル名は <code>main.rb</code> とします。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-005.png?raw=true" alt="ruby win hello 005"></p><p>ファイルに以下のコードを入力したら Run アイコンを選択して <code>create a launch.json file</code> を押してメニューから Ruby を選択します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-006.png?raw=true" alt="ruby win hello 006"></p><p><code>Debug Local File</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-007.png?raw=true" alt="ruby win hello 007"></p><p><code>launch.json</code> ファイルが作成されたら <code>main.rb</code> タブに戻って F5 キーを押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-008.png?raw=true" alt="ruby win hello 008"></p><p>デバッグコンソールに実行結果が表示されれば準備完了です。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-009.png?raw=true" alt="ruby win hello 009"></p><p>テストをパスするようにコードを修正して F5 キーを押します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-010.png?raw=true" alt="ruby win hello 010"></p><p>テスティングフレームワークの動作が確認できたので <code>hello_world</code> 関数の作成に入ります。まず以下のコードを追加して F5 キーを押してテストが失敗することを確認します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>簡単な挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-011.png?raw=true" alt="ruby win hello 011"></p><p><code>hello_world</code> 関数を追加してテストをパスさせます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>簡単な挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span></span></span><br><span class="line">  <span class="string">'Hello from Ruby'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-012.png?raw=true" alt="ruby win hello 012"></p><p>指定された名前で挨拶を返すようにします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>簡単な挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定された名前で挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from VSCode'</span>, hello_world(<span class="string">'VSCode'</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span></span></span><br><span class="line">  <span class="string">"Hello from Ruby"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-013.png?raw=true" alt="ruby win hello 013"></p><p>関数に引数を追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>簡単な挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定された名前で挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from VSCode'</span>, hello_world(<span class="string">'VSCode'</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(name)</span></span></span><br><span class="line">  <span class="string">"Hello from <span class="subst">#&#123;name&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-014.png?raw=true" alt="ruby win hello 014"></p><p><code>指定された名前で挨拶を返す</code> テストはパスしましたが今度は <code>簡単な挨拶を返す</code> テストが失敗するようになりましたのでデフォルト引数を設定してテストをパスするようにします。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何か便利なもの</span></span><br><span class="line">    assert_equal(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>簡単な挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定された名前で挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from VSCode'</span>, hello_world(<span class="string">'VSCode'</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(name = <span class="string">'Ruby'</span>)</span></span></span><br><span class="line">  <span class="string">"Hello from <span class="subst">#&#123;name&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-015.png?raw=true" alt="ruby win hello 015"></p><p>仕上げに不要なテストを削除してテストケースの文言をわかりやすくしておきます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'minitest/autorun'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>何も指定されていない場合は既定の挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from Ruby'</span>, hello_world)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_</span>指定された名前で挨拶を返す</span></span><br><span class="line">    assert_equal(<span class="string">'Hello from VSCode'</span>, hello_world(<span class="string">'VSCode'</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(name = <span class="string">'Ruby'</span>)</span></span></span><br><span class="line">  <span class="string">"Hello from <span class="subst">#&#123;name&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-hello-016.png?raw=true" alt="ruby win hello 016"></p><h3 id="プログラムをデバッグする"><a href="#プログラムをデバッグする" class="headerlink" title="プログラムをデバッグする"></a>プログラムをデバッグする</h3><p>まず確認したいプログラムの行を左部分を押してブレークポイント（赤丸）を設定します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-debug-001.png?raw=true" alt="ruby win debug 001"></p><p>ブレークポイントを設定したら F5 を押してプログラムの実行します。そうするとブレークポイント部分でプログラムが停止して変数などの情報が確認できるようになります。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-debug-002.png?raw=true" alt="ruby win debug 002"></p><p>画面上の実行ボタンを押すと次のブレークポイントに移動します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-debug-003.png?raw=true" alt="ruby win debug 003"></p><p>デバッガを終了するには終了ボタンを押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-debug-004.png?raw=true" alt="ruby win debug 004"></p><p>ブレークポイントを再度押すことで解除ができます。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-debug-005.png?raw=true" alt="ruby win debug 005"></p><h3 id="プログラムをレポジトリに保存する"><a href="#プログラムをレポジトリに保存する" class="headerlink" title="プログラムをレポジトリに保存する"></a>プログラムをレポジトリに保存する</h3><p>ソース管理を選択して <code>リポジトリを初期化する</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-git-001.png?raw=true" alt="ruby win git 001"></p><p><code>全ての変更をステージ</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-git-002.png?raw=true" alt="ruby win git 002"></p><p>変更内容に <code>feat: HelloWorld</code> と入力して <code>コミット</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-git-003.png?raw=true" alt="ruby win git 003"></p><p>変更内容は <code>ソース管理</code> から確認できます。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-git-004.png?raw=true" alt="ruby win git 004"></p><h2 id="GitHubに公開する"><a href="#GitHubに公開する" class="headerlink" title="GitHubに公開する"></a>GitHubに公開する</h2><p>続いて、GitHubを使ってレポジトリを外部に公開できるようにしてみましょう。</p><p>まず、GitHubでレポジトリを作成します。</p><p>画面右上の+マークから <code>New repository</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-001.png?raw=true" alt="ruby win github 001"></p><p>レポジトリ名は <code>hello-ruby</code> として <code>Public</code> で公開します。 公開したくない場合は <code>Private</code> を選択します。<br><code>Add a README file</code> にもチェックを入れておきます。</p><p>最後に <code>Create repository</code> を押して公開レポジトリを作成します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-002.png?raw=true" alt="ruby win github 002"></p><p>公開レポジトリが作成されたらVSCodeから読み込めるようにするためリンク先の情報を取得します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-003.png?raw=true" alt="ruby win github 003"></p><p>クリップボードのアイコンをクリックするとレポジトリのURLがコピーできます。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-004.png?raw=true" alt="ruby win github 004"></p><p>続いてVSCodeに戻り、<code>表示</code> メニューから <code>コマンドパレット</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-005.png?raw=true" alt="ruby win github 005"></p><p><code>clone</code> と入力して <code>Git クローン</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-006.png?raw=true" alt="ruby win github 006"></p><p>リポジトリのURLへ先ほどコピーした公開レポジトリのURLを貼り付けます。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-007.png?raw=true" alt="ruby win github 007"></p><p>公開レポジトリの保存場所を指定する必要があるのでここでは <code>Projects</code> フォルダに <code>GitHub</code><br>フォルダを追加してそこに保存することにします。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-008.png?raw=true" alt="ruby win github 008"></p><p>チェックアウトが終わると画面左下に通知が出ますので <code>開く</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-009.png?raw=true" alt="ruby win github 009"></p><p>準備ができましたので先ほどやった <code>HelloWorld</code> プログラムをもう一度作成して先ほどと同様にローカルレポジトリに保存します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-010.png?raw=true" alt="ruby win github 010"></p><p>ローカルレポジトリの内容をGitHubの公開レポジトリに登録します。<code>表示</code> メニューから <code>コマンドパレット</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-011.png?raw=true" alt="ruby win github 011"></p><p><code>push</code> と入力して <code>Git プッシュ</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-012.png?raw=true" alt="ruby win github 012"></p><p>以下のGitHub認証画面が表示された場合は <code>Sign in with your browser</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-013.png?raw=true" alt="ruby win github 013"></p><p><code>Authorize GitCrendtialManager</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-014.png?raw=true" alt="ruby win github 014"></p><p>GitHubアカウントのパスワードを入力します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-015.png?raw=true" alt="ruby win github 015"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-016.png?raw=true" alt="ruby win github 016"></p><p>認証が完了してローカルレポジトリの内容が公開レポジトリに登録されました。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-017.png?raw=true" alt="ruby win github 017"></p><p>内容が反映されているかをブラウザ画面から確認します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ruby-win-github-018.png?raw=true" alt="ruby win github 018"></p>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
          <category> プログラミング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> テスト駆動開発 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>環境構築から始めるテスト駆動開発 ~プログラミング環境の共通基盤を構築する~</title>
      <link href="/2020/04/07/2020-04-08-1/"/>
      <url>/2020/04/07/2020-04-08-1/</url>
      
        <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>この記事はソフトウェア開発者を目指す入門者を対象に、IT リテラシの基本とプログラミング学習とソフトウェア開発の基盤となる環境構築の手順を解説しています。以下の構成の Windows マシンで作業を進めていきます。</p><img width="1072" alt="os-version.png" src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/7a534d8b-33b3-060f-68a4-4b276e88466d.png"><a id="more"></a><h2 id="6S"><a href="#6S" class="headerlink" title="6S"></a>6S</h2><p>本記事では <strong>5S</strong> + セキュリティの <strong>6S</strong> の考えを基本とします。<br>まず <strong>5S</strong> について、それからセキュリティについて解説します。</p><h3 id="5S"><a href="#5S" class="headerlink" title="5S"></a>5S</h3><blockquote><p>5S（ごエス、ごーエス）とは、製造業・サービス業などの職場環境の維持改善で用いられるスローガンである。各職場において徹底されるべき事項を 5 つにまとめたもので、4S 運動に「躾」（習慣化の場合もある）を加えた 5 項。</p><p>— Wikipedia <a href="https://ja.wikipedia.org/wiki/5S" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/5S</a></p></blockquote><p>具体的には、</p><ul><li><p>整理（せいり、Seiri） いらないものを捨てる</p></li><li><p>整頓（せいとん、Seiton） 決められた物を決められた場所に置き、いつでも取り出せる状態にしておく</p></li><li><p>清掃（せいそう、Seisou） 常に掃除をする</p></li><li><p>清潔（せいけつ、Seiketsu） 3S（上の整理・整頓・清掃）を維持し職場の衛生を保つ</p></li><li><p>躾（しつけ、Shitsuke） 決められたルール・手順を正しく守る習慣をつける</p></li></ul><p>これがソフトウェア開発とどのように関係していくのでしょうか？まずは、いらないものを捨てるのが <strong>整理</strong> ですがそもそもいらないものが何なのかを決めなければなりません。プログラミングで扱う対象はモノではなく情報です。ではどうやって情報を扱っていけばよいでしょう？ここは、<strong>分類するな。ひたすら並べよ</strong> の考えに従い一箇所に記録をまとめていきましょう。そのためのテクニックとして <strong>エンジニアリングデイブックス</strong> があります。これは何をやったか何を学んだかをノートに時系列に記録していくことです。</p><p>Engineering Dayboks</p><blockquote><p>Eventually Dave asked the obvious question. It turned out that they’d been trained to keep an engineering daybook, a kind of journal in which they recorded what they did, things they’d learned, sketches of ideas, readings from meters: basically anything to do with their work.<br>When the notebook became full, they’d write the date range on the spine, then stick it on the shelf next to previous daybooks. …​</p><p>— Pragmatic Programmer: your journey to mastery 20th Anniversary Edition</p></blockquote><p>ノートは市販のものならどれでも構いませんがおすすめは <a href="https://www.kokuyo-st.co.jp/stationery/softring-note/" target="_blank" rel="noopener">ソフトリングノード</a> の B5 サイズが手元に置いてもかさばらず使いやすいです。情報を一箇所に集めて必要なものと不要なものを分ける準備が出来ました。次は必要なものをすぐに取り出せるようにする <strong>整頓</strong> をどのように実践していくかを解説します。</p><p><strong>整頓</strong> の基本は <strong>分類するな。ひたすら並べよ</strong> です。デジタルデータも一箇所に保存していきましょう。具体的に保存する場所は後で解説します。また、分類するなといっても分類をする必要は当然発生します。分類にあたっては一貫したネーミングルールを適用していきます。</p><blockquote><p>Name Well; Rename When Needed.</p><p>Name to express your intent to readers, and rename as soon as that intent shifts.</p><p>— Pragmatic Programmer: your journey to mastery 20th Anniversary Edition</p></blockquote><p>基本は実践しなければ意味がありません。そして習慣にすることで初めてものにできるものです。そのためには自ら躾けて習慣化していかなければなりません。</p><blockquote><p>私がかつて発見した、そして多くの人に気づいてもらいたい効果とは、反復可能な振る舞いを規則にまで還元することで、規則の適用は機会的に反復可能になるということだ。</p><p>— テスト駆動開発</p></blockquote><blockquote><p>ここで、Kent Beck が自ら語ったセリフを思い出しました。「僕は、偉大なプログラマなんかじゃない。偉大な習慣を身につけた少しましなプログラマなんだ」。</p><p>— リファクタリング(第 2 版)</p></blockquote><h3 id="セキュリティ-Security"><a href="#セキュリティ-Security" class="headerlink" title="セキュリティ(Security)"></a>セキュリティ(Security)</h3><p><strong>5S</strong> に続いてセキュリティに関してですがここで扱う内容は <strong>情報セキュリティ</strong> に関する内容です。</p><blockquote><p>情報セキュリティ（じょうほうセキュリティ、英: information security）とは、情報の機密性、完全性、可用性を維持すること。</p><p>— Wikipedia<br><a href="https://ja.wikipedia.org/wiki/%E6%83%85%E5%A0%B1%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/%E6%83%85%E5%A0%B1%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3</a></p></blockquote><p>ここではパスワードに関する基本だけ抑えておいてください。</p><blockquote><ul><li><p>誕生日や電話番号など、親が見てパッと理解できる文字列はダメ</p></li><li><p>1 単語で“読めてしまう”文字列はダメ</p></li><li><p>8 文字以下の文字列は短すぎるからダメ</p></li></ul><p>— 子どもに「パスワード」の付け方を教えられますか？<br><a href="https://www.itmedia.co.jp/pcuser/articles/1808/09/news035.html" target="_blank" rel="noopener">子どもを守る IT リテラシー学</a></p></blockquote><p>実際にパスワードを設定するときは</p><blockquote><ul><li><p>サービスごとに、3 単語以上の英文字を並べる（例：pekinese-optimal-start）</p></li><li><p>なるべく長いパスワードを用意する（例：nagai-pasuwa-do-wo-youi-suru-amari-iirei-deha-naiga）</p></li><li><p>辞書に載っていないような文字列を用意する（例：Itags80vZyMp）</p></li></ul><p>— 子どもに「パスワード」の付け方を教えられますか？<br><a href="https://www.itmedia.co.jp/pcuser/articles/1808/09/news035.html" target="_blank" rel="noopener">子どもを守る IT リテラシー学</a></p></blockquote><p>を参考にしてください。</p><h3 id="IT-リテラシ"><a href="#IT-リテラシ" class="headerlink" title="IT リテラシ"></a>IT リテラシ</h3><p>以上が基本となる考えです。この記事では 6S を軸としたソフトウェア開発のための <strong>IT リテラシ</strong> 習得のベースとなる環境構築をすることを目的としています。</p><blockquote><p>今日のソフトウェア開発の世界において絶対になければならない 3 つの技術的な柱があります。<br>三本柱と言ったり、三種の神器と言ったりしていますが、それらは</p><ul><li><p>バージョン管理</p></li><li><p>テスティング</p></li><li><p>自動化</p></li></ul><p>の 3 つです。</p><p>— <a href="https://t-wada.hatenablog.jp/entry/clean-code-that-works" target="_blank" rel="noopener">https://t-wada.hatenablog.jp/entry/clean-code-that-works</a></p></blockquote><h2 id="アカウントの登録"><a href="#アカウントの登録" class="headerlink" title="アカウントの登録"></a>アカウントの登録</h2><p>まず各種サービスのアカウントを登録します。ここでは以下のアカウント設定で作業を進めていきますが各自作業の際は読み替えてください。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Microsft</td><td><a href="mailto:&#x6e;&#x65;&#119;&#98;&#x69;&#101;&#52;&#x36;&#52;&#57;&#x40;&#x6f;&#x75;&#x74;&#108;&#x6f;&#x6f;&#107;&#46;&#106;&#112;">&#x6e;&#x65;&#119;&#98;&#x69;&#101;&#52;&#x36;&#52;&#57;&#x40;&#x6f;&#x75;&#x74;&#108;&#x6f;&#x6f;&#107;&#46;&#106;&#112;</a></td></tr><tr><td>Google</td><td><a href="mailto:&#110;&#x65;&#x77;&#98;&#105;&#101;&#x34;&#x36;&#52;&#x39;&#64;&#103;&#109;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;">&#110;&#x65;&#x77;&#98;&#105;&#101;&#x34;&#x36;&#52;&#x39;&#64;&#103;&#109;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;</a></td></tr><tr><td>GitHub</td><td>newbie4649</td></tr><tr><td>Windows</td><td><a href="mailto:&#x6e;&#101;&#x77;&#98;&#x69;&#101;&#x34;&#x36;&#x34;&#x39;&#x40;&#111;&#117;&#116;&#108;&#111;&#111;&#107;&#46;&#x6a;&#112;">&#x6e;&#101;&#x77;&#98;&#x69;&#101;&#x34;&#x36;&#x34;&#x39;&#x40;&#111;&#117;&#116;&#108;&#111;&#111;&#107;&#46;&#x6a;&#112;</a></td></tr><tr><td>WSL</td><td>newbie4649</td></tr></tbody></table><p>また、パスワードに関しては <strong>セキュリティ</strong> を参考に設定してください。アカウント ID に関しては可能な限り共通の ID 名を設定すると管理しやすくなります。登録アカウントとパスワードは一箇所に記録していつでも確認できるようにして置いてください。理想はパスワードマネージャーの使用ですがクラウドストレージでもいいです。他人にみられることがないように注意して管理しましょう。クラウドストレージで安全に保存する自信が無い場合は <strong>エンジニアリングデイブックス</strong> に記録しておきましょう。その際、もし落として他人にみられてもわからないような工夫をしておきましょう。手段はどうあれ <strong>保存する場所は一箇所</strong> が原則です。</p><h3 id="Microsoft-アカウントを作成する"><a href="#Microsoft-アカウントを作成する" class="headerlink" title="Microsoft アカウントを作成する"></a>Microsoft アカウントを作成する</h3><p><a href="https://signup.live.com/signup?wa=wsignin1.0&rpsnv=13&rver=7.3.6963.0&wp=MBI_SSL&wreply=https%3a%2f%2fwww.microsoft.com%2fja-jp%2f&id=74335&aadredir=1&contextid=E56866F842F4E143&bk=1584685585&uiflavor=web&lic=1&mkt=JA-JP&lc=1041&uaid=491fc017de0f48c5c67a3833e7aca9ee" target="_blank" rel="noopener">アカウントの作成</a> から新しいメールアドレスを取得を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ms-001.png?raw=true?raw=true" alt="ms 001"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ms-002.png?raw=true?raw=true" alt="ms 002"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ms-003.png?raw=true?raw=true" alt="ms 003"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ms-004.png?raw=true?raw=true" alt="ms 004"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ms-005.png?raw=true?raw=true" alt="ms 005"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ms-006.png?raw=true?raw=true" alt="ms 006"></p><h3 id="Google-アカウントを作成する"><a href="#Google-アカウントを作成する" class="headerlink" title="Google アカウントを作成する"></a>Google アカウントを作成する</h3><p><a href="https://support.google.com/accounts/answer/27441?hl=ja" target="_blank" rel="noopener">Google アカウントの作成</a> から <code>Googleアカウントを作成する</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ggl-001.png?raw=true?raw=true" alt="ggl 001"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ggl-002.png?raw=true?raw=true" alt="ggl 002"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ggl-003.png?raw=true?raw=true" alt="ggl 003"></p><h3 id="GitHub-アカウントを作成する"><a href="#GitHub-アカウントを作成する" class="headerlink" title="GitHub アカウントを作成する"></a>GitHub アカウントを作成する</h3><p><a href="https://github.co.jp/" target="_blank" rel="noopener">GitHub に登録する</a> から <code>GitHubに登録する</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ghb-001.png?raw=true?raw=true" alt="ghb 001"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ghb-002.png?raw=true?raw=true" alt="ghb 002"></p><p>Free プランを選択します</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/ghb-003.png?raw=true?raw=true" alt="ghb 003"></p><h3 id="アカウントにサインインする"><a href="#アカウントにサインインする" class="headerlink" title="アカウントにサインインする"></a>アカウントにサインインする</h3><p><a href="https://support.microsoft.com/ja-jp/help/4028195" target="_blank" rel="noopener">Microsoft アカウントにサインインする方法</a>を参考にしてローカルアカウントから Microsoft アカウントに切り替えます。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/login-001.png?raw=true?raw=true" alt="login 001"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/login-002.png?raw=true?raw=true" alt="login 002"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/login-003.png?raw=true?raw=true" alt="login 003"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/login-004.png?raw=true?raw=true" alt="login 004"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/login-005.png?raw=true?raw=true" alt="login 005"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/login-006.png?raw=true?raw=true" alt="login 006"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/login-007.png?raw=true?raw=true" alt="login 007"></p><h2 id="クラウドストレージのセットアップ"><a href="#クラウドストレージのセットアップ" class="headerlink" title="クラウドストレージのセットアップ"></a>クラウドストレージのセットアップ</h2><blockquote><p>Keep Knowledge in Plain Text</p><p>Plain text won’t become obsolete.It helps leverage your work and simplifies debugging and testing.</p><p>— Pragmatic Programmer: your journey to mastery 20th Anniversary Edition</p></blockquote><p><a href="https://products.office.com/ja-jp/home?SilentAuth=1" target="_blank" rel="noopener">Office365</a> から OneDrive の設定を確認します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/drive-001.png?raw=true?raw=true" alt="drive 001"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/drive-002.png?raw=true?raw=true" alt="drive 002"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/drive-003.png?raw=true?raw=true" alt="drive 003"></p><p>アカウントのパスワードなど機密情報は <a href="https://support.office.com/ja-jp/article/personal-vault-で-onedrive-ファイルを保護する-6540ef37-e9bf-4121-a773-56f98dce78c4" target="_blank" rel="noopener">Personal Vault で OneDrive ファイルを保護する</a> を使って管理すると良いでしょう。もしくは <a href="https://1password.com/jp/" target="_blank" rel="noopener">1Password</a> などパスワード管理ツールの導入を検討してください。</p><p><a href="https://support.microsoft.com/ja-jp/help/17184/windows-10-onedrive" target="_blank" rel="noopener">PC の OneDrive</a> にあるようにデータはローカルとクラウドの両方にあるので破損・紛失をしても復旧することが出来ます。</p><h2 id="開発環境のセットアップ"><a href="#開発環境のセットアップ" class="headerlink" title="開発環境のセットアップ"></a>開発環境のセットアップ</h2><h3 id="パッケージ管理ツールのインストール"><a href="#パッケージ管理ツールのインストール" class="headerlink" title="パッケージ管理ツールのインストール"></a>パッケージ管理ツールのインストール</h3><p>アプリケーションの管理にはパッケージ管理ツール <a href="https://scoop.sh/" target="_blank" rel="noopener">Scoop</a> を使います。インストールの詳細は<a href="https://qiita.com/Dooteeen/items/12dc8fb14042888113d0" target="_blank" rel="noopener">Scoopを使ったWindows環境構築のススメ -Super!!</a>を参照してください。</p><p>スタートメニューから <code>Windows PowerShell</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pkg-001.png?raw=true" alt="pkg 001"><br>以下のコマンドを入力します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">'https://get.scoop.sh'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pkg-002.png?raw=true" alt="pkg 002"></p><h3 id="gitのインストール"><a href="#gitのインストール" class="headerlink" title="gitのインストール"></a>gitのインストール</h3><blockquote><p>Always Use Version Control</p><p>Vsersion control is a time machine for your work;you can go back.</p><p>—  Pragmatic Programmer: your journey to mastery 20th Anniversary<br>Edition </p></blockquote><p>スタートメニューから <code>Windows PowerShell</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pkg-001.png?raw=true" alt="pkg 001"></p><p>以下のコマンドを入力します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install git</span><br></pre></td></tr></table></figure><p>追加パッケージをインストールします</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add extras</span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/git-001.png?raw=true" alt="git 001"></p><h3 id="PowerShellCoreのインストール"><a href="#PowerShellCoreのインストール" class="headerlink" title="PowerShellCoreのインストール"></a>PowerShellCoreのインストール</h3><p>最新バージョンのセットアッププログラムをダウンロードします</p><p><a href="https://github.com/PowerShell/PowerShell/tags" target="_blank" rel="noopener">GitHub</a></p><p>Previewでない最新バージョンを選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pwsh-001.png?raw=true" alt="pwsh 001"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pwsh-002.png?raw=true" alt="pwsh 002"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pwsh-003.png?raw=true" alt="pwsh 003"></p><p>ダウンロードしたセットアッププログラムを実行します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pwsh-004.png?raw=true" alt="pwsh 004"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pwsh-005.png?raw=true" alt="pwsh 005"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pwsh-006.png?raw=true" alt="pwsh 006"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pwsh-007.png?raw=true" alt="pwsh 007"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pwsh-008.png?raw=true" alt="pwsh 008"></p><h3 id="Windows-Terminalのインストール"><a href="#Windows-Terminalのインストール" class="headerlink" title="Windows Terminalのインストール"></a>Windows Terminalのインストール</h3><blockquote><p>Use the Power of Command Shells</p><p>Use the shell when graphical user interfaces don’t cut it.</p><p>—  Pragmatic Programmer: your journey to mastery 20th Anniversary<br>Edition </p></blockquote><p>画面左下のスタートメニューから <code>Microsft Store</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/terminal-001.png?raw=true" alt="terminal 001"></p><p>検索欄に <code>terminal</code> と入力したら表示されられる候補の中から <code>Windows Terminal</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/terminal-002.png?raw=true" alt="terminal 002"></p><h3 id="WSLのインストール"><a href="#WSLのインストール" class="headerlink" title="WSLのインストール"></a>WSLのインストール</h3><p>画面左下のスタートメニューから歯車のアイコンを選択してWindowsの設定画面を表示します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/wsl-005.png?raw=true" alt="wsl 005"></p><p><code>アプリ</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/wsl-006.png?raw=true" alt="wsl 006"></p><p><code>アプリと機能</code> から <code>プログラミングと機能</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/wsl-007.png?raw=true" alt="wsl 007"></p><p><code>Windows Subsystem for Linux</code> にチェックを入れてOKボタンを押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/wsl-008.png?raw=true" alt="wsl 008"></p><p><code>今すぐ再起動</code> を押してWindowsを再起動します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/wsl-009.png?raw=true" alt="wsl 009"></p><h3 id="Dockerのインストール"><a href="#Dockerのインストール" class="headerlink" title="Dockerのインストール"></a>Dockerのインストール</h3><p><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">Docker Desktop</a><br>をインストールします。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/docker-001.png?raw=true" alt="docker 001"></p><p>OKを押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/docker-002.png?raw=true" alt="docker 002"></p><p>インストールが完了したら再起動します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/docker-003.png?raw=true" alt="docker 003"></p><p>再起動後に以下の警告が表示されるのでリンクをクリックします。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/docker-004.png?raw=true" alt="docker 004"></p><p>Linxuカーネル更新プログラムパッケージをダウンロードして実行します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/docker-005.png?raw=true" alt="docker 005"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/docker-006.png?raw=true" alt="docker 006"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/docker-007.png?raw=true" alt="docker 007"></p><p>完了したら、Restartを押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/docker-008.png?raw=true" alt="docker 008"></p><p>チュートリアルを実行して動作を確認しておきましょう。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/docker-009.png?raw=true" alt="docker 009"></p><h3 id="Ubuntuのインストール"><a href="#Ubuntuのインストール" class="headerlink" title="Ubuntuのインストール"></a>Ubuntuのインストール</h3><p>スタートメニューから <code>Windows PowerShell</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/pkg-001.png?raw=true" alt="pkg 001"></p><p>以下のコマンドを入力します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>画面左下のスタートメニューから <code>Microsft Store</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/wsl-001.png?raw=true" alt="wsl 001"></p><p>続いて、検索欄に <code>ubuntu</code> と入力して候補の中から <code>Ubuntu</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/wsl-002.png?raw=true" alt="wsl 002"></p><p>入手を押してアプリケーションをインストールします。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/wsl-003.png?raw=true" alt="wsl 003"></p><p>インストールが終わるとセットアップが始まるのでユーザーIDとパスワードを設定してください。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/wsl-011.png?raw=true" alt="wsl 011"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/wsl-012.png?raw=true" alt="wsl 012"></p><h2 id="エディタのセットアップ"><a href="#エディタのセットアップ" class="headerlink" title="エディタのセットアップ"></a>エディタのセットアップ</h2><blockquote><p>Achieve Editor Fluency</p><p>An editor is your most important tool. Know how to make it do what you<br>need, quickly and accurately.</p><p>—  Pragmatic Programmer: your journey to mastery 20th Anniversary<br>Edition </p></blockquote><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p><a href="https://aka.ms/vscode-java-installer-win" target="_blank" rel="noopener">Download Visual Studio Code Java Pack Installer</a> からVSCodeをダウンロードしてセットアッププログラムを実行します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/vscode-001.png?raw=true" alt="vscode 001"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/vscode-002.png?raw=true" alt="vscode 002"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/vscode-003.png?raw=true" alt="vscode 003"></p><h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><p>エディタが起動すると画面右下にWSL拡張機能インストールのポップアップが表示されるので <code>Install</code> を押して拡張機能をインストールします。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/setting-001.png?raw=true" alt="setting 001"></p><p>続いて画面左下の歯車を選択してメニューから <code>Settings</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/setting-002.png?raw=true" alt="setting 002"></p><p>検索欄に <code>trim</code> と入力します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/setting-003.png?raw=true" alt="setting 003"></p><p>チェックをオンにします。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/setting-004.png?raw=true" alt="setting 004"></p><p>同様に検索欄に <code>format on save</code> と入力してチェックをオンにします。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/setting-005.png?raw=true" alt="setting 005"></p><p>必要に応じてキーバインドなども自分が使いやすいようにカスタマイズします。</p><ul><li><p><a href="https://qiita.com/kinchiki/items/dabb5c890d9c57907503" target="_blank" rel="noopener">Visual Studio<br>Codeで簡単にショートカットキーを変更する方法</a></p></li><li><p><a href="https://loumo.jp/wp/archive/20191125120000/" target="_blank" rel="noopener">VSCode 内蔵ターミナルで ctrl-p<br>などのショートカットキーを利用する方法</a></p></li></ul><h3 id="拡張機能の追加"><a href="#拡張機能の追加" class="headerlink" title="拡張機能の追加"></a>拡張機能の追加</h3><p>エディタのメニューが英語なので日本語に変更する拡張機能をインストールします。</p><p><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-ja" target="_blank" rel="noopener">Japanese Language Pack for Visual Studio Code</a></p><p>画面左のExtensionアイコンを選択して検索欄に <code>japanese</code> と入力したら日本語拡張パッケージが表示されるので <code>Install</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/package-001.png?raw=true" alt="package 001"></p><p><code>Restart Now</code> を押してエディタを再起動します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/package-002.png?raw=true" alt="package 002"></p><p>メニューが日本語になりました。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/package-003.png?raw=true" alt="package 003"></p><p>同様の手順で以下の拡張機能をインストールします。</p><ol><li><p><a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons" target="_blank" rel="noopener">vscode-icons</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="noopener">GitLens</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener">Prettier</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory" target="_blank" rel="noopener">Git History</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer" target="_blank" rel="noopener">Bracket Pair Colorizer</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks" target="_blank" rel="noopener">Bookmarks</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight" target="_blank" rel="noopener">TODO Highlight</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete" target="_blank" rel="noopener">Path Autocomplete</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv" target="_blank" rel="noopener">Rainbow CSV</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=ryu1kn.partial-diff" target="_blank" rel="noopener">Partial Diff</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-duplicate" target="_blank" rel="noopener">Duplicate action</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github" target="_blank" rel="noopener">GitHub Pull Requests</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore" target="_blank" rel="noopener">gitignore</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-todo-plus" target="_blank" rel="noopener">Todo+</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=IBM.output-colorizer" target="_blank" rel="noopener">Output Colorizer</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces" target="_blank" rel="noopener">Trailing Spaces</a></p></li></ol><h3 id="設定の同期"><a href="#設定の同期" class="headerlink" title="設定の同期"></a>設定の同期</h3><p>エディタの設定をして拡張機能をインストールしました。再インストールなどでエディタを再インストールする場合に上記の作業を再度するのは手間なので設定をオンライに保存してすぐにセットアップできるようにしておきます。</p><p>サイドバーから設定の同期をオンにするを選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/sync-001.png?raw=true" alt="sync 001"></p><p><code>オンにする</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/sync-002.png?raw=true" alt="sync 002"></p><p><code>サインインしてオンにする</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/sync-003.png?raw=true" alt="sync 003"></p><p><code>GitHubでサインイン</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/sync-004.png?raw=true" alt="sync 004"></p><p>ブラウザが起動するので <code>Continue</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/sync-005.png?raw=true" alt="sync 005"></p><p>GitHubのアカウントとパスワードを入力します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/sync-006.png?raw=true" alt="sync 006"></p><p><code>Authorize github</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/sync-007.png?raw=true" alt="sync 007"></p><p>もし、GitHub連携で以下のような画面になった場合は登録メールアドレスに認証コードが送られているので確認してください。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/sync-009.png?raw=true" alt="sync 009"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/sync-010.png?raw=true" alt="sync 010"></p><h3 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h3><h4 id="プログラムを作成する"><a href="#プログラムを作成する" class="headerlink" title="プログラムを作成する"></a>プログラムを作成する</h4><p>エディタのセットアップが出来たのでかんたんなプログラムを作ってみましょう。 お題は <a href="https://ja.wikipedia.org/wiki/Hello_world" target="_blank" rel="noopener">Hello world</a> です。<br>まず、プログラムを作成する場所ですが今回はディスクトップの直下に <code>Projects</code> というフォルダを作成してその中に配置したいと思います。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-001.png?raw=true" alt="hello 001"></p><p><code>Projects</code> フォルダの中に <code>PowerShell</code> フォルダを作成します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-002.png?raw=true" alt="hello 002"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-003.png?raw=true" alt="hello 003"></p><p>エディタを起動します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-004.png?raw=true" alt="hello 004"></p><p>エディタを起動したらエクスプローラアイコンから <code>フォルダを開く</code> を選択して作成したフォルダを開きます。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-005.png?raw=true" alt="hello 005"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-007.png?raw=true" alt="hello 007"></p><p>フォルダを開いたらファイルアイコンを選択して <code>HelloWorld.ps1</code> ファイルを作成します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-008.png?raw=true" alt="hello 008"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-009.png?raw=true" alt="hello 009"></p><p>まず、以下のコードを入力してキーボードのF5を押します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Describe <span class="string">"HelloWorld"</span> &#123;</span><br><span class="line">    It <span class="string">"何か便利なものだ"</span> &#123;</span><br><span class="line">        <span class="variable">$true</span> | Should Be <span class="variable">$false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-010.png?raw=true" alt="hello 010"></p><p>プログラムの実行と一緒にテストの実行結果が表示されます。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-011.png?raw=true" alt="hello 011"></p><p>テストが通るように修正します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Describe <span class="string">"HelloWorld"</span> &#123;</span><br><span class="line">    It <span class="string">"何か便利なものだ"</span> &#123;</span><br><span class="line">        <span class="variable">$true</span> | Should Be <span class="variable">$true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-012.png?raw=true" alt="hello 012"></p><p>テスティングフレームワークの動作が確認できたのでプログラム作成に入ります。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Describe <span class="string">"HelloWorld"</span> &#123;</span><br><span class="line">    It <span class="string">"何か便利なものだ"</span> &#123;</span><br><span class="line">        <span class="variable">$true</span> | Should Be <span class="variable">$true</span></span><br><span class="line">    &#125;</span><br><span class="line">    It <span class="string">"簡単な挨拶を返す"</span> &#123;</span><br><span class="line">        HelloWorld | Should Be <span class="string">"Hello from PowerShell"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-013.png?raw=true" alt="hello 013"></p><p><code>HelloWorld</code> 関数を追加します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Describe <span class="string">"HelloWorld"</span> &#123;</span><br><span class="line">    It <span class="string">"何か便利なものだ"</span> &#123;</span><br><span class="line">        <span class="variable">$true</span> | Should Be <span class="variable">$true</span></span><br><span class="line">    &#125;</span><br><span class="line">    It <span class="string">"簡単な挨拶を返す"</span> &#123;</span><br><span class="line">        HelloWorld | Should Be <span class="string">"Hello from PowerShell"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloWorld</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello from PowerShell"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-014.png?raw=true" alt="hello014"></p><p>F5キーを押してテストが通ったことを確認したらテストケースを追加します。もしテストが失敗するようなら保存のタイミングあっていない場合があるので再度F5キーを押して実行してみてください。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Describe <span class="string">"HelloWorld"</span> &#123;</span><br><span class="line">    It <span class="string">"何か便利なものだ"</span> &#123;</span><br><span class="line">        <span class="variable">$true</span> | Should Be <span class="variable">$true</span></span><br><span class="line">    &#125;</span><br><span class="line">    It <span class="string">"簡単な挨拶を返す"</span> &#123;</span><br><span class="line">        HelloWorld | Should Be <span class="string">"Hello from PowerShell"</span></span><br><span class="line">    &#125;</span><br><span class="line">    It <span class="string">"指定された名前で挨拶を返す"</span> &#123;</span><br><span class="line">        HelloWorld <span class="string">"VSCode"</span> | Should Be <span class="string">"Hello from VSCode"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloWorld</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello from PowerShell"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-015.png?raw=true" alt="hello 015"></p><p><code>HelloWorld</code> 関数は既定の挨拶しか返さないのでテストが失敗します。</p><pre><code>...Describing HelloWorld [+] 何か便利なものだ 41ms [+] 簡単な挨拶を返す 12ms [-] 指定された名前で挨拶を返す 56ms   Expected string length 17 but was 21. Strings differ at index 11.   Expected: {Hello from VSCode}   But was:  {Hello from PowerShell}   ----------------------^...</code></pre><p><code>HelloWorld</code> 関数に引数を追加して表示できるように変更します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Describe <span class="string">"HelloWorld"</span> &#123;</span><br><span class="line">    It <span class="string">"何か便利なものだ"</span> &#123;</span><br><span class="line">        <span class="variable">$true</span> | Should Be <span class="variable">$true</span></span><br><span class="line">    &#125;</span><br><span class="line">    It <span class="string">"簡単な挨拶を返す"</span> &#123;</span><br><span class="line">        HelloWorld | Should Be <span class="string">"Hello from PowerShell"</span></span><br><span class="line">    &#125;</span><br><span class="line">    It <span class="string">"指定された名前で挨拶を返す"</span> &#123;</span><br><span class="line">        HelloWorld <span class="string">"VSCode"</span> | Should Be <span class="string">"Hello from VSCode"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloWorld</span><span class="params">(<span class="variable">$name</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello from <span class="variable">$name</span>"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F5を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-016.png?raw=true" alt="hello 016"></p><p><code>指定された名前で挨拶を返す</code> テストは通りましたが今度は <code>簡単な挨拶を返す</code> テストが失敗してしまいました。</p><pre><code>Describing HelloWorld [+] 何か便利なものだ 39ms [-] 簡単な挨拶を返す 23ms   Expected string length 21 but was 11. Strings differ at index 11.   Expected: {Hello from PowerShell}   But was:  {Hello from }   ----------------------^... [+] 指定された名前で挨拶を返す 29ms...</code></pre><p><code>HelloWorld</code> 関数にデフォルト引数を設定してテストを通るようにします。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Describe <span class="string">"HelloWorld"</span> &#123;</span><br><span class="line">    It <span class="string">"何か便利なものだ"</span> &#123;</span><br><span class="line">        <span class="variable">$true</span> | Should Be <span class="variable">$true</span></span><br><span class="line">    &#125;</span><br><span class="line">    It <span class="string">"簡単な挨拶を返す"</span> &#123;</span><br><span class="line">        HelloWorld | Should Be <span class="string">"Hello from PowerShell"</span></span><br><span class="line">    &#125;</span><br><span class="line">    It <span class="string">"指定された名前で挨拶を返す"</span> &#123;</span><br><span class="line">        HelloWorld <span class="string">"VSCode"</span> | Should Be <span class="string">"Hello from VSCode"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloWorld</span><span class="params">(<span class="variable">$name</span> = "PowerShell")</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello from <span class="variable">$name</span>"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F5を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-017.png?raw=true" alt="hello 017"></p><p>仕上げに不要なテストを削除してテストケースの文言をわかりやすくしておきます。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Describe <span class="string">"HelloWorld"</span> &#123;</span><br><span class="line">    It <span class="string">"何も指定されていない場合は既定の挨拶を返す"</span> &#123;</span><br><span class="line">        HelloWorld | Should Be <span class="string">"Hello from PowerShell"</span></span><br><span class="line">    &#125;</span><br><span class="line">    It <span class="string">"指定された名前で挨拶を返す"</span> &#123;</span><br><span class="line">        HelloWorld <span class="string">"VSCode"</span> | Should Be <span class="string">"Hello from VSCode"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloWorld</span><span class="params">(<span class="variable">$name</span> = "PowerShell")</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello from <span class="variable">$name</span>"</span></span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-018.png?raw=true" alt="hello 018"></p><p><code>HelloWorld</code> プログラムの完成です。</p><h4 id="プログラムをデバッグする"><a href="#プログラムをデバッグする" class="headerlink" title="プログラムをデバッグする"></a>プログラムをデバッグする</h4><p>プログラムを作成していると思った通りに動かないことが多々あります。そのようなときにプログラムの動作を確認するにはエディタのデバッグ機能を使います。</p><p>まず確認したいプログラムの行を左部分を押してブレークポイント（赤丸）を設定します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-019.png?raw=true" alt="hello019"></p><p>ブレークポイントを設定したらF5を押してプログラムの実行します。そうするとブレークポイント部分でプログラムが停止して変数などの情報が確認できるようになります。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-020.png?raw=true" alt="hello 020"></p><p>画面上の実行ボタンを押すと次のブレークポイントに移動します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-021.png?raw=true" alt="hello 021"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-022.png?raw=true" alt="hello 022"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-023.png?raw=true" alt="hello 023"></p><p>デバッガを終了するには終了ボタンを押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-024.png?raw=true" alt="hello 024"></p><p>ブレークポイントを再度押すことで解除ができます。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-025.png?raw=true" alt="hello 025"></p><h4 id="プログラムをレポジトリに保存する"><a href="#プログラムをレポジトリに保存する" class="headerlink" title="プログラムをレポジトリに保存する"></a>プログラムをレポジトリに保存する</h4><p>作成したプログラムをレポジトリに保存します。まずソース管理アイコンを選択して <code>リポジトリを初期化する</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-026.png?raw=true" alt="hello 026"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-027.png?raw=true" alt="hello 027"></p><p><code>変更をステージ</code> を選択します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-028.png?raw=true" alt="hello 028"></p><p>変更内容を入力します。ここでは <code>feat: HelloWorld</code> を入力しておきます。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-029.png?raw=true" alt="hello 029"></p><p><code>コミット</code> を押します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-030.png?raw=true" alt="hello 030"></p><p>初回登録時は以下の警告が表示されるので追加作業が必要になります。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-031-1.png?raw=true" alt="hello 031 1"></p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-031-2.png?raw=true" alt="hello 031 2"></p><p>以下のコマンドをターミナルに入力します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config -<span class="literal">-global</span> user.name <span class="string">"newbie4649"</span></span><br><span class="line">git config -<span class="literal">-global</span> user.email newbie4649@outlook.jp</span><br></pre></td></tr></table></figure><p>user.nameとuser.emailには自分のアカウント情報を登録すること。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-032.png?raw=true" alt="hello 032"></p><p>再度 <code>コミット</code> を押してレポジトリに保存します。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-033.png?raw=true" alt="hello 033"></p><p>レポジトリの記録内容は <code>ソース管理</code> から確認することが出来ます。</p><p><img src="https://github.com/k2works/k2works.github.io/blob/source/docs/images/asciidoc/tdd_env/hello-035.png?raw=true" alt="hello 035"></p><h2 id="開発言語のセットアップ"><a href="#開発言語のセットアップ" class="headerlink" title="開発言語のセットアップ"></a>開発言語のセットアップ</h2><h3 id="Ruby-環境のセットアップ"><a href="#Ruby-環境のセットアップ" class="headerlink" title="Ruby 環境のセットアップ"></a><a href="https://k2works.github.io/2020/04/07/2020-04-08-2/">Ruby 環境のセットアップ</a></h3><h3 id="Ruby-環境のセットアップ-WSL-版"><a href="#Ruby-環境のセットアップ-WSL-版" class="headerlink" title="Ruby 環境のセットアップ(WSL 版)"></a><a href="https://k2works.github.io/2020/04/07/2020-04-08-3/">Ruby 環境のセットアップ(WSL 版)</a></h3><h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><ul><li><p><a href="https://roadmap.sh/" target="_blank" rel="noopener">Developer Roadmaps</a></p></li><li><p><a href="https://github.com/kamranahmedse/developer-roadmap" target="_blank" rel="noopener">WEB DEVELOPER ROADMAP 2020</a></p></li><li><p><a href="https://note.com/yukionoguchi/n/n6fa36e6aff86" target="_blank" rel="noopener">「超」整理法の思想</a></p></li><li><p><a href="https://at-jinji.jp/work/007" target="_blank" rel="noopener">効率的な文書管理方法とは。保管方法、運用ルール作りの 3 ステップを紹介</a></p></li><li><p><a href="https://at-jinji.jp/blog/11259/" target="_blank" rel="noopener">書類整理の基本は書類をためないこと！ 「『超』整理術」を簡単解説</a></p></li><li><p><a href="https://www.oreilly.com/library/view/the-pragmatic-programmer/9780135956977/" target="_blank" rel="noopener">The Pragmatic Programmer: your journey to mastery, 20th Anniversary Edition, 2nd Edition</a></p></li><li><p><a href="https://www.itmedia.co.jp/pcuser/articles/1808/09/news035.html" target="_blank" rel="noopener">子どもを守る IT リテラシー学</a></p></li><li><p><a href="https://jaminlifelog.com/notes/work/clean-desktop-files" target="_blank" rel="noopener">フォルダ管理の基本ルール 5 選！整理されていないデスクトップにさよならバイバイ！</a></p></li><li><p><a href="https://support.microsoft.com/ja-jp/help/4026324/microsoft-account-how-to-create" target="_blank" rel="noopener">新しい Microsoft アカウントを作成する方法</a></p></li><li><p><a href="https://qiita.com/kikutaro/items/0e5deb36047d0137a767" target="_blank" rel="noopener">Java 開発環境がすぐに作れる「Visual Studio Code Installer for Java」を試してみた</a></p></li><li><p><a href="https://code.visualstudio.com/docs/languages/java" target="_blank" rel="noopener">Java in Visual Studio Code</a></p></li><li><p><a href="https://qiita.com/rubytomato@github/items/fdfc0a76e848442f374e" target="_blank" rel="noopener">WSL (Windows Subsystem for Linux)の基本メモ</a></p></li><li><p><a href="https://www.red-gate.com/simple-talk/sysadmin/powershell/practical-powershell-unit-testing-getting-started/" target="_blank" rel="noopener">Practical PowerShell Unit-Testing: Getting Started</a></p></li><li><p><a href="https://qiita.com/sensuikan1973/items/74cf5383c02dbcd82234" target="_blank" rel="noopener">VSCode のオススメ拡張機能 24 選 (と Tips をいくつか)</a></p></li><li><p><a href="https://qiita.com/n_oshiumi/items/1ad3f55d58f2d9d48d1e" target="_blank" rel="noopener">VScode で保存時に自動で空白を削除しよう！</a></p></li><li><p><a href="https://qiita.com/mitashun/items/e2f118a9ca7b96b97840" target="_blank" rel="noopener">Visual Studio Code で保存時自動整形の設定方法</a></p></li><li><p><a href="https://qiita.com/code2545Light/items/ca61673c42fb26fc2d28" target="_blank" rel="noopener">VisualStudioCode で Ruby の開発環境を作る</a></p></li></ul><h2 id="参考図書"><a href="#参考図書" class="headerlink" title="参考図書"></a>参考図書</h2><ul><li><p>The Pragmatic Programmer: your journey to mastery, 20th Anniversary Edition David Thomas (著), Andrew Hunt (著): Addison-Wesley Professional; 2 版 (2019/7/30)</p></li><li><p>達人プログラマー 熟達に向けたあなたの旅（第2版）Andrew Hunt (著), David Thomas (著), 村上雅章 (翻訳): オーム社; 新装版 (2020/11/21)</p></li><li><p>テスト駆動開発 Kent Beck (著), 和田 卓人 (翻訳): オーム社; 新訳版 (2017/10/14)</p></li><li><p>新装版 リファクタリング―既存のコードを安全に改善する― (OBJECT TECHNOLOGY SERIES) Martin Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章 (翻訳), その他: オーム社; 新装版(2014/7/26)</p></li><li><p>リファクタリング(第 2 版): 既存のコードを安全に改善する (OBJECT TECHNOLOGY SERIES) Martin Fowler (著), 児玉 公信 (翻訳), 友野 晶夫 (翻訳), 平澤 章 (翻訳), その他: オーム社; 第 2 版(2019/12/1)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
          <category> プログラミング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> テスト駆動開発 </tag>
            
            <tag> VisualStudioCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TDD Boot Camp in 愛媛 ふりかえり</title>
      <link href="/2020/02/28/2020-04-08/"/>
      <url>/2020/02/28/2020-04-08/</url>
      
        <content type="html"><![CDATA[<h1 id="基調講演"><a href="#基調講演" class="headerlink" title="基調講演"></a>基調講演</h1><p>当日講演スライドは<a href="https://speakerdeck.com/twada/tdd-live-and-workshop-2019-spring" target="_blank" rel="noopener">こちら</a></p><p>お約束の <a href="https://twitter.com/ramusara/status/1228485948050042881" target="_blank" rel="noopener">アレ</a> から始まり、最初のテスト駆動開発とは何かというお話の内容としては自分が実践してきたテスト駆動開発と認識のズレはなかったので良かった。<a href="https://hiroshima-arc.connpass.com/" target="_blank" rel="noopener">勉強会</a> を実施したり <a href="https://qiita.com/k2works/items/83741e3e2d2579d748d6" target="_blank" rel="noopener">テスト駆動開発の記事</a> を書いて専門学校の講義に使ったりしてきたけど　<strong>やはり俺のテスト駆動開発に対する理解は間違っていなかった</strong> ようだ。ただ、<strong>テスト駆動開発で言及されているリファクタリングとマーティンファウラーの <a href="https://www.amazon.co.jp/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0-%E6%97%A2%E5%AD%98%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E5%AE%89%E5%85%A8%E3%81%AB%E6%94%B9%E5%96%84%E3%81%99%E3%82%8B%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89-%EF%BC%AD%EF%BD%81%EF%BD%92%EF%BD%94%EF%BD%89%EF%BD%8E%EF%BC%A6%EF%BD%8F%EF%BD%97%EF%BD%8C%EF%BD%85%EF%BD%92-ebook/dp/B0827R4BDW/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0&qid=1582016208&s=digital-text&sr=1-1" target="_blank" rel="noopener">リファクタリング</a> ではサイズ感が違う</strong> というのは新しい気づきだった。</p><p>続いて、ライブコーディングのお題は <strong><a href="https://ja.wikipedia.org/wiki/Fizz_Buzz" target="_blank" rel="noopener">FizzBuzz 問題</a></strong> 。 内容は <a href="https://channel9.msdn.com/Events/de-code/2017/DO03?ocid=player" target="_blank" rel="noopener">50 分でわかるテスト駆動開発</a> を以前視聴していたので流れは大体知っていたけどお題から TODO に落とし込むあたりの作業が動画の時よりバージョンアップしていてよりわかりやすい流れになっていた。後半のシンプルな FizzBuzz プログラムを使った保守運用に向けた解説は実際に現場で起きている問題を反映しているのだと思うと興味深い内容だった。このへんが <a href="https://www.shoeisha.co.jp/book/detail/9784798116839" target="_blank" rel="noopener">レガシーコード改善ガイド</a> へとつながっていくのかなと個人的に思った。</p><p>ライブコーディングの内容として自分は <strong>抽象から具体へ具体から抽象へ</strong> を小さなサイクルで何度も回しているなという印象を受けた。自分も最近は <strong>抽象と具体</strong> の往復は意識しているのだがやはり上手な人が実際にやるのを見れるのは実に学びがある。こればかりは文章ではなかなか伝えられないのよね。</p><a id="more"></a><h1 id="TDD-amp-ペアプログラミング-デモ"><a href="#TDD-amp-ペアプログラミング-デモ" class="headerlink" title="TDD&amp;ペアプログラミング　デモ"></a>TDD&amp;ペアプログラミング　デモ</h1><blockquote><p>ペアプログラミング（英: pair programming）は、2 人のプログラマが 1 台のワークステーションを使って共同でソフトウェア開発を行う手法という説明が起源である。一方が単体テストを打ち込んでいるときに、もう一方がそのテストを通るクラスについて考えるといったように、相補的な作業をする。プログラム開発の現場では、一人で複数台を同時に使ったり、一台に複数台のディスプレイを使うことも多くなり、具体的なやり方は変わっている。</p><p>実際にキーボードを操作してコードを書く人を「ドライバ」、もう 1 人を「ナビゲータ」と呼ぶ。30 分ごとか、単体テストを 1 つ完成させる度に役割を交替するのがよいとされる。また、1 日に一度の頻度でパートナーを変えるのがよいともされている。</p><p>— Wikipedia</p></blockquote><p>実演でもドライバ交代時に US 配列キーボードで戸惑うなど <strong>ペアプロあるある</strong> が見受けられた。ちなみに自分のメイン開発環境は VSCode に Vim キーバインドなのでペアが Vimer でもないかぎり間違いなく戸惑うと思う。幸いペアの方が <a href="https://docs.microsoft.com/ja-jp/visualstudio/liveshare/" target="_blank" rel="noopener">Visual Studio Live Share</a> を VSCode で使ってもオッケーとのことだったのでその辺の問題は回避できた。</p><h1 id="TDD-amp-ペアプログラミング-実習-1-回目"><a href="#TDD-amp-ペアプログラミング-実習-1-回目" class="headerlink" title="TDD&amp;ペアプログラミング 実習(1 回目)"></a>TDD&amp;ペアプログラミング 実習(1 回目)</h1><p>午後からペアプログラミングによるテスト駆動開発の実践に入るわけだけど、今回自分が選択した言語は <code>JavaScript</code> でテスティングフレームワークには <code>Mocha</code> を使った構成でやった。表記スタイルを TDD にしているので BDD スタイルとは違うけどあしからず。以下コードがたくさん出てくるけど、これは <strong>プログラミングの速さを競うのではなく、テストを書いて動かすことによるフィードバックを受けながら、リファクタリングを忘れず着実に進めていく</strong> 演習の目的をできるだけ伝えようとしたらこうなってしまったわけであり結論だけ知りたいならばここは読み飛ばして <strong>クロージング</strong> へ。まあ、個人的にはここがテスト駆動開発のキモだと思ってるけど・・・</p><h2 id="仕様"><a href="#仕様" class="headerlink" title="仕様"></a>仕様</h2><p>最初にお題だけど今回は <code>整数の区間</code>。調べたら <a href="http://devtesting.jp/tddbc/" target="_blank" rel="noopener">過去にも取り上げられたお題</a> みたい。</p><pre><code>整数閉区間を示すクラス（あるいは構造体）をつくりたい。整数閉区間オブジェクトは下端点と上端点を持ち、文字列表現も返せる（例: 下端点 3, 上端点 8 の整数閉区間の文字列表記は &quot;[3,8]&quot;）。ただし、上端点より下端点が大きい閉区間を作ることはできない。整数の閉区間は指定した整数を含むかどうかを判定できる。また、別の閉区間と等価かどうかや、完全に含まれるかどうかも判定できる。</code></pre><p>ペアと最初に取り組んだのがお題の理解と <strong>TODO リスト</strong> への分割。とりあえず <code>ただし、</code> や <code>また、</code> といった接続詞ごとに分割して <strong>プログラミングしやすいところから組むようにした。</strong></p><pre><code>整数閉区間オブジェクトは下端点と上端点を持ち、文字列表現も返せる（例: 下端点 3, 上端点 8 の整数閉区間の文字列表記は &quot;[3,8]&quot;）。ただし、上端点より下端点が大きい閉区間を作ることはできない。整数の閉区間は指定した整数を含むかどうかを判定できる。また、別の閉区間と等価かどうかや、完全に含まれるかどうかも判定できる。整数閉区間を示すクラス（あるいは構造体）をつくりたい。</code></pre><h2 id="TODO-リスト"><a href="#TODO-リスト" class="headerlink" title="TODO リスト"></a>TODO リスト</h2><p>最初に作った <strong>TODO リスト</strong> がこちら。</p><ul><li><p>❏ 整数区間オブジェクトを作る</p><ul><li>❏ 下端点と上端点を持つ</li></ul></li><li><p>❏ 文字列表現も返す</p><ul><li>❏ 下端点 3, 上端点 8 ならば文字列”[3,8]“を返す</li></ul></li></ul><h2 id="仮実装"><a href="#仮実装" class="headerlink" title="仮実装"></a>仮実装</h2><p>最初に失敗するコードを書いたらまずは <strong>仮実装</strong> でテストをパスするベタ書きのコードを書いた。 クラスを作りたいとのことだけど <code>JavaScript</code> で <code>class</code> キーワードを使うのは人によってはアレなんだけどペアの人は使ってもオッケーな人だったので <code>class</code> キーワードで実装した。これが <code>function</code> による実装なら、それはそれで面白かったかも。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mocha.setup(<span class="string">"tdd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> assert = chai.assert;</span><br><span class="line">suite(<span class="string">"ClosedRangeTest"</span>, () =&gt; &#123;</span><br><span class="line">  suite(<span class="string">"文字列表現を返す"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"下端点 3, 上端点 8 ならば文字列[3,8]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      assert.equal(<span class="string">"[3,8]"</span>, ClosedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosedRange</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> stringify() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"[3,8]"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三角測量"><a href="#三角測量" class="headerlink" title="三角測量"></a>三角測量</h2><p><strong>仮実装</strong> で <strong>TODO リスト</strong> を一つ片付けたけどコードはベタ書きのまま・・・ここは <strong>三角測量</strong> を実施してメソッドの一般化を進めることにした。まず、 <strong>TODO リスト</strong> を追加する。</p><ul><li><p>❏ 整数区間オブジェクトを作る</p><ul><li>❏ 下端点と上端点を持つ</li></ul></li><li><p>❏ 文字列表現も返す</p><pre><code>- ✓ 下端点 3, 上端点 8 ならば文字列&quot;\[3,8\]&quot;を返す- ❏ 下端点 4, 上端点 9</code></pre><p>ならば文字列”[4,9]“を返す</p></li></ul><p>追加テストが失敗(レッド)からベタ書きのコードを変更してテスト成功（グリーン）へ。ちなみにこの間８分ごとに交代しながらペアプログラミングしてるけどナビゲーター役の時もなんだかんだで脳内コーディングして活発に意見交換してた。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">suite(<span class="string">"ClosedRangeTest"</span>, () =&gt; &#123;</span><br><span class="line">  suite(<span class="string">"文字列表現を返す"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"下端点 3, 上端点 8 ならば文字列[3,8]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      assert.equal(<span class="string">"[3,8]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test(<span class="string">"下端点 4, 上端点 9 ならば文字列[4,9]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">4</span>, <span class="number">9</span>);</span><br><span class="line">      assert.equal(<span class="string">"[4,9]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosedRange</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(lower, upper) &#123;</span><br><span class="line">    <span class="keyword">this</span>._lower = lower;</span><br><span class="line">    <span class="keyword">this</span>._upper = upper;</span><br><span class="line">  &#125;</span><br><span class="line">  stringify() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>._lower&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>._upper&#125;</span>]`</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="リファクタリング"><a href="#リファクタリング" class="headerlink" title="リファクタリング"></a>リファクタリング</h2><p>最初の <strong>TODO リスト</strong> が片付いたのでここで一息ついて <strong>リファクタリング</strong> に取り組む。</p><ul><li><p>✓ 整数区間オブジェクトを作る</p><ul><li>✓ 下端点と上端点を持つ</li></ul></li><li><p>✓ 文字列表現も返す</p><ul><li><p>✓ 下端点 3, 上端点 8 ならば文字列”[3,8]“を返す</p></li><li><p>✓ 下端点 4, 上端点 9 ならば文字列”[4,9]“を返す</p></li></ul></li></ul><p>以下のコード部分は私が書いた部分だけど、おわかりいただけただろうか？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">suite(<span class="string">"ClosedRangeTest"</span>, () =&gt; &#123;</span><br><span class="line">  suite(<span class="string">"文字列表現を返す"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"下端点 3, 上端点 8 ならば文字列[3,8]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>); (<span class="number">1</span>)</span><br><span class="line">      assert.equal(<span class="string">"[3,8]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test(<span class="string">"下端点 4, 上端点 9 ならば文字列[4,9]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">4</span>, <span class="number">9</span>); (<span class="number">2</span>)</span><br><span class="line">      assert.equal(<span class="string">"[4,9]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>(1),(2) の部分は JavaScript だとグローバル変数宣言になる！ <code>JavaScript</code> の中でもトップレベルのあかんやつやらかしたけどペアの指摘のおかげで早期発見早期対応ができた。言い訳だけど最近は <code>Ruby</code> のコードばかり書いていたので変数もその感覚で書いてた。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">suite(<span class="string">"ClosedRangeTest"</span>, () =&gt; &#123;</span><br><span class="line">  suite(<span class="string">"文字列表現を返す"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"下端点 3, 上端点 8 ならば文字列[3,8]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      <span class="number">1</span>;</span><br><span class="line">      assert.equal(<span class="string">"[3,8]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test(<span class="string">"下端点 4, 上端点 9 ならば文字列[4,9]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">4</span>, <span class="number">9</span>);</span><br><span class="line">      <span class="number">2</span>;</span><br><span class="line">      assert.equal(<span class="string">"[4,9]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>(1),(2) は <code>const</code> で再代入不可のローカル変数にリファクタリングする。</p><p>あと、今回はバージョン管理システムを使って作業を進めているんだけどすでにこの時点で６回ぐらいコミットしてる。コミットメッセージに <code>test</code> とか <code>refactor</code> とかつけてやってるんだけどこれは <a href="https://www.conventionalcommits.org/ja/v1.0.0/" target="_blank" rel="noopener">Conventional Commits</a> という仕様があるそうだ、初めて知った。</p><h1 id="TDD-amp-ペアプログラミング-実習-2-回目"><a href="#TDD-amp-ペアプログラミング-実習-2-回目" class="headerlink" title="TDD&amp;ペアプログラミング 実習(2 回目)"></a>TDD&amp;ペアプログラミング 実習(2 回目)</h1><h2 id="仕様-1"><a href="#仕様-1" class="headerlink" title="仕様"></a>仕様</h2><p>最初のグループをプログラムに実装したので次のグループに取り組む。</p><pre><code>ただし、上端点より下端点が大きい閉区間を作ることはできない。整数の閉区間は指定した整数を含むかどうかを判定できる。また、別の閉区間と等価かどうかや、完全に含まれるかどうかも判定できる。整数閉区間を示すクラス（あるいは構造体）をつくりたい。</code></pre><h2 id="TODO-リスト-1"><a href="#TODO-リスト-1" class="headerlink" title="TODO リスト"></a>TODO リスト</h2><p><strong>TODO リスト</strong> は前回のパターンの踏襲しつつとりあえず例外を投げる実装にしてみる。</p><ul><li><p>❏ 上端点より下端点が大きい閉区間を作ることはできない</p><ul><li>❏ 下端点 8, 上端点 3 ならばエラーが発生する</li></ul></li></ul><h2 id="仮実装から実装へ"><a href="#仮実装から実装へ" class="headerlink" title="仮実装から実装へ"></a>仮実装から実装へ</h2><p>(1) でまず期待する振る舞いを書いて失敗する（レッド）ことを確認したら、(2) のコンストラクタ作成時に例外を投げるようにしてテストを成功させる（グリーン）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">suite(<span class="string">"ClosedRangeTest"</span>, () =&gt; &#123;</span><br><span class="line">  suite(<span class="string">"文字列表現を返す"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"下端点 3, 上端点 8 ならば文字列[3,8]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      assert.equal(<span class="string">"[3,8]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test(<span class="string">"下端点 4, 上端点 9 ならば文字列[4,9]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">4</span>, <span class="number">9</span>);</span><br><span class="line">      assert.equal(<span class="string">"[4,9]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  suite(<span class="string">"上端点より下端点が大きい閉区間を作ることはできない"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"下端点 8, 上端点 3 ならばエラーが発生する"</span>, () =&gt; &#123;</span><br><span class="line">      assert.throws(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosedRange(<span class="number">8</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="number">1</span>;</span><br><span class="line">      &#125;, <span class="string">"作れません"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosedRange</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(lower, upper) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lower &gt; upper) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"作れません"</span>);</span><br><span class="line">      <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._lower = lower;</span><br><span class="line">    <span class="keyword">this</span>._upper = upper;</span><br><span class="line">  &#125;</span><br><span class="line">  stringify() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>._lower&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>._upper&#125;</span>]`</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例外メッセージが <strong>作れません</strong> とか・・・ちょっとアレだけどもう少し全体のイメージができたてから <strong>リファクタリング</strong> しよう。</p><h2 id="リファクタリング-1"><a href="#リファクタリング-1" class="headerlink" title="リファクタリング"></a>リファクタリング</h2><p>その後、さらに <strong>TODO リスト</strong> を追加してコードに落とし込んでいったのでここで <strong>リファクタリング</strong> の時間に入る。</p><ul><li><p>✓ 上端点より下端点が大きい閉区間を作ることはできない</p><ul><li>✓ 下端点 8, 上端点 3 ならばエラーが発生する</li></ul></li><li><p>✓ 整数の閉区間は指定した整数を含むかどうかを判定できる</p><ul><li><p>✓ 閉区間[3,8]の場合、3 ならは含まれると判定(true)される</p></li><li><p>✓ 閉区間[3,8]の場合、8 ならは含まれると判定(true)される</p></li><li><p>✓ 閉区間[3,8]の場合、6 ならは含まれると判定(true)される</p></li><li><p>✓ 閉区間[3,8]の場合、2 ならは含まれないと判定(false)される</p></li></ul></li></ul><!-- end list --><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">suite(<span class="string">"ClosedRangeTest"</span>, () =&gt; &#123;</span><br><span class="line">  suite(<span class="string">"文字列表現を返す"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"下端点 3, 上端点 8 ならば文字列[3,8]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      assert.equal(<span class="string">"[3,8]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test(<span class="string">"下端点 4, 上端点 9 ならば文字列[4,9]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">4</span>, <span class="number">9</span>);</span><br><span class="line">      assert.equal(<span class="string">"[4,9]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  suite(<span class="string">"上端点より下端点が大きい閉区間を作ることはできない"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"下端点 8, 上端点 3 ならばエラーが発生する"</span>, () =&gt; &#123;</span><br><span class="line">      assert.throws(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosedRange(<span class="number">8</span>, <span class="number">3</span>);</span><br><span class="line">      &#125;, <span class="string">"作れません"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  suite(<span class="string">"整数の閉区間は指定した整数を含むかどうかを判定できる"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、3ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      <span class="number">1</span>;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">3</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、8ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      <span class="number">2</span>;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">8</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、6ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      <span class="number">3</span>;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">6</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、2ならは含まれないと判定(false)される"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      <span class="number">4</span>;</span><br><span class="line">      assert.isFalse(closedRange.isInRange(<span class="number">2</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosedRange</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(lower, upper) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lower &gt; upper) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"作れません"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._lower = lower;</span><br><span class="line">    <span class="keyword">this</span>._upper = upper;</span><br><span class="line">  &#125;</span><br><span class="line">  stringify() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>._lower&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>._upper&#125;</span>]`</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isInRange(number) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._lower &lt;= number &amp;&amp; <span class="keyword">this</span>._upper &gt;= number) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1),(2),(3),(4)の部分でインスタンスの作成が重複しているのでここは <strong>メソッドの抽出</strong> を使って呼び出しを一箇所(5)にまとめることにした。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  suite(<span class="string">"整数の閉区間は指定した整数を含むかどうかを判定できる"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> closedRange;</span><br><span class="line">    setup(<span class="string">"前準備"</span>, () =&gt; &#123;</span><br><span class="line">      closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>); (<span class="number">5</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、3ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">3</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、8ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">8</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、6ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">6</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、2ならは含まれないと判定(false)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isFalse(closedRange.isInRange(<span class="number">2</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>テストコードも壊れていないのでここでバージョン管理システムにコミットしてコードレビューに入る。</p><h1 id="コードレビュー-1-回目"><a href="#コードレビュー-1-回目" class="headerlink" title="コードレビュー(1 回目)"></a>コードレビュー(1 回目)</h1><p>光栄にもコードレビュー１回目の代表に指名していただいたのでありがたくレビューを受けることにした。</p><h2 id="TODO-リスト-2"><a href="#TODO-リスト-2" class="headerlink" title="TODO リスト"></a>TODO リスト</h2><ul><li><p>✓ 文字列表現も返す</p><ul><li><p>✓ 下端点 3, 上端点 8 ならば文字列”[3,8]“を返す</p></li><li><p>✓ 下端点 4, 上端点 9 ならば文字列”[4,9]“を返す</p></li></ul></li><li><p>✓ 整数区間オブジェクトを作る</p><ul><li>✓ 下端点と上端点を持つ</li></ul></li><li><p>✓ 上端点より下端点が大きい閉区間を作ることはできない</p><ul><li>✓ 下端点 8, 上端点 3 ならばエラーが発生する</li></ul></li><li><p>✓ 整数の閉区間は指定した整数を含むかどうかを判定できる</p><ul><li><p>✓ 閉区間[3,8]の場合、3 ならは含まれると判定(true)される</p></li><li><p>✓ 閉区間[3,8]の場合、8 ならは含まれると判定(true)される</p></li><li><p>✓ 閉区間[3,8]の場合、6 ならは含まれると判定(true)される</p></li><li><p>✓ 閉区間[3,8]の場合、2 ならは含まれないと判定(false)される</p></li></ul></li><li><p>❏ 別の閉区間と等価かどうか判定できる</p><ul><li><p>❏ 閉区間[3,8]と閉区間[3,8]の場合、等価と判定(true)される</p></li><li><p>❏ 閉区間[3,8]と閉区間[4,8]の場合、等価ではないと判定(false)される</p></li></ul></li><li><p>❏ 別の閉区間に完全に含まれるかどうかも判定できる</p><ul><li><p>❏ 閉区間[3,8]と閉区間[4,7]の場合、完全に含まれると判定(true)される</p></li><li><p>❏ 閉区間[3,8]と閉区間[1,2]の場合、完全に含まれてないと判定(false)される</p></li></ul></li></ul><p>進捗状況は 7 割といったところ。</p><h2 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">suite(<span class="string">"ClosedRangeTest"</span>, () =&gt; &#123;</span><br><span class="line">  suite(<span class="string">"文字列表現を返す"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="number">1</span>;</span><br><span class="line">    test(<span class="string">"下端点 3, 上端点 8 ならば文字列[3,8]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      assert.equal(<span class="string">"[3,8]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test(<span class="string">"下端点 4, 上端点 9 ならば文字列[4,9]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">4</span>, <span class="number">9</span>);</span><br><span class="line">      assert.equal(<span class="string">"[4,9]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  suite(<span class="string">"上端点より下端点が大きい閉区間を作ることはできない"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"下端点 8, 上端点 3 ならばエラーが発生する"</span>, () =&gt; &#123;</span><br><span class="line">      assert.throws(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosedRange(<span class="number">8</span>, <span class="number">3</span>);</span><br><span class="line">      &#125;, <span class="string">"作れません"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  suite(<span class="string">"整数の閉区間は指定した整数を含むかどうかを判定できる"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> closedRange;</span><br><span class="line">    setup(<span class="string">"前準備"</span>, () =&gt; &#123;</span><br><span class="line">      closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、3ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">3</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、8ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">8</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、6ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">6</span>));</span><br><span class="line">      <span class="number">2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、2ならは含まれないと判定(false)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isFalse(closedRange.isInRange(<span class="number">2</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  suite(<span class="string">" 別の閉区間と等価かどうか判定できる"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> closedRange;</span><br><span class="line">    setup(<span class="string">"前準備"</span>, () =&gt; &#123;</span><br><span class="line">      closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]と閉区間[3,8]の場合、等価と判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange2 = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      <span class="number">3</span>;</span><br><span class="line">      assert.isTrue(closedRange.equal(closedRange2));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// - [ ] 閉区間[3,8]と閉区間[4,8]の場合、等価ではないと判定(false)される</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosedRange</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(lower, upper) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lower &gt; upper) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"作れません"</span>);</span><br><span class="line">      <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._lower = lower;</span><br><span class="line">    <span class="keyword">this</span>._upper = upper;</span><br><span class="line">  &#125;</span><br><span class="line">  stringify() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>._lower&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>._upper&#125;</span>]`</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isInRange(number) &#123;</span><br><span class="line">    <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._lower &lt;= number &amp;&amp; <span class="keyword">this</span>._upper &gt;= number) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  equal(other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._lower === other._lower &amp;&amp; <span class="keyword">this</span>._upper === <span class="keyword">this</span>._upper)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="レビュー"><a href="#レビュー" class="headerlink" title="レビュー"></a>レビュー</h2><p>主要なレビュー指摘事項は</p><ul><li><p>null の場合のテストケースが考慮されていない (1)</p></li><li><p>境界値テストとして境界値内のテストは不要で境界値外テストが不足している (2)</p></li><li><p>整数以外の値（小数）が渡された場合のテストケースが考慮されていない (3)</p></li><li><p>メソッドの名としてイメージがしずらい (5)</p></li><li><p>範囲判定条件が分かりづらい (5)</p></li></ul><p>(4) に関しては <strong>値オブジェクト</strong> の生成パターンを意識していたのだけど例外を投げるパターンは設計アプローチの一つとして議論した。普段、ボッチ開発している自分としては人様からまさかりを投げていただくというありがたい経験ができた。</p><h1 id="TDD-amp-ペアプログラミング-実習-3-回目"><a href="#TDD-amp-ペアプログラミング-実習-3-回目" class="headerlink" title="TDD&amp;ペアプログラミング 実習(3 回目)"></a>TDD&amp;ペアプログラミング 実習(3 回目)</h1><h2 id="仕様-2"><a href="#仕様-2" class="headerlink" title="仕様"></a>仕様</h2><p>コードレビューも終わり最後の機能の実装に入る。</p><pre><code>また、別の閉区間と等価かどうかや、完全に含まれるかどうかも判定できる。整数閉区間を示すクラス（あるいは構造体）をつくりたい。</code></pre><h2 id="TODO-リスト-3"><a href="#TODO-リスト-3" class="headerlink" title="TODO リスト"></a>TODO リスト</h2><ul><li><p>✓ 別の閉区間と等価かどうか判定できる</p><ul><li><p>✓ 閉区間[3,8]と閉区間[3,8]の場合、等価と判定(true)される</p></li><li><p>✓ 閉区間[3,8]と閉区間[4,8]の場合、等価ではないと判定(false)される</p></li></ul></li><li><p>❏ 別の閉区間に完全に含まれるかどうかも判定できる</p><pre><code>- ❏ 閉区間\[3,8\]と閉区間\[4,7\]の場合、完全に含まれると判定(true)される- ❏</code></pre><p>閉区間[3,8]と閉区間[1,2]の場合、完全に含まれてないと判定(false)される</p></li></ul><h2 id="リファクタリング-2"><a href="#リファクタリング-2" class="headerlink" title="リファクタリング"></a>リファクタリング</h2><p>では機能を追加してリリース！と思っていたけどペアにまずはリファクタリングと指摘されてはっと我に返る。意識はしているんだけどついつい機能を作る方に意識が行ってしまうのでこのような指摘は非常にありがたい。まずはコードレビュー指摘事項から取り組むことにする。</p><p>このテストケースは境界値テストとしては不要なので</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、6ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">6</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>不要なテストを不足するテストに変更する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、9ならは含まれると判定(false)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isFalse(closedRange.isInRange(<span class="number">9</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>次に指摘された <code>isInRange</code> メソッドだけど</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、3ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">3</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、8ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.isInRange(<span class="number">8</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、9ならは含まれると判定(false)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isFalse(closedRange.isInRange(<span class="number">9</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、2ならは含まれないと判定(false)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isFalse(closedRange.isInRange(<span class="number">2</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  suite(<span class="string">" 別の閉区間と等価かどうか判定できる"</span>, () =&gt; &#123;</span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosedRange</span> </span>&#123;</span><br><span class="line">....</span><br><span class="line">  isInRange(number) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._lower &lt;= number &amp;&amp; <span class="keyword">this</span>._upper &gt;= number) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>ここは <code>include</code> にメソッド名を変更する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、3ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.include(<span class="number">3</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、8ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.include(<span class="number">8</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、9ならは含まれると判定(false)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isFalse(closedRange.include(<span class="number">9</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、2ならは含まれないと判定(false)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isFalse(closedRange.include(<span class="number">2</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">...</span><br><span class="line">  suite(<span class="string">" 別の閉区間と等価かどうか判定できる"</span>, () =&gt; &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosedRange</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  include(number) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._lower &lt;= number &amp;&amp; <span class="keyword">this</span>._upper &gt;= number) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>範囲判定の部分も比較演算子が反転すると可読性が下がるので</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  include(number) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._lower &lt;= number &amp;&amp; <span class="keyword">this</span>._upper &gt;= number) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>$3 \leqq X \leqq 8$ のように読めるように変更する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  include(number) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._lower &lt;= number &amp;&amp; number &lt;= <span class="keyword">this</span>._upper) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="リリース"><a href="#リリース" class="headerlink" title="リリース"></a>リリース</h2><p>なんとか時間内に仕様を満たすプログラムを作ることが出来た。</p><h3 id="TODO-リスト-4"><a href="#TODO-リスト-4" class="headerlink" title="TODO リスト"></a>TODO リスト</h3><ul><li><p>✓ 文字列表現も返す</p><ul><li><p>✓ 下端点 3, 上端点 8 ならば文字列”[3,8]“を返す</p></li><li><p>✓ 下端点 4, 上端点 9 ならば文字列”[4,9]“を返す</p></li></ul></li><li><p>✓ 整数区間オブジェクトを作る</p><ul><li>✓ 下端点と上端点を持つ</li></ul></li><li><p>✓ 上端点より下端点が大きい閉区間を作ることはできない</p><ul><li>✓ 下端点 8, 上端点 3 ならばエラーが発生する</li></ul></li><li><p>✓ 整数の閉区間は指定した整数を含むかどうかを判定できる</p><ul><li><p>✓ 閉区間[3,8]の場合、3 ならは含まれると判定(true)される</p></li><li><p>✓ 閉区間[3,8]の場合、8 ならは含まれると判定(true)される</p></li><li><p>✓ 閉区間[3,8]の場合、9 ならは含まれると判定(false)される</p></li><li><p>✓ 閉区間[3,8]の場合、2 ならは含まれないと判定(false)される</p></li></ul></li><li><p>✓ 別の閉区間と等価かどうか判定できる</p><ul><li><p>✓ 閉区間[3,8]と閉区間[3,8]の場合、等価と判定(true)される</p></li><li><p>✓ 閉区間[3,8]と閉区間[4,8]の場合、等価ではないと判定(false)される</p></li></ul></li><li><p>✓ 別の閉区間に完全に含まれるかどうかも判定できる</p><ul><li><p>✓ 閉区間[3,8]と閉区間[4,7]の場合、完全に含まれると判定(true)される</p></li><li><p>✓ 閉区間[3,8]と閉区間[1,2]の場合、完全に含まれてないと判定(false)される</p></li></ul></li><li><p>後で考える</p><ul><li><p>❏ null や undefined の場合</p></li><li><p>❏ 小数の場合</p></li></ul></li></ul><h3 id="クラス図"><a href="#クラス図" class="headerlink" title="クラス図"></a>クラス図</h3><p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/20035/8d348215-4599-3ece-bdd7-51154148b8c8.png" alt="diag-e41cf3b7f91aaeb501dda0c5a031bc6b.png"></p><h3 id="プログラム"><a href="#プログラム" class="headerlink" title="プログラム"></a>プログラム</h3><p><code>closed_range.test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">mocha.setup(<span class="string">"tdd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> assert = chai.assert;</span><br><span class="line">suite(<span class="string">"ClosedRangeTest"</span>, () =&gt; &#123;</span><br><span class="line">  suite(<span class="string">"文字列表現を返す"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"下端点 3, 上端点 8 ならば文字列[3,8]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      assert.equal(<span class="string">"[3,8]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test(<span class="string">"下端点 4, 上端点 9 ならば文字列[4,9]を返す"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">4</span>, <span class="number">9</span>);</span><br><span class="line">      assert.equal(<span class="string">"[4,9]"</span>, closedRange.stringify());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  suite(<span class="string">"上端点より下端点が大きい閉区間を作ることはできない"</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">"下端点 8, 上端点 3 ならばエラーが発生する"</span>, () =&gt; &#123;</span><br><span class="line">      assert.throws(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosedRange(<span class="number">8</span>, <span class="number">3</span>);</span><br><span class="line">      &#125;, <span class="string">"上端点(3)より下端点(8)が大きい閉区間は作れません"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  suite(<span class="string">"整数の閉区間は指定した整数を含むかどうかを判定できる"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> closedRange;</span><br><span class="line">    setup(<span class="string">"前準備"</span>, () =&gt; &#123;</span><br><span class="line">      closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、3ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.include(<span class="number">3</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、8ならは含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isTrue(closedRange.include(<span class="number">8</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、9ならは含まれると判定(false)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isFalse(closedRange.include(<span class="number">9</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]の場合、2ならは含まれないと判定(false)される"</span>, () =&gt; &#123;</span><br><span class="line">      assert.isFalse(closedRange.include(<span class="number">2</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  suite(<span class="string">" 別の閉区間と等価かどうか判定できる"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> closedRange;</span><br><span class="line">    setup(<span class="string">"前準備"</span>, () =&gt; &#123;</span><br><span class="line">      closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]と閉区間[3,8]の場合、等価と判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange2 = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">      assert.isTrue(closedRange.equal(closedRange2));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]と閉区間[4,8]の場合、等価ではないと判定(false)される"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange2 = <span class="keyword">new</span> ClosedRange(<span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">      assert.isFalse(closedRange.equal(closedRange2));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  suite(<span class="string">"別の閉区間に完全に含まれるかどうかも判定できる"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> closedRange;</span><br><span class="line">    setup(<span class="string">"前準備"</span>, () =&gt; &#123;</span><br><span class="line">      closedRange = <span class="keyword">new</span> ClosedRange(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]と閉区間[4,7]の場合、完全に含まれると判定(true)される"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange2 = <span class="keyword">new</span> ClosedRange(<span class="number">4</span>, <span class="number">7</span>);</span><br><span class="line">      assert.isTrue(closedRange.includeObject(closedRange2));</span><br><span class="line">    &#125;);</span><br><span class="line">    test(<span class="string">"閉区間[3,8]と閉区間[1,2]の場合、完全に含まれてないと判定(false)される "</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> closedRange2 = <span class="keyword">new</span> ClosedRange(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">      assert.isFalse(closedRange.includeObject(closedRange2));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>closed_range.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosedRange</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(lower, upper) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lower &gt; upper) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`上端点(<span class="subst">$&#123;upper&#125;</span>)より下端点(<span class="subst">$&#123;lower&#125;</span>)が大きい閉区間は作れません`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._lower = lower;</span><br><span class="line">    <span class="keyword">this</span>._upper = upper;</span><br><span class="line">  &#125;</span><br><span class="line">  stringify() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>._lower&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>._upper&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  include(number) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._lower &lt;= number &amp;&amp; number &lt;= <span class="keyword">this</span>._upper;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  equal(other) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._lower === other._lower &amp;&amp; <span class="keyword">this</span>._upper === <span class="keyword">this</span>._upper;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  includeObject(object) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._lower &lt;= object._lower &amp;&amp; object._upper &lt;= <span class="keyword">this</span>._upper;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ついでに <a href="https://tdd-bc-ehime.k2works.now.sh/" target="_blank" rel="noopener">デプロイ</a> してみた。</p><h1 id="コードレビュー-2-回目"><a href="#コードレビュー-2-回目" class="headerlink" title="コードレビュー(2 回目)"></a>コードレビュー(2 回目)</h1><p>コードレビュー２回目は Ruby チームの発表。レビューする立場になってみるとこれはこれで難しいことがわかった。あと、プロダクトコードからではなくテストコードを構造化して日本語仕様として読むことでそこからプロダクトコードの問題点を指摘するというアプローチは言語を問わず有効だと思った。</p><h1 id="クロージング"><a href="#クロージング" class="headerlink" title="クロージング"></a>クロージング</h1><p><strong>やはり俺のテスト駆動開発に対する理解は間違っていなかった</strong> という感触をつかめた TDD Boot Camp ではあったけどペアプログラミングに関しては今まで自分がやっていたのはペアプログラミングではなかった <strong>やはり俺のペアプログラミングは間違っている</strong> ので今回の経験を次回から反映していきたい。今回は品質に関しても多く言及していたけどその中で自分のテスト駆動開発に対する立ち位置は <strong>動作するサンプルを書きながら設計を改善する活動</strong> でありソフトウェア品質という面ではどこか一歩引いていたことを自覚できた。</p><p>つまり <strong>やはり俺のテスト駆動開発は動作するサンプルを書きながら設計を改善する活動だった</strong> ことを明確に意識することが出来た一方で <strong>やはり俺のテスト駆動開発における品質に対する意識は低かった</strong> のである。今後の課題として取り組みたい。あと、レガシーコード改善ガイドでは改善手順のなかでそのまま <strong>テスト駆動開発</strong> を使うと記述されているのでテスト駆動開発はなにも新規開発だけで使える開発手法ではないという知見も今後広まっていくのではないかと思った。</p><h1 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h1><ul><li><p><a href="https://speakerdeck.com/twada/tdd-live-and-workshop-2019-spring" target="_blank" rel="noopener">見てわかるテスト駆動開発</a></p></li><li><p><a href="https://agile459.connpass.com/event/161044/" target="_blank" rel="noopener">TDD Boot Camp in 愛媛 #1</a></p></li><li><p><a href="https://togetter.com/li/1468955" target="_blank" rel="noopener">togetter</a></p></li><li><p><a href="https://one-person.hatenablog.jp/entry/2020/02/27/192617" target="_blank" rel="noopener">TDD Boot Camp in 愛媛 に参加しました！</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> マネジメント </category>
          
          <category> エンジニアリング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> テスト駆動開発 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StartupWeekendFukuoka June振り返り</title>
      <link href="/2014/06/16/2014-06-16-startup-weekend-fukuoka/"/>
      <url>/2014/06/16/2014-06-16-startup-weekend-fukuoka/</url>
      
        <content type="html"><![CDATA[<p><img src="http://startupweekend.jp/images/SW_logo_green.png" alt=""></p><blockquote><p>スタートアップウィークエンド とは…<br>ある 週末の54時間の あいだ、<br>あなたのいる町に現れる 幻のシリコンバレー。</p></blockquote><a id="more"></a><h1 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h1><ol><li><a href="#1">Startup Weekendとは</a></li><li><a href="#2">タイムスケジュール</a></li><li><a href="#3">2014-06-13 ミートアップ＆チームビルディング</a></li><li><a href="#4">2014-06-14 ビジネスモデル開発＆MVP作成</a></li><li><a href="#5">2014-06-15 ビジネスモデル開発＆MVP作成&amp;発表</a></li><li><a href="#6">まとめ</a></li><li><a href="#7">参考リンク</a></li></ol><h2 id="Startup-Weekendとは"><a href="#Startup-Weekendとは" class="headerlink" title="Startup Weekendとは"></a><a name="1">Startup Weekendとは</a></h2><blockquote><p>スタートアップウィークエンド とは…<br>ある 週末の54時間の あいだ、<br>あなたのいる町に現れる 幻のシリコンバレー。</p></blockquote><blockquote><p>“あなたを起業家にする５４時間。No Talk, All Action!”<br><a href="http://startupweekend.jp/" target="_blank" rel="noopener">http://startupweekend.jp/</a></p></blockquote><h2 id="タイムスケジュール"><a href="#タイムスケジュール" class="headerlink" title="タイムスケジュール"></a><a name="2">タイムスケジュール</a></h2><ul><li>2014-06-13 ミートアップ＆チームビルディング</li><li>2014-06-14 ビジネスモデル開発＆MVP作成</li><li>2014-06-15 ビジネスモデル開発＆MVP作成&amp;発表</li></ul><h2 id="2014-06-13-ミートアップ＆チームビルディング"><a href="#2014-06-13-ミートアップ＆チームビルディング" class="headerlink" title="2014-06-13 ミートアップ＆チームビルディング"></a><a name="3">2014-06-13 ミートアップ＆チームビルディング</a></h2><h3 id="イテレーション-00"><a href="#イテレーション-00" class="headerlink" title="イテレーション#00"></a>イテレーション#00</h3><p>イベントの流れとしてはアイデアを持ってきた人が発表して一緒に作りたい人を募って３日で何か作って発表する。<br>参加者の役割はハッカー（形にしていく人）・ハスラー（企画者・プロジェクトリーダー）・デザイナー（絵や図で示していく人）の３つ。<br>今回はハッカーとして『IDカード情報を使って病院の待ち時間がわかるサービス』というアイデアに参加。<br>メンバー構成は技術１名（男性社会人）マーケティング３名（男性社会人・男性学生・女性社会人）デザイン１名（女性学生）という構成。<br>会場は２２時で閉まるためそのあと近所のマクドナルドで簡単な打ち合わせをして初日は終了。</p><h2 id="2014-06-14-ビジネスモデル開発＆MVP作成"><a href="#2014-06-14-ビジネスモデル開発＆MVP作成" class="headerlink" title="2014-06-14 ビジネスモデル開発＆MVP作成"></a><a name="4">2014-06-14 ビジネスモデル開発＆MVP作成</a></h2><h3 id="イテレーション-01"><a href="#イテレーション-01" class="headerlink" title="イテレーション#01"></a>イテレーション#01</h3><h4 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h4><h5 id="プランAを文書化する"><a href="#プランAを文書化する" class="headerlink" title="プランAを文書化する"></a>プランAを文書化する</h5><p><img src="https://farm4.staticflickr.com/3881/14265060798_7f2db17b37.jpg" alt=""></p><p>メンバーの１人が体調不良のため参加できなくなったので４名体制でスタートすることになった。<br>まず、『IDカード情報を使って病院の待ち時間がわかるサービス』というアイデアを実現するにあたってリーンキャンパスを作成して整理することにした。<br>顧客としては病院関係者、患者を想定。そこから以下のように整理した。</p><ul><li>顧客セグメント<ul><li>患者</li></ul></li><li>課題<ul><li>診察カードを病院ごとに複数持つのは管理が大変だ</li><li>病院の受付で長時間待つのは苦痛だ  </li></ul></li><li>価値提供<ul><li>病院の診療受付待ち時間をなくす<ul><li>診察情報の一元化</li><li>待ち受け業務の効率化</li></ul></li></ul></li></ul><h4 id="Mesure"><a href="#Mesure" class="headerlink" title="Mesure"></a>Mesure</h4><h5 id="プランで最もリスクの高い部分をみつける"><a href="#プランで最もリスクの高い部分をみつける" class="headerlink" title="プランで最もリスクの高い部分をみつける"></a>プランで最もリスクの高い部分をみつける</h5><p>整理したリーンキャンパスの内容を元にリスクの優先順位をつけることにした。<br>まず確認したのが製品リスクである『本当に課題は存在するのか？』に対してビジネスモデルインタビューを実施した。<br>実施内容を以下の通り。</p><ul><li>イベント参加者へのインタビュー</li><li>近隣病院への電話インタビュー</li><li>近隣病院への訪問インタビュー</li></ul><h4 id="Learn"><a href="#Learn" class="headerlink" title="Learn"></a>Learn</h4><h5 id="プランを体系的にテストする"><a href="#プランを体系的にテストする" class="headerlink" title="プランを体系的にテストする"></a>プランを体系的にテストする</h5><p>インタビューの結果以下の洞察を得ることができた。</p><ul><li>患者<ul><li>総じて診察カードを複数もつことは問題だと思っているようだ</li><li>待ち時間に関しては忙しい社会人にとっては重要だが高齢者などにとってはそれほど重要な問題ではなさそうだ</li></ul></li><li>病院関係者<ul><li>高齢者が多いのでICカードやスマートフォンなどハイテクツールの利用は期待できない</li><li>待ち時間に関してはそれほど業務負荷ではない</li></ul></li></ul><p>洞察を元に定性的検証を実施した結果以下の結論に達した。</p><ul><li>患者<ul><li>仮説設定した課題は存在していそうだ</li></ul></li><li>病院関係者<ul><li>患者サイドの課題がそのまま病院関係者側の課題と繋がっていないようだ</li><li>今回の課題とはあまり接点のなかった高齢者に対する意識が総じて強いようだ</li></ul></li></ul><p>上記の洞察をもとに以下ののソリューションを決定した。</p><ul><li>ICカードを使った診察券統合サービス</li><li>近くの病院の診察待ち時間がわかるサービス</li></ul><h3 id="イテレーション-02"><a href="#イテレーション-02" class="headerlink" title="イテレーション#02"></a>イテレーション#02</h3><p>イテレーション#01で決定したソリューションを実施するにあたって対象となる顧客セグメントのピボットを実施する必要が発生した。<br>なぜなら病院関係者にインタビューした結果反応が非常に悪かったため病院関係者から収益を得るモデルを構築するのは難しいと判断したから。</p><h4 id="Build-1"><a href="#Build-1" class="headerlink" title="Build"></a>Build</h4><h5 id="プランAを文書化する-1"><a href="#プランAを文書化する-1" class="headerlink" title="プランAを文書化する"></a>プランAを文書化する</h5><p>顧客を患者にフォーカスしてリーンキャンバスを更新した。具体的な顧客セグメントととして患者のなかでも高齢者とその家族に焦点を当てることにした。<br>なぜならば病院関係者からインタビューした際に高齢者の患者というキーワードが頻繁に出たから。</p><ul><li>顧客セグメント<ul><li>高齢者の患者の家族</li></ul></li><li>課題<ul><li>高齢者の患者が病院に出かけて行って戻ってくるまでの間家族が心配する</li></ul></li><li>価値提供<ul><li>病院に診察に出かけて戻ってくるまで間家族が不安になる時間をなくす<ul><li>病院に入って病院から出るまでの時間をわかるようにする</li></ul></li></ul></li></ul><h4 id="Mesure-1"><a href="#Mesure-1" class="headerlink" title="Mesure"></a>Mesure</h4><h5 id="プランで最もリスクの高い部分をみつける-1"><a href="#プランで最もリスクの高い部分をみつける-1" class="headerlink" title="プランで最もリスクの高い部分をみつける"></a>プランで最もリスクの高い部分をみつける</h5><p>変更したリーンキャンパスを元に製品リスクとして『病院側の協力なしには課題の解決はできるか？』という問題が焦点となった。<br>なぜならば問題を解決するにあたって患者が病院を利用した情報を取得する必要があるのだがそれを実現するためには病院関係者サイドの協力が必要があるから。<br>つまり、『患者サイドの課題を解決する方法で病院サイドにメリットが提供できるか？』という課題を解決する必要がある。</p><h4 id="Learn-1"><a href="#Learn-1" class="headerlink" title="Learn"></a>Learn</h4><h5 id="プランを体系的にテストする-1"><a href="#プランを体系的にテストする-1" class="headerlink" title="プランを体系的にテストする"></a>プランを体系的にテストする</h5><p>いくつかの検証の結果以下の結論に至った。</p><ul><li>病院側の協力なしには課題の解決はむずかしい。</li><li>患者サイドの課題を解決する方法では病院サイドにメリットが提供できない。</li></ul><p>ここでプロジェクトは一旦停滞する。</p><h3 id="イテレーション-03"><a href="#イテレーション-03" class="headerlink" title="イテレーション#03"></a>イテレーション#03</h3><p>イテレーション#02で停滞したプロジェクト状況を打開すべく何人かの外部アドバイザーに意見をもらう。そして価値提案のピボットを実施することになる。<br>この時点で当初の『IDカード情報を使って病院の待ち時間がわかるサービス』から『お年寄りと子供の交流の場を作り心の健康をまもるサービス』へとコンセプトが大きく変わる。</p><h4 id="Build-2"><a href="#Build-2" class="headerlink" title="Build"></a>Build</h4><h5 id="プランAを文書化する-2"><a href="#プランAを文書化する-2" class="headerlink" title="プランAを文書化する"></a>プランAを文書化する</h5><p>ベースコンセプトが変わったため新たな顧客ターゲット（お年寄り・登校拒否の子供）を想定したリーンキャンパスに再構築することになった。</p><ul><li>顧客セグメント<ul><li>老人ホームに入居しているお年寄り</li><li>一人暮らしのお年寄り</li><li>登校拒否児童の保護者</li></ul></li><li>課題<ul><li>孤独なお年寄りは会話が無い</li><li>一人暮らしのお年寄りは孤独だ</li><li>不登校児童はコミュニケーションが無い  </li></ul></li><li>価値提供<ul><li>お年寄りと子供の心の健康<ul><li>孤独なお年寄りと登校拒否児童のマッチングの場を提供</li></ul></li></ul></li></ul><h4 id="Mesure-2"><a href="#Mesure-2" class="headerlink" title="Mesure"></a>Mesure</h4><h5 id="プランで最もリスクの高い部分をみつける-2"><a href="#プランで最もリスクの高い部分をみつける-2" class="headerlink" title="プランで最もリスクの高い部分をみつける"></a>プランで最もリスクの高い部分をみつける</h5><p>再構築したリーンキャンパスを元に顧客リスク『本当に一人暮らしのお年寄りは孤独か？』と市場リスク『どこから収益を得るのか？』を検証した。<br>検証にあたってはイベント参加者へインタビューを実施。</p><h4 id="Learn-2"><a href="#Learn-2" class="headerlink" title="Learn"></a>Learn</h4><h5 id="プランを体系的にテストする-2"><a href="#プランを体系的にテストする-2" class="headerlink" title="プランを体系的にテストする"></a>プランを体系的にテストする</h5><p>インタビューの結果以下の洞察を得た。</p><ul><li>一概に一人暮らしの老人が孤独とはいえない</li><li>登校拒否の子供はコミュニケーションに問題があるようだ</li><li>収益を得る部分がない</li></ul><p>顧客セグメントに関してはまだまだ追加検証の必要があるものの課題は存在しそうな事がわかった。むしろここで問題となったのは収益に関する部分である。<br>十分な収益を得るモデルが見つからないのである。この時点ではNPOとして老人ホーム・自治体などからの協賛・寄付による収益モデルしか見つからなかった。<br>プロジェクトは再び停滞し始めたところで２日目が終了、各自課題持ち帰りとして解散した。<br>なお、サービス告知用ランディングページは必要なので解散後に宿泊施設付近のモスバーガーで作成してクラウドサーバにアップロードまでは実施しておいた。</p><p><img src="https://farm6.staticflickr.com/5274/14265245547_0b10321edd.jpg" alt=""></p><p>初めて訪れた福岡・中洲でやったことはプログラミング・・・</p><h2 id="2014-06-15-ビジネスモデル開発＆MVP作成-amp-発表"><a href="#2014-06-15-ビジネスモデル開発＆MVP作成-amp-発表" class="headerlink" title="2014-06-15 ビジネスモデル開発＆MVP作成&amp;発表"></a><a name="5">2014-06-15 ビジネスモデル開発＆MVP作成&amp;発表</a></h2><h3 id="イテレーション-04"><a href="#イテレーション-04" class="headerlink" title="イテレーション#04"></a>イテレーション#04</h3><p>イベント最終日、１６時からアイデアを発表するのでリミットは８時間。ここで前日の収益問題を解決するためソリューションを構築するため再び価値提案のピボットと顧客セグメントのピボットを実施。<br>時間的にもこれ以上の変更を実施する余裕は無いのでソリューションをありきでビジネスモデルを再構築。<br>はたして発表に間に合うのか？</p><h4 id="Build-3"><a href="#Build-3" class="headerlink" title="Build"></a>Build</h4><h5 id="プランAを文書化する-3"><a href="#プランAを文書化する-3" class="headerlink" title="プランAを文書化する"></a>プランAを文書化する</h5><p>ターゲット顧客に関してはこれまでキーワードとなってきた高齢者にフォーカス。イテレーション#03で対象とした不登校児はスコープから完全に外す。<br>収益を得るためのソリューションとして孤独なお年寄りの話を聞いてあげて年表を作るアイデアをベースにリーンキャンパスを構築。</p><ul><li>顧客セグメント<ul><li>話相手のいないお年寄り</li></ul></li><li>課題<ul><li>話相手のいないお年寄りは自分の話を聞いていほしい  </li></ul></li><li>価値提供<ul><li>お年寄りの孤独をなくす</li></ul></li></ul><h4 id="Mesure-3"><a href="#Mesure-3" class="headerlink" title="Mesure"></a>Mesure</h4><h5 id="プランで最もリスクの高い部分をみつける-3"><a href="#プランで最もリスクの高い部分をみつける-3" class="headerlink" title="プランで最もリスクの高い部分をみつける"></a>プランで最もリスクの高い部分をみつける</h5><p>残り時間があまりないこともありソリューションの鍵となる課題である顧客リスク『お年寄りは本当に話し相手を必要としているのか？』にフォーカスして検証を実施。<br>具体的な検証としては付近の老人ホームへ電話インタビュー実施した。</p><h4 id="Learn-3"><a href="#Learn-3" class="headerlink" title="Learn"></a>Learn</h4><h5 id="プランを体系的にテストする-3"><a href="#プランを体系的にテストする-3" class="headerlink" title="プランを体系的にテストする"></a>プランを体系的にテストする</h5><p>電話インタビューの結果『話し相手を必要としているお年寄りはかなりいるようだ』という結論に達したのでソリューションとして『学生アルバイトがお年寄りとお話をして年表をつくるサービス』を構築することにした。</p><p>ソリューションを決めた時点で残り時間は５時間だったので前日に作成した予告サイトをベースに３時間で<a href="https://github.com/k2works/smart_reception" target="_blank" rel="noopener">マーケティングサイトと測定プログラム</a>を作成した。<br>マーケティングサイトで検証したい内容は以下の３つ</p><ul><li>コンセプト</li><li>サービス内容・対象</li><li>サービス価格</li></ul><p><img src="https://farm3.staticflickr.com/2935/14430609132_3a6128cf76.jpg" alt=""></p><p><img src="https://farm6.staticflickr.com/5522/14245277429_cac788e873.jpg" alt=""></p><p><img src="https://farm4.staticflickr.com/3914/14245472127_c04c3796bd.jpg" alt=""></p><p><img src="https://farm3.staticflickr.com/2896/14245320140_a7ae12c4b7.jpg" alt=""></p><p>マーケティングサイトのサーバアップロードと簡単なテスト実施後に各メンバーのFaceBook,Lineなどソーシャル・ネットワーク経由で検証依頼をしてもらった。<br>結果として２時間で１００件近くのフィードバックを得ることができた。GoogleAnalysticsで測定していたのがピーク時で毎秒１０アクセスあった。正直ソーシャルネットワークでここまでの数字が出ると思わなかったので少し感動した。</p><p><img src="https://farm6.staticflickr.com/5118/14264882319_88c6a62567.jpg" alt=""></p><p>ちなみにソースコードは<a href="https://github.com/k2works/smart_reception" target="_blank" rel="noopener">ここ</a>。<br>システムは<a href="http://www.sinatrarb.com/" target="_blank" rel="noopener">Sinatra</a>を採用、サーバーホスティングには<a href="https://www.heroku.com/home" target="_blank" rel="noopener">Heroku</a>を利用。</p><p>そして、マーケティングサイトをそのままプレゼンに使用して結果発表。結果としては十分ではなかったかもしれないが８時間で何とか形に出来たので良しとしたい。しかし、マーケティングサイトの検証結果を元にあと２回ぐらい学習ループを回せていたら・・・と思うと少し残念である。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a><a name="6">まとめ</a></h2><p>優勝したチームと特別賞をもらったチームの特徴として</p><ul><li>ベースとなるアイデアが初日からぶれていない</li><li>実際に動くプロダクトをプレゼンしている</li></ul><p>という２点があったので参考としたい。</p><p>結論としては<strong>『スタートアップウィークエンドは面白い！』</strong>である。<br>次回の福岡イベントは１１月だそうだが是非参加したいと思う。</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a><a name="7">参考リンク</a></h2><ul><li><a href="http://fukuoka.startupweekend.org/" target="_blank" rel="noopener">Startup Weekend Fukuoka</a></li><li><a href="https://github.com/k2works/smart_reception" target="_blank" rel="noopener">StartupWeekendFukuoka発表プロダクト</a></li><li><a href="http://swf2014.herokuapp.com/" target="_blank" rel="noopener">お年寄りの孤独をなくす</a>(リンク先はなくなる可能性あり)</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a name="7">参考文献</a></h1><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4873115914&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> マネジメント </category>
          
          <category> ビジネス </category>
          
      </categories>
      
      
        <tags>
            
            <tag> リーンスタートアップ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顧客開発モデル</title>
      <link href="/2014/04/25/2014-04-25-what-is-customer-development-mode/"/>
      <url>/2014/04/25/2014-04-25-what-is-customer-development-mode/</url>
      
        <content type="html"><![CDATA[<p><span style="font-size:10px;"><a href="http://www.flickr.com/photos/djsosumi/715072019/" target="_blank"><img src="http://farm2.static.flickr.com/1430/715072019_1f7131c757_z.jpg?zz=1" alt="rainboooo" /></a><br />rainboooo / nuttallp</span></p><blockquote><p>“There Are No Facts Inside Your Building , So Get Out Side”<br>(顧客は外にいる)</p><blockquote><p>『THE STARTUP OWNER’S MANUAL』</p></blockquote></blockquote><a id="more"></a><h1 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h1><ol><li><a href="#1">顧客開発モデルとは</a></li><li><a href="#2">３つの領域２つのステップ</a></li><li><a href="#3">顧客開発モデルマニフェスト</a></li><li><a href="#4">顧客発見プロセス概要</a></li><li><a href="#5">顧客実証プロセス概要</a></li><li><a href="#6">軌道修正するか進めるか？(Pivot or Proceed?)</a></li><li><a href="#7">次にやること</a></li><li><a href="#8">参考リンク</a></li><li><a href="#9">参考文献</a></li></ol><h1 id="顧客開発モデルとは"><a href="#顧客開発モデルとは" class="headerlink" title="顧客開発モデルとは"></a><a name="1">顧客開発モデルとは</a></h1><ul><li>「ヒト・モノ・カネを散々投じた挙句誰も欲しがらないものを開発してしまう」という新事業・新商品の典型的失敗を避けるためのプロセス</li><li>４つのプロセスで顧客を相手に仮説検証を繰り返し、再現可能でスケーラブルなビジネスモデルを探索する。</li></ul><p><img src="https://farm8.staticflickr.com/7037/13979565626_af727aedf3.jpg" alt="cdm-001 by Katuyuki Kakigi, on Flickr"></p><p>顧客開発モデル</p><h1 id="３つの領域２つのステップ"><a href="#３つの領域２つのステップ" class="headerlink" title="３つの領域２つのステップ"></a><a name="2">３つの領域２つのステップ</a></h1><p><img src="https://farm3.staticflickr.com/2902/14002669065_b2cd8052a1.jpg" alt="cdm-002 by Katuyuki Kakigi, on Flickr"></p><h1 id="顧客開発モデルマニフェスト"><a href="#顧客開発モデルマニフェスト" class="headerlink" title="顧客開発モデルマニフェスト"></a><a name="3">顧客開発モデルマニフェスト</a></h1><ol><li>There Are No Facts Inside Your Building , So Get Out Side.(会社の中には事実は無い、外で見つけろ)</li><li>Pair Customer Development with Agile Development.(顧客開発はアジャイル開発とペアで)</li><li>Failure is an Integral Part of The Search.(失敗は探索の欠くことのできない要素である)</li><li>Make Continuous Iterations and Pivots.(継続的イテレーションとピボット)</li><li>No Business Plan Survives First Contact with Customers. So Use a Business Model Canvas.(どんなビジネスプランも最初の顧客との接触がなければ生き残れない。だからビジネスモデルキャンバスを使え)</li><li>Design Experiments and Test to Validate Your Hypotheses.(実験的に設計し仮説をテスト検証せよ)</li><li>Agree on Market Type. It Changes Everything.(常に変化する市場タイプに適応せよ)</li><li>Startup Metrics Differ from Those in Existing Companies.(スタートアップの指標は既存企業のものとは違う)</li><li>Fast Decision-Making, Cycle Time, Speed and Tempo.(迅速な意思決定,サイクル,スピードそしてテンポ)</li><li>It’s All About Passion.(なにはなくとも情熱)</li><li>Startup Job Titles Are Very Different from a Large Company’s.(スタートアップの職種は大企業のそれとは違う)</li><li>Preserve All Cash Until Needed The Spend.(必要になるまで全てのお金は節約する)</li><li>Communicate and Share Learning.(コミュニケーションと学びの共有)</li><li>Customer Development Success Begins with Buy-In.(顧客開発は受け入れるところから成功が始まる)</li></ol><p><img src="https://farm6.staticflickr.com/5182/13979124934_5f35f731da.jpg" alt="bmc-001 by Katuyuki Kakigi, on Flickr"></p><h1 id="顧客発見プロセス概要"><a href="#顧客発見プロセス概要" class="headerlink" title="顧客発見プロセス概要"></a><a name="4">顧客発見プロセス概要</a></h1><p><img src="https://farm8.staticflickr.com/7372/14022680113_4474dd36e5.jpg" alt="cdm-003 by Katuyuki Kakigi, on Flickr"></p><h2 id="Step1-仮説をたてる"><a href="#Step1-仮説をたてる" class="headerlink" title="Step1:仮説をたてる"></a>Step1:仮説をたてる</h2><p><img src="https://farm8.staticflickr.com/7216/13999497591_2794820037.jpg" alt="cdm-004-1 by Katuyuki Kakigi, on Flickr"></p><ul><li>価値提案：提供する価値を明確にする</li><li>価値提案：ユーザーフレンドリーでないMVP</li><li>顧客セグメント：価値提案を明確にする</li><li>顧客セグメント：市場タイプを明確にする</li><li>リソース：必要なリソースはなにか</li><li>収益の流れ：売上をどうたてるか</li></ul><h2 id="Step2-問題を検証する"><a href="#Step2-問題を検証する" class="headerlink" title="Step2:問題を検証する"></a>Step2:問題を検証する</h2><p><img src="https://farm8.staticflickr.com/7418/14003106214_223af6ba66.jpg" alt="cdm-004-2 by Katuyuki Kakigi, on Flickr"></p><ul><li>価値提案：ユーザーフレンドリーでないコンテンツ作成</li><li>顧客セグメント：顧客の理解</li><li>顧客セグメント：市場の理解</li><li>チャネル：流れ・競合分析</li></ul><h2 id="Step3-解決策を検証する"><a href="#Step3-解決策を検証する" class="headerlink" title="Step3:解決策を検証する"></a>Step3:解決策を検証する</h2><p><img src="https://farm3.staticflickr.com/2933/13999497491_1f8262461d.jpg" alt="cdm-005 by Katuyuki Kakigi, on Flickr"></p><ul><li>価値提案：ユーザーフレンドリーなMVP</li><li>顧客セグメント：解決策の提案</li></ul><h2 id="Step4-軌道修正するか進めるか"><a href="#Step4-軌道修正するか進めるか" class="headerlink" title="Step4:軌道修正するか進めるか"></a>Step4:軌道修正するか進めるか</h2><p><img src="https://farm3.staticflickr.com/2933/13999497491_1f8262461d.jpg" alt="cdm-005 by Katuyuki Kakigi, on Flickr"></p><ul><li>価値提案：PMF(プロダクトマーケットフィット)検証</li><li>顧客セグメント：顧客検証</li><li>Pivot or Proceed?</li></ul><h1 id="顧客実証プロセス概要"><a href="#顧客実証プロセス概要" class="headerlink" title="顧客実証プロセス概要"></a><a name="5">顧客実証プロセス概要</a></h1><p><img src="https://farm3.staticflickr.com/2914/13979565486_070d6ac3b8.jpg" alt="cdm-006 by Katuyuki Kakigi, on Flickr"></p><h2 id="Setp1-テスト販売の準備"><a href="#Setp1-テスト販売の準備" class="headerlink" title="Setp1:テスト販売の準備"></a>Setp1:テスト販売の準備</h2><p><img src="https://farm3.staticflickr.com/2934/13999479652_4966f85038.jpg" alt="cdm-007 by Katuyuki Kakigi, on Flickr"></p><ul><li>価値提案：顧客発見プロセスの仮説製品・サービス</li><li>チャネル：仮説の対象となる顧客に届くチャネルの構築</li></ul><h2 id="Step2-初期採用者への販売"><a href="#Step2-初期採用者への販売" class="headerlink" title="Step2:初期採用者への販売"></a>Step2:初期採用者への販売</h2><p><img src="https://farm8.staticflickr.com/7431/13999497381_f1834328bb.jpg" alt="cdm-008 by Katuyuki Kakigi, on Flickr"></p><ul><li>顧客セグメント：初期採用者</li><li>収益の流れ：売上が立つのか実証</li></ul><h2 id="Step3-ポジショニング開発"><a href="#Step3-ポジショニング開発" class="headerlink" title="Step3:ポジショニング開発"></a>Step3:ポジショニング開発</h2><p><img src="https://farm8.staticflickr.com/7117/14022679883_e30500d33d.jpg" alt="cdm-009 by Katuyuki Kakigi, on Flickr"></p><ul><li>顧客セグメント</li><li>顧客との関係</li><li>チャネル</li></ul><h2 id="軌道修正するか進めるか"><a href="#軌道修正するか進めるか" class="headerlink" title="軌道修正するか進めるか"></a>軌道修正するか進めるか</h2><p><img src="https://farm8.staticflickr.com/7006/14002668655_7f417d44fc.jpg" alt="cdm-010 by Katuyuki Kakigi, on Flickr"></p><ul><li>価値提供</li><li>顧客セグメント</li><li>顧客との関係</li><li>チャネル</li><li>収益の流れ</li></ul><h1 id="軌道修正するか進めるか？-Pivot-or-Proceed"><a href="#軌道修正するか進めるか？-Pivot-or-Proceed" class="headerlink" title="軌道修正するか進めるか？(Pivot or Proceed?)"></a><a name="6">軌道修正するか進めるか？(Pivot or Proceed?)</a></h1><p><img src="https://farm6.staticflickr.com/5260/14003106024_8795b3591b.jpg" alt="cdm-011 by Katuyuki Kakigi, on Flickr"></p><h2 id="検証する"><a href="#検証する" class="headerlink" title="検証する"></a>検証する</h2><p><img src="https://farm3.staticflickr.com/2912/13999479502_e3a96af20d.jpg" alt="cdm-012 by Katuyuki Kakigi, on Flickr"><br><img src="https://farm3.staticflickr.com/2905/13979565286_709abbd4db.jpg" alt="cdm-013 by Katuyuki Kakigi, on Flickr"></p><ul><li>ビジネスモデルを検証する</li></ul><h2 id="検証する-1"><a href="#検証する-1" class="headerlink" title="検証する"></a>検証する</h2><p><img src="https://farm8.staticflickr.com/7348/13979565246_a5531ed72e.jpg" alt="cdm-014 by Katuyuki Kakigi, on Flickr"><br><img src="https://farm6.staticflickr.com/5161/13999479422_eba988f995.jpg" alt="cdm-015 by Katuyuki Kakigi, on Flickr"></p><ul><li>収益モデルを検証する</li></ul><h2 id="再検証する"><a href="#再検証する" class="headerlink" title="再検証する"></a>再検証する</h2><p><img src="https://farm3.staticflickr.com/2905/13979565236_f90ddf5667.jpg" alt="cdm-016 by Katuyuki Kakigi, on Flickr"><br><img src="https://farm3.staticflickr.com/2903/14002668465_797bab3b35.jpg" alt="cdm-017 by Katuyuki Kakigi, on Flickr"></p><h3 id="ビジネスモデルを検証する"><a href="#ビジネスモデルを検証する" class="headerlink" title="ビジネスモデルを検証する"></a>ビジネスモデルを検証する</h3><ul><li>一番可能性が高いか</li><li>価値提供は正しいか</li><li>製品の届けかたは正しいか</li><li>収益は高くコストは低いか</li><li>ビジネスモデルは正しいか</li></ul><h2 id="判定する"><a href="#判定する" class="headerlink" title="判定する"></a>判定する</h2><p><img src="https://farm6.staticflickr.com/5279/13979565066_ccb7d733c1.jpg" alt="cdm-018 by Katuyuki Kakigi, on Flickr"><br><img src="https://farm3.staticflickr.com/2931/13999479342_f693071361.jpg" alt="cdm-019 by Katuyuki Kakigi, on Flickr"></p><h3 id="もっともタフなスタートアップの問"><a href="#もっともタフなスタートアップの問" class="headerlink" title="もっともタフなスタートアップの問"></a>もっともタフなスタートアップの問</h3><ul><li>軌道修正するか進めるか？</li></ul><h1 id="次にやること"><a href="#次にやること" class="headerlink" title="次にやること"></a><a name="7">次にやること</a></h1><h2 id="顧客開拓ステップ"><a href="#顧客開拓ステップ" class="headerlink" title="顧客開拓ステップ"></a>顧客開拓ステップ</h2><p><img src="https://farm3.staticflickr.com/2926/13979938636_0c830ef452.jpg" alt="cdm-020 by Katuyuki Kakigi, on Flickr"></p><h3 id="ターゲット顧客にリーチする方法（告知・販促）を検証する。"><a href="#ターゲット顧客にリーチする方法（告知・販促）を検証する。" class="headerlink" title="ターゲット顧客にリーチする方法（告知・販促）を検証する。"></a>ターゲット顧客にリーチする方法（告知・販促）を検証する。</h3><ul><li>市場タイプに応じた戦略で市場参入し需要を開拓する</li><li>ポジショニングやメッセージは効果的・効率的に伝播するか？</li><li>合格基準：ターゲット顧客へ確かにリーチでき、ポジショニングや内容が理解されたこと（需要開拓方法が確立）</li></ul><h2 id="組織構築ステップ"><a href="#組織構築ステップ" class="headerlink" title="組織構築ステップ"></a>組織構築ステップ</h2><p><img src="https://farm6.staticflickr.com/5563/14003105584_6b78ab6c62.jpg" alt="cdm-021 by Katuyuki Kakigi, on Flickr"></p><h2 id="安定した継続的なビジネスの構築へ"><a href="#安定した継続的なビジネスの構築へ" class="headerlink" title="安定した継続的なビジネスの構築へ"></a>安定した継続的なビジネスの構築へ</h2><p><img src="https://farm6.staticflickr.com/5081/13999496671_653046b3de.jpg" alt="cdm-022 by Katuyuki Kakigi, on Flickr"></p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a><a name="8">参考リンク</a></h1><ul><li><a href="http://enterprisezine.jp/bizgene/detail/4153" target="_blank" rel="noopener">スタートアップの定義と「顧客開発モデル」の4ステップ</a></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a name="9">参考文献</a></h1><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=B009UMTMKS&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=B00DIM673Q&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4798122971&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=B00BD6RFFS&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> マネジメント </category>
          
          <category> ビジネス </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ビジネスモデルキャンパス </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ビジネスモデルキャンパス</title>
      <link href="/2014/04/23/2014-04-23-what-is-business-model-generation/"/>
      <url>/2014/04/23/2014-04-23-what-is-business-model-generation/</url>
      
        <content type="html"><![CDATA[<div style="position:relative;height:300px;width:640px;padding:1px;background:#333;"><a href="http://www.flickr.com/photos/stevenzwerink/7329252474/" target="_blank"><img src="http://farm8.static.flickr.com/7075/7329252474_619971497e_z.jpg?zz=1" alt="タイトルなし" style="position:absolute;clip:rect(5px 902px 305px 2px);margin:-5px 0 0 -2px;padding-bottom:5px;" /></a><span style="position:absolute;bottom:0;right:0;background:#333;color:#DDD;font-size:10px;padding:3px;">タイトルなし / szwerink</span></div><hr>>A shared language for describing,visualizing,assessing, and changing business models.  >(ビジネスモデルを記述、ビジュアライズし、評価、変革するための共通言語)>>『Business Model Generation』<a id="more"></a><h1 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h1><ol><li><a href="#1">ビジネスモデルキャンパスとは</a></li><li><a href="#2">４つの領域</a></li><li><a href="#3">９つの構成ブロック</a></li><li><a href="#4">パターン</a></li><li><a href="#5">参考文献</a></li></ol><h1 id="ビジネスモデルキャンパスとは"><a href="#ビジネスモデルキャンパスとは" class="headerlink" title="ビジネスモデルキャンパスとは"></a><a name="1">ビジネスモデルキャンパスとは</a></h1><blockquote><p>A business model describes the rationale of how an organization creates,delivers, and captures value.<br>(ビジネスモデルとは、どのように価値を創造し、顧客に届けるかを論理的に記述したもの。)</p><blockquote><p>『Business Model Generation』</p></blockquote></blockquote><p><img src="https://farm6.staticflickr.com/5182/13979124934_5f35f731da.jpg" alt="bmc-001 by Katuyuki Kakigi, on Flickr"></p><ul><li>あらゆるビジネスモデルを取り扱うことのできるコンセプト</li><li>このコンセプトは４つの領域をカバーし、９つの構築ブロックで構成されている。</li><li>このビジネスモデルは組織構成、プロセス、システムを通じて実行される戦略の青写真となる。</li></ul><h1 id="４つの領域"><a href="#４つの領域" class="headerlink" title="４つの領域"></a><a name="2">４つの領域</a></h1><p><img src="https://farm8.staticflickr.com/7201/13998682883_20e2b928dd.jpg" alt="bmc-002 by Katuyuki Kakigi, on Flickr"></p><h2 id="顧客"><a href="#顧客" class="headerlink" title="顧客"></a>顧客</h2><p><img src="https://farm8.staticflickr.com/7059/13978694425_20dbd18ac6.jpg" alt="bmc-003 by Katuyuki Kakigi, on Flickr"></p><ul><li>顧客セグメント</li><li>顧客との関係</li></ul><h2 id="価値"><a href="#価値" class="headerlink" title="価値"></a>価値</h2><p><img src="https://farm8.staticflickr.com/7340/13975506861_a5b2afc8f7.jpg" alt="bmc-004 by Katuyuki Kakigi, on Flickr"></p><ul><li>価値提案</li><li>チャネル</li></ul><h2 id="インフラ"><a href="#インフラ" class="headerlink" title="インフラ"></a>インフラ</h2><p><img src="https://farm8.staticflickr.com/7144/13998682813_b18b36417b.jpg" alt="bmc-005 by Katuyuki Kakigi, on Flickr"></p><ul><li>主要活動</li><li>リソース</li><li>パートナー</li></ul><h2 id="資金"><a href="#資金" class="headerlink" title="資金"></a>資金</h2><p><img src="https://farm3.staticflickr.com/2916/13978694385_23673961ec.jpg" alt="bmc-006 by Katuyuki Kakigi, on Flickr"></p><ul><li>収益の流れ</li><li>コスト構造</li></ul><h1 id="９つの構成ブロック"><a href="#９つの構成ブロック" class="headerlink" title="９つの構成ブロック"></a><a name="3">９つの構成ブロック</a></h1><h2 id="CS-Customer-Segments-顧客セグメント"><a href="#CS-Customer-Segments-顧客セグメント" class="headerlink" title="CS:Customer Segments 顧客セグメント"></a>CS:Customer Segments 顧客セグメント</h2><p><img src="https://farm8.staticflickr.com/7377/13979194055_89febc7cec.jpg" alt="bmc-007 by Katuyuki Kakigi, on Flickr"></p><h3 id="ポイント"><a href="#ポイント" class="headerlink" title="ポイント"></a>ポイント</h3><ul><li>誰のために価値を想像するのか？</li><li>最も重要な顧客は誰なのか？</li></ul><h3 id="顧客セグメントの例"><a href="#顧客セグメントの例" class="headerlink" title="顧客セグメントの例"></a>顧客セグメントの例</h3><ul><li>マス市場</li><li>ニッチ市場</li><li>細分化</li><li>多角化</li><li>マルチサイドプラットフォーム</li></ul><h2 id="VP-Value-Propositions-価値提案"><a href="#VP-Value-Propositions-価値提案" class="headerlink" title="VP:Value Propositions 価値提案"></a>VP:Value Propositions 価値提案</h2><p><img src="https://farm8.staticflickr.com/7107/13956092776_7be1a7f311.jpg" alt="bmc-009 by Katuyuki Kakigi, on Flickr"></p><h3 id="ポイント-1"><a href="#ポイント-1" class="headerlink" title="ポイント"></a>ポイント</h3><ul><li>顧客にどんな価値を提供するのか？</li><li>どういった問題の解決を手助けするのか？</li><li>顧客のどういったニーズを満たすのか？</li><li>顧客セグメントに対してどんな製品とサービスを提供するのか？</li></ul><h3 id="価値の例"><a href="#価値の例" class="headerlink" title="価値の例"></a>価値の例</h3><ul><li>定量的なもの（価格やサービスのスピードなど）<ul><li>価格</li><li>コスト削減</li><li>リスク低減</li><li>アクセスしやすさ</li><li>快適さ／使いやすさ</li></ul></li><li>定性的なもの（デザインや顧客の経験など）<ul><li>新規性</li><li>パフォーマンス</li><li>カスタマイゼーション</li><li>「仕事を終わらせる」(Getting the job done)</li><li>ブランド</li></ul></li></ul><h2 id="CH-Channels-チャネル"><a href="#CH-Channels-チャネル" class="headerlink" title="CH:Channels チャネル"></a>CH:Channels チャネル</h2><p><img src="https://farm8.staticflickr.com/7429/13979620664_ae6d41ea4f.jpg" alt="bmc-010 by Katuyuki Kakigi, on Flickr"></p><h3 id="ポイント-2"><a href="#ポイント-2" class="headerlink" title="ポイント"></a>ポイント</h3><ul><li>どのチャネルを通じて、顧客セグメントにリーチしたいか。</li><li>今はどのようにリーチしているか。</li><li>チャネルをどのように統合しているのか。</li><li>どのチャネルがうまくいっており、どのチャネルが最も費用対効果が高いか。</li><li>チャネルを顧客の日常と、どのように統合すればよいか。</li></ul><h3 id="チャネルタイプ"><a href="#チャネルタイプ" class="headerlink" title="チャネルタイプ"></a>チャネルタイプ</h3><ul><li>直接<ul><li>営業部隊</li><li>ウェブ販売</li></ul></li><li>間接<ul><li>自社ショップ</li><li>パートナーシップ</li><li>卸売業者</li></ul></li></ul><h3 id="チャネルフェーズ"><a href="#チャネルフェーズ" class="headerlink" title="チャネルフェーズ"></a>チャネルフェーズ</h3><ol><li>認知</li><li>評価</li><li>購入</li><li>提供</li><li>アフターサービス</li></ol><h2 id="CR-Cutomer-Relationships-顧客との関係"><a href="#CR-Cutomer-Relationships-顧客との関係" class="headerlink" title="CR:Cutomer Relationships 顧客との関係"></a>CR:Cutomer Relationships 顧客との関係</h2><p><img src="https://farm8.staticflickr.com/7329/13979194045_f90642facf.jpg" alt="bmc-008 by Katuyuki Kakigi, on Flickr"></p><h3 id="ポイント-3"><a href="#ポイント-3" class="headerlink" title="ポイント"></a>ポイント</h3><ul><li>顧客セグメントがどんな関係を構築、維持してほしいと期待しているのか。</li><li>どんな関係をすでに構築したのか。どれくらいのコストがかかるのか。</li><li>ビジネスモデルの他の要素とどう統合されるのか。</li></ul><h3 id="カテゴリー"><a href="#カテゴリー" class="headerlink" title="カテゴリー"></a>カテゴリー</h3><ul><li>パーソナルアシスタント</li><li>専任のパーソナルアシスタント</li><li>セルフサービス</li><li>自動サービス</li><li>コミュニティ</li><li>共創</li></ul><h2 id="RS-Revenue-Streams-収益の流れ"><a href="#RS-Revenue-Streams-収益の流れ" class="headerlink" title="RS:Revenue Streams 収益の流れ"></a>RS:Revenue Streams 収益の流れ</h2><p><img src="https://farm8.staticflickr.com/7299/13979620494_a63e319694.jpg" alt="bmc-014 by Katuyuki Kakigi, on Flickr"></p><h3 id="ポイント-4"><a href="#ポイント-4" class="headerlink" title="ポイント"></a>ポイント</h3><ul><li>顧客はどんな価値にお金を払おうとするのか。</li><li>現在は何にお金を払っているのか。</li><li>どのようにお金を払っているのか。</li><li>どのように支払いたいと思っているのか。</li><li>全体の収益に対して、それぞれの収益の流れがどれくらい貢献しているのか。</li></ul><h3 id="収益の流れを生み出すための方法"><a href="#収益の流れを生み出すための方法" class="headerlink" title="収益の流れを生み出すための方法"></a>収益の流れを生み出すための方法</h3><ul><li>資産価値のある商品の販売</li><li>使用料</li><li>購読料</li><li>レンタル／リース</li><li>ライセンス</li><li>仲介手数料</li><li>広告</li></ul><h3 id="価格のメカニズム"><a href="#価格のメカニズム" class="headerlink" title="価格のメカニズム"></a>価格のメカニズム</h3><ul><li>固定メニュー価格<ul><li>リスト価格</li><li>製品特性に基づく価格</li><li>顧客セグメントに基づく価格</li><li>量に基づく価格</li></ul></li><li>変動価格<ul><li>交渉による価格</li><li>利益率管理に基づく価格</li><li>市場価格</li><li>オークション</li></ul></li></ul><h2 id="KR-Key-Resources-リソース"><a href="#KR-Key-Resources-リソース" class="headerlink" title="KR:Key Resources リソース"></a>KR:Key Resources リソース</h2><p><img src="https://farm8.staticflickr.com/7191/13956092596_e81b5d9a75.jpg" alt="bmc-012 by Katuyuki Kakigi, on Flickr"></p><h3 id="ポイント-5"><a href="#ポイント-5" class="headerlink" title="ポイント"></a>ポイント</h3><ul><li>価値を提案するのに必要なリソースは何だろうか。</li><li>流通チャネルや顧客との関係、収益の流れに対してはどうだろうか。</li></ul><h3 id="カテゴリー-1"><a href="#カテゴリー-1" class="headerlink" title="カテゴリー"></a>カテゴリー</h3><ul><li>物理的なリソース</li><li>知的財産</li><li>人的リソース</li><li>ファイナンスリソース</li></ul><h2 id="KA-Key-Activities-主要活動"><a href="#KA-Key-Activities-主要活動" class="headerlink" title="KA:Key Activities 主要活動"></a>KA:Key Activities 主要活動</h2><p><img src="https://farm8.staticflickr.com/7084/13975992772_894859809e.jpg" alt="bmc-011 by Katuyuki Kakigi, on Flickr"></p><h2 id="ポイント-6"><a href="#ポイント-6" class="headerlink" title="ポイント"></a>ポイント</h2><ul><li>価値を提供するのに必要な主要活動は何なのか？</li><li>流通チャネルは？</li><li>顧客との関係は？</li><li>収益の流れは？</li></ul><h2 id="分類"><a href="#分類" class="headerlink" title="分類"></a>分類</h2><ul><li>製造</li><li>問題解決</li><li>プラットフォーム／ネットワーク</li></ul><h2 id="KP-Key-Partners-パートナー"><a href="#KP-Key-Partners-パートナー" class="headerlink" title="KP:Key Partners パートナー"></a>KP:Key Partners パートナー</h2><p><img src="https://farm3.staticflickr.com/2903/13979620574_57a1555221.jpg" alt="bmc-013 by Katuyuki Kakigi, on Flickr"></p><h3 id="ポイント-7"><a href="#ポイント-7" class="headerlink" title="ポイント"></a>ポイント</h3><ul><li>主要なパートナーは誰だろうか。</li><li>主要なサプライヤーは？</li><li>どのリソースをパートナーから得ているのか？</li><li>どの主要活動をパートナーが行っているか？</li></ul><h3 id="パートナーシップを作るための動機"><a href="#パートナーシップを作るための動機" class="headerlink" title="パートナーシップを作るための動機"></a>パートナーシップを作るための動機</h3><ul><li>最適化と規模の経済</li><li>リスクと不確実性の低減</li><li>リソースと活動の獲得</li></ul><h2 id="CS-Cost-Structure-コスト構造"><a href="#CS-Cost-Structure-コスト構造" class="headerlink" title="CS:Cost Structure コスト構造"></a>CS:Cost Structure コスト構造</h2><p><img src="https://farm3.staticflickr.com/2918/13999182483_4056754a25.jpg" alt="bmc-015 by Katuyuki Kakigi, on Flickr"></p><h3 id="ポイント-8"><a href="#ポイント-8" class="headerlink" title="ポイント"></a>ポイント</h3><ul><li>ビジネスモデルにおいて特有の最も重要なコストは何だろうか？</li><li>どのリソースが最も高価だろうか。</li><li>どの主要活動が最も高価だろうか。</li></ul><h3 id="分野"><a href="#分野" class="headerlink" title="分野"></a>分野</h3><ul><li>コスト主導</li><li>価値主導</li></ul><h3 id="分類-1"><a href="#分類-1" class="headerlink" title="分類"></a>分類</h3><ul><li>固定コスト</li><li>変動費</li><li>規模の経済</li><li>多角化の経済性</li></ul><h1 id="パターン"><a href="#パターン" class="headerlink" title="パターン"></a><a name="4">パターン</a></h1><ul><li>アンバンドルビジネスモデル</li><li>ロングテール</li><li>マルチサイドプラットフォーム</li><li>ビジネスモデルとしてのフリー戦略<ul><li>フリーミアムパターン</li><li>エサと釣り針パターン</li></ul></li><li>オープンビジネス</li></ul><h2 id="アンバンドルビジネスモデル"><a href="#アンバンドルビジネスモデル" class="headerlink" title="アンバンドルビジネスモデル"></a>アンバンドルビジネスモデル</h2><p><img src="https://farm3.staticflickr.com/2937/13966374206_ae881a3d8f.jpg" alt="bmc-016 by Katuyuki Kakigi, on Flickr"></p><blockquote><p>「アンバンドル」企業のコンセプトには、根底的にことなる３つのビジネスモデルがあります。それが、顧客ビジネス、インフラビジネスです。この３つのビジネスは、経済的にも、競争という面からも、そして文化的にも異なります。異なるビジネスをひとつの会社の中に共存させることもできますが、対立やトレードオフを避けるためにも、異なる法人へと分社化するのが理想です。</p><blockquote><p>『ビジネスモデルジェネレーション』</p></blockquote></blockquote><h2 id="ロングテール"><a href="#ロングテール" class="headerlink" title="ロングテール"></a>ロングテール</h2><p><img src="https://farm8.staticflickr.com/7347/13989484875_5cee0b8917.jpg" alt="bmc-017 by Katuyuki Kakigi, on Flickr"></p><blockquote><p>ロングテールビジネスモデルとは、多くのものを少しづつ販売するモデルです。あまり頻繁に売れないニッチ製品を数多く提供します。ニッチ製品の売上を集めると、少数のベストセラーによる収益に依存するこれまでのモデルと同じくらい、大きな収益を上げることができます。ロングテールビジネスモデルは、低い在庫コストに加え、ニッチコンテツに興味のある購入者が手に入れられるようにするしっかりとしたプラットフォームが必要です。</p><blockquote><p>『ビジネスモデルジェネレーション』</p></blockquote></blockquote><h2 id="マルチサイドプラットフォーム"><a href="#マルチサイドプラットフォーム" class="headerlink" title="マルチサイドプラットフォーム"></a>マルチサイドプラットフォーム</h2><p><img src="https://farm8.staticflickr.com/7008/13989484815_99249e498a.jpg" alt="bmc-018 by Katuyuki Kakigi, on Flickr"></p><blockquote><p>マルチサイドプラットフォームは、複数の顧客グループをつなぎあわせるもので、プラットフォーム上にほかの顧客グループが同時に存在する場合にのみ、価値が生まれます。プラットフォームにおいて、グループ同士の交流を促進することで価値が生み出されるのです。マルチサイドプラットフォームは、ユーザーを獲得すればするほど価値が高まっていき、この現象はネットワーク効果として知られています。</p><blockquote><p>『ビジネスモデルジェネレーション』</p></blockquote></blockquote><h2 id="ビジネスモデルとしてのフリー戦略"><a href="#ビジネスモデルとしてのフリー戦略" class="headerlink" title="ビジネスモデルとしてのフリー戦略"></a>ビジネスモデルとしてのフリー戦略</h2><p><img src="https://farm3.staticflickr.com/2902/13986272532_3aeef814c7.jpg" alt="bmc-019 by Katuyuki Kakigi, on Flickr"></p><blockquote><p>フリー戦略：フリービジネスモデルにおいて、少なくともひとつの顧客セグメントは、無料オファーの恩恵を継続的に受けられます。パターンの違いによって、無料オファーが可能になるのです。支払いをしない顧客の費用は、ビジネスモデルの別の部分か、他の顧客セグメントによって支払われます。</p><blockquote><p>『ビジネスモデルジェネレーション』</p></blockquote></blockquote><h3 id="フリーミアムパターン"><a href="#フリーミアムパターン" class="headerlink" title="フリーミアムパターン"></a>フリーミアムパターン</h3><p><img src="https://farm6.staticflickr.com/5179/13989484775_edc4220533.jpg" alt="bmc-020 by Katuyuki Kakigi, on Flickr"></p><h3 id="エサと釣り針パターン"><a href="#エサと釣り針パターン" class="headerlink" title="エサと釣り針パターン"></a>エサと釣り針パターン</h3><p><img src="https://farm8.staticflickr.com/7193/13986272422_7a9580c762.jpg" alt="bmc-021 by Katuyuki Kakigi, on Flickr"></p><h2 id="オープンビジネス"><a href="#オープンビジネス" class="headerlink" title="オープンビジネス"></a>オープンビジネス</h2><p><img src="https://farm8.staticflickr.com/7151/13966534856_6861c2e9e8.jpg" alt="bmc-022 by Katuyuki Kakigi, on Flickr"></p><blockquote><p>オープンビジネスモデルとは、他のパートナーと組織的にコラボレーションして価値を創りだすために使うモデルです。これは企業内で外部のアイデアを実行する「アウトサイド・イン」や、社内のアイデアや眠っている資産を外部パートナーに提供する「インサイド・アウト」によって行われます。</p><blockquote><p>『ビジネスモデルジェネレーション』</p></blockquote></blockquote><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a name="5">参考文献</a></h1><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4798122971&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=B00BD6RFFS&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> マネジメント </category>
          
          <category> ビジネス </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ビジネスモデルキャンパス </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>実践リーンスタートアップ</title>
      <link href="/2014/04/18/2014-04-18-runnig-lenan-startup/"/>
      <url>/2014/04/18/2014-04-18-runnig-lenan-startup/</url>
      
        <content type="html"><![CDATA[<div style="position:relative;height:300px;width:640px;padding:1px;background:#333;"><a href="http://www.flickr.com/photos/smerikal/7732670428/" target="_blank"><img src="http://farm9.static.flickr.com/8422/7732670428_7dd738a696_z.jpg?zz=1" alt="3 Jari-Matti Latvala ja Miikka Anttila, FIN FIN, Ford World Rally Team Ford Fiesta RS WRC" style="position:absolute;clip:rect(5px 902px 305px 2px);margin:-5px 0 0 -2px;padding-bottom:5px;" /></a><span style="position:absolute;bottom:0;right:0;background:#333;color:#DDD;font-size:10px;padding:3px;">3 Jari-Matti Latvala ja Miikka Anttila, FIN FIN, Ford World Rally Team Ford Fiesta RS WRC / smerikal</span></div><hr>>Life's too short to build something nobody wants.<blockquote><p>(誰も欲しがらないものを作るほど人生は長くない)</p><blockquote><p>『Running Lean』</p></blockquote></blockquote><a id="more"></a><h1 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h1><ol><li><a href="#1">Running Leanとは</a></li><li><a href="#2">プロセス</a></li><li><a href="#3">プランAを文書化する</a></li><li><a href="#4">プランで最もリスクの高い部分をみつける</a></li><li><a href="#5">プランを体系的にテストする</a></li><li><a href="#6">参考リンク</a></li><li><a href="#7">参考文献</a></li></ol><h1 id="Running-Leanとは"><a href="#Running-Leanとは" class="headerlink" title="Running Leanとは"></a><a name="1">Running Leanとは</a></h1><p>顧客に何が欲しいかを聞くことはできない。</p><blockquote><p>If I had asked people what they wanted,then would have said faster horse.</p></blockquote><blockquote><p>(顧客に欲しい物を聞いていたら、彼らは「もっと速い馬が欲しい」と答えていただろう。)</p><blockquote><p>Henry Ford</p></blockquote></blockquote><p>適切な状況にいれば、顧客は自分の課題をはっきりと説明できる。</p><blockquote><p>It is not the customer’s job to know what they want.</p></blockquote><blockquote><p>(欲しいものを知るというのは顧客の仕事ではない。)</p><blockquote><p>Steve Jobs</p></blockquote></blockquote><p>顧客が本当に欲しい物を作るための方法論。</p><ul><li>顧客開発</li><li>リーンスタートアップ</li><li>ブートストラッピング</li></ul><p>そして、具体的なプロセス。</p><blockquote><p>Running Lean is a systematic process for iterating from Plan A to a plan that works, before running out of resources.</p></blockquote><blockquote><p>(Running Leanとは、リソースを使い切る前にプランAからうまくいくプランへと反復的に移行する体系的なプロセスです。)</p><blockquote><p>『Running Lean』</p></blockquote></blockquote><p><strong>Running Leanの方法論</strong></p><p><img src="https://farm8.staticflickr.com/7188/13946744205_cd6d6cb37c.jpg" alt="runnig-lean-011 by Katuyuki Kakigi, on Flickr"></p><ul><li>プランAを文書化する<ul><li>顧客を考える</li><li>リーンキャンパスを作る</li></ul></li><li>プランで最もリスクの高い部分を見つける<ul><li>リスクの優先順位ををつける</li><li>ビジネスモデルインタビュー</li></ul></li><li>プランを体系的にテストする<ul><li>課題を理解する</li><li>ソリューションを決定する</li><li>定性的に検証する</li><li>定量的に検証する</li></ul></li></ul><h1 id="プロセス"><a href="#プロセス" class="headerlink" title="プロセス"></a><a name="2">プロセス</a></h1><p><img src="https://farm3.staticflickr.com/2924/13898291692_53036ef35f.jpg" alt="runnig-lean-005 by Katuyuki Kakigi, on Flickr"></p><h2 id="プランAを文書化する"><a href="#プランAを文書化する" class="headerlink" title="プランAを文書化する"></a>プランAを文書化する</h2><p>Running Leanを使えば最初のビジョンを体系的にテストして改善していくことが可能。最初の手順はビジョンを書き出して、少なくとも一人の人間と共有すること。</p><p>あなたの「製品」は製品では「ない」。<br>あなたの仕事は、最高のソリューションを構築するだけでなく、ビジネスモデルの全体像を把握して、各要素をうまくまとめること。<br>そして、ビジョンを実現するビジネスモデルの仮説を捕まえるためにリーンキャンパスを使う。<br>リーンキャンパスとは、ビジネスモデルを９つの部品に分解し、リスクの高いものから体系的にテストするもの。</p><p>リーンキャンパスの特徴</p><ul><li>高速性</li><li>簡潔性</li><li>携帯性</li></ul><h2 id="プランで最もリスクの高い部分をみつける"><a href="#プランで最もリスクの高い部分をみつける" class="headerlink" title="プランで最もリスクの高い部分をみつける"></a>プランで最もリスクの高い部分をみつける</h2><h3 id="スタートアップの３つのステージ"><a href="#スタートアップの３つのステージ" class="headerlink" title="スタートアップの３つのステージ"></a>スタートアップの３つのステージ</h3><p><img src="https://farm8.staticflickr.com/7360/13920083344_e31df3c80b.jpg" alt="runnig-lean-001 by Katuyuki Kakigi, on Flickr"></p><ul><li><p>第１ステージ：課題／解決フィット(Problem/Solution Fit)</p></li><li><p>第２ステージ：製品／市場フィット(Product/Market Fit)</p></li><li><p>第３ステージ：拡大(Scale)</p></li></ul><h3 id="製品-市場フィットの前にピボット、それから最適化"><a href="#製品-市場フィットの前にピボット、それから最適化" class="headerlink" title="製品/市場フィットの前にピボット、それから最適化"></a>製品/市場フィットの前にピボット、それから最適化</h3><p><img src="https://farm8.staticflickr.com/7105/13920083294_84e6d6bdab.jpg" alt="runnig-lean-002 by Katuyuki Kakigi, on Flickr"></p><p>最初の目標は、軌道修正（またはピボット）。次の目標は、効率化（または拡大）。<br>最も学習できるのは、期待する成果の見込みが５０％の時です。つまり、何が期待できるかよくわからない時。</p><h3 id="資金調達について"><a href="#資金調達について" class="headerlink" title="資金調達について"></a>資金調達について</h3><p><img src="https://farm4.staticflickr.com/3761/13919678125_d3485ba26d.jpg" alt="runnig-lean-003 by Katuyuki Kakigi, on Flickr"></p><p>資金調達に適した時期は製品／市場フィット後。最初の目標は、ビジネスモデルを顧客とテスト・検証できるように、必要十分な滑走路を構築すること。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ブートストラッピング+リーンスタートアップ&#x3D;低燃費スタートアップ</span><br></pre></td></tr></table></figure><h2 id="プランを体系的にテストする"><a href="#プランを体系的にテストする" class="headerlink" title="プランを体系的にテストする"></a>プランを体系的にテストする</h2><h3 id="検証による学習のループが実験"><a href="#検証による学習のループが実験" class="headerlink" title="検証による学習のループが実験"></a>検証による学習のループが実験</h3><p><img src="https://farm3.staticflickr.com/2517/12965447694_45e1dce970_n.jpg" alt="lean-startup-003 by Katuyuki Kakigi, on Flickr"></p><h3 id="イテレーションのメタパターン"><a href="#イテレーションのメタパターン" class="headerlink" title="イテレーションのメタパターン"></a>イテレーションのメタパターン</h3><p><img src="https://farm8.staticflickr.com/7418/13897003711_c0f885278b.jpg" alt="runnig-lean-004 by Katuyuki Kakigi, on Flickr"></p><h1 id="プランAを文書化する-1"><a href="#プランAを文書化する-1" class="headerlink" title="プランAを文書化する"></a><a name="3">プランAを文書化する</a></h1><h2 id="顧客を考える"><a href="#顧客を考える" class="headerlink" title="顧客を考える"></a>顧客を考える</h2><p>いきなりソリューションを構築したり早い段階から顧客セグメントやビジネスモデルを選択することによる「選択バイアス」を回避するため最初から複数のモデルを同時にテストする。<br>まずは製品の見込み客のブレインストーミングから始める。</p><h3 id="見込み客を考える"><a href="#見込み客を考える" class="headerlink" title="見込み客を考える"></a>見込み客を考える</h3><ul><li>顧客とユーザーを区別する。</li><li>顧客セグメントを細かくわける。</li><li>最初はすべてを一枚のキャンパスにまとめる。</li></ul><h2 id="リーンキャンパスを作る"><a href="#リーンキャンパスを作る" class="headerlink" title="リーンキャンパスを作る"></a>リーンキャンパスを作る</h2><h3 id="リーンキャンパスをスケッチする"><a href="#リーンキャンパスをスケッチする" class="headerlink" title="リーンキャンパスをスケッチする"></a>リーンキャンパスをスケッチする</h3><p><img src="https://farm8.staticflickr.com/7164/13931958394_549d534efb.jpg" alt="lean-canvas-001 by Katuyuki Kakigi, on Flickr"></p><ul><li>一気にスケッチする。</li><li>空欄があっても構わない。</li><li>簡潔に書く。</li><li>今わかる範囲で考える。</li><li>顧客主導型を使う。</li></ul><h3 id="課題と顧客セグメント"><a href="#課題と顧客セグメント" class="headerlink" title="課題と顧客セグメント"></a>課題と顧客セグメント</h3><p><img src="https://farm3.staticflickr.com/2900/13931524895_4a1cf1ea8f.jpg" alt="lean-canvas-002 by Katuyuki Kakigi, on Flickr"></p><ul><li>上位１〜３位の課題を挙げる</li><li>既存の代替品を列挙する</li><li>ユーザーを特定する</li><li>アーリーアダプターに狙いを定める</li></ul><h3 id="UVP-独自の価値提案"><a href="#UVP-独自の価値提案" class="headerlink" title="UVP(独自の価値提案)"></a>UVP(独自の価値提案)</h3><p><img src="https://farm4.staticflickr.com/3828/13908393591_40dace4960.jpg" alt="lean-canvas-003 by Katuyuki Kakigi, on Flickr"></p><blockquote><p>Unique Value Proposition: Why you are different and worth <del>buying</del> getting attention.</p></blockquote><blockquote><p>(UVP(独自の価値提案)：あなたが他とは違っていて、<del>対価を支払う</del>注目する価値がある理由)</p><blockquote><p>『Running Lean』</p></blockquote></blockquote><h4 id="UVPの作り方"><a href="#UVPの作り方" class="headerlink" title="UVPの作り方"></a>UVPの作り方</h4><ul><li><p>変わったものにする。ただし、その違いが重要なものに限る。</p></li><li><p>アーリーアダプターをターゲットにする。</p></li><li><p>成功ストーリーに注目する。<br><strong>効果的なUVPを作る公式</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">即効性のある明快な見出し &#x3D; 顧客が望む結果 + 明確な起源 + それが達成されなかった場合の代替案</span><br></pre></td></tr></table></figure></li><li><p>言葉をよく選んで使う。</p></li><li><p>誰が・何を・なぜに答える。</p></li><li><p>優れたUVPを調べてみる。</p></li><li><p>ハイコンセプトピッチを作る。<br>ハイコンセプトピットをUVPと混同してはいけない。<br>ハイコンセプトピットはランディングページで使うものではない。</p></li></ul><h3 id="ソリューション"><a href="#ソリューション" class="headerlink" title="ソリューション"></a>ソリューション</h3><p><img src="https://farm4.staticflickr.com/3824/13908402956_82321d77b3.jpg" alt="lean-canvas-004 by Katuyuki Kakigi, on Flickr"></p><ul><li>課題とソリューションの結合はできるだけ遅らせる。</li></ul><h3 id="チャネル"><a href="#チャネル" class="headerlink" title="チャネル"></a>チャネル</h3><p><img src="https://farm8.staticflickr.com/7146/13931524765_1e112685b7.jpg" alt="lean-canvas-005 by Katuyuki Kakigi, on Flickr"></p><ul><li>無料と有料</li><li>インバウンドとアウトバウンド<ul><li>インバウンドチャネル（プル型メッセージ）<ul><li>ブログ</li><li>SEO</li><li>Ebook</li><li>小冊子</li><li>オンラインセミナー</li></ul></li><li>アウトバウンドチャネル（プッシュ型メッセージ）<ul><li>SEM</li><li>印刷広告やTV CM</li><li>展示会</li><li>営業電話  </li></ul></li></ul></li><li>直販と自動化</li><li>直接と間接</li><li>紹介の前に定着</li></ul><h3 id="収益とコスト構造"><a href="#収益とコスト構造" class="headerlink" title="収益とコスト構造"></a>収益とコスト構造</h3><p><img src="https://farm8.staticflickr.com/7251/13908402886_3a71c0a6be.jpg" alt="lean-canvas-006 by Katuyuki Kakigi, on Flickr"></p><h4 id="収益の流れ"><a href="#収益の流れ" class="headerlink" title="収益の流れ"></a>収益の流れ</h4><ul><li>価格は製品の一部</li><li>価格が顧客を決定する</li><li>課金は最初の検証</li></ul><h4 id="コスト構造"><a href="#コスト構造" class="headerlink" title="コスト構造"></a>コスト構造</h4><ul><li>３０〜５０人にインタビューしてかかるコストは？</li><li>MVPを構築してローンチするのにかかるコストは？</li><li>固定費と変動費の両面から見たバーンレート（資本金の消費率）は？</li></ul><h3 id="主要指標"><a href="#主要指標" class="headerlink" title="主要指標"></a>主要指標</h3><p><img src="https://farm8.staticflickr.com/7035/13931524685_1d3d9ebc45.jpg" alt="lean-canvas-007 by Katuyuki Kakigi, on Flickr"></p><h4 id="海賊指標-AARRR"><a href="#海賊指標-AARRR" class="headerlink" title="海賊指標(AARRR)"></a>海賊指標(AARRR)</h4><p><img src="https://farm4.staticflickr.com/3831/13908404282_4003fcbdc7.jpg" alt="aarrr-001 by Katuyuki Kakigi, on Flickr"></p><ul><li>獲得</li><li>活性化（アクティベーション）</li><li>定着</li><li>収益</li><li>紹介</li></ul><h3 id="圧倒的な優位性"><a href="#圧倒的な優位性" class="headerlink" title="圧倒的な優位性"></a>圧倒的な優位性</h3><p><img src="https://farm8.staticflickr.com/7077/13931565593_1c0eee0e50.jpg" alt="lean-canvas-008 by Katuyuki Kakigi, on Flickr"></p><ul><li>内部情報</li><li>正当な「専門家」の支持</li><li>ドリームチーム</li><li>その人の信頼性</li><li>巨大なネットワーク効果</li><li>コミュニティ</li><li>既存顧客</li><li>SEOランキング</li></ul><h3 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h3><p>大切なのは、リーンキャンパスを書き終えたあとに、<strong>最低でも誰か１人と共有する</strong>こと。</p><h1 id="プランで最もリスクの高い部分を見つける"><a href="#プランで最もリスクの高い部分を見つける" class="headerlink" title="プランで最もリスクの高い部分を見つける"></a><a name="4">プランで最もリスクの高い部分を見つける</a></h1><h2 id="リスクの優先順位をつける"><a href="#リスクの優先順位をつける" class="headerlink" title="リスクの優先順位をつける"></a>リスクの優先順位をつける</h2><p>可能性のあるビジネスモデルが複数できたら、次は優先順位をつける。<br>リスクの優先順位を間違えるのは最もムダなこと。</p><h3 id="スタートアップのリスク"><a href="#スタートアップのリスク" class="headerlink" title="スタートアップのリスク"></a>スタートアップのリスク</h3><p><img src="https://farm3.staticflickr.com/2926/13909380222_ab43f05202.jpg" alt="runnig-lean-009 by Katuyuki Kakigi, on Flickr"></p><ul><li>製品リスク(P:Product risk)<br>正しい製品を作る</li><li>顧客リスク(C:Customer risk)<br>顧客への経路を作る</li><li>市場リスク(M:Market risk)<br>実現可能なビジネスを作る</li></ul><h2 id="ビジネスモデルインタビュー"><a href="#ビジネスモデルインタビュー" class="headerlink" title="ビジネスモデルインタビュー"></a>ビジネスモデルインタビュー</h2><p>初期の学習は反復的かつ定性的なので、仮説の検証には時間がかかる。また、顧客セグメントが広すぎたり狭すぎたり、場合によっては間違った顧客セグメントをターゲットにしていることもある。<br>なのでまずリスクに優先順位をつけて、他のビジネスモデルの可能性を顧客以外の誰か（アドバイザーなど）と一緒にブレインストーミングする。「正しい」アドバイザーとは、「プラン全体」のリスクを特定してくれたり、モデルの改良やダメ出しを手伝ってくれるような人。「アドバイザー」に厳密な定義はない。</p><h3 id="ビジネスモデルの比較"><a href="#ビジネスモデルの比較" class="headerlink" title="ビジネスモデルの比較"></a>ビジネスモデルの比較</h3><ol><li>顧客の不満レベル(課題)  </li><li>近づきやすさ(チャネル)</li><li>価格と粗利益(収益の流れとコスト構造)</li><li>市場規模(顧客セグメント)</li><li>技術的実現可能性(ソリューション)</li></ol><h3 id="外部の意見を求める"><a href="#外部の意見を求める" class="headerlink" title="外部の意見を求める"></a>外部の意見を求める</h3><ul><li>スライドを１０枚以上にするのはやめる。</li><li>２０％を準備に、８０％を対話に使う。</li><li>具体的な質問をする。</li></ul><h3 id="実験の準備"><a href="#実験の準備" class="headerlink" title="実験の準備"></a>実験の準備</h3><h4 id="課題チームと解決チームを作る"><a href="#課題チームと解決チームを作る" class="headerlink" title="課題チームと解決チームを作る"></a>課題チームと解決チームを作る</h4><ul><li>小規模ではなく最小のチームで開始する。</li><li>絶対に必要な３つの要素：開発・デザイン・マーケティング。<ul><li>開発</li><li>デザイン</li><li>マーケティング</li></ul></li><li>課題／解決チームの外部委託は慎重に。</li></ul><h4 id="効果的な実験"><a href="#効果的な実験" class="headerlink" title="効果的な実験"></a>効果的な実験</h4><ul><li><p>速度・学習・集中を最大化する。</p><ul><li>速度と集中</li><li>学習と集中</li><li>速度と学習</li></ul></li><li><p>主要指標と目標を特定する。</p></li><li><p>学習は必要な最も小さいことをやる。</p></li><li><p>反証可能な仮説<br><strong>反証可能な仮説を作る公式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">反証可能な仮説 &#x3D; 具体的で反復可能な行動 → 期待する計測可能な成果</span><br></pre></td></tr></table></figure></li><li><p>定性的検証と定量的検証</p></li><li><p>結果を具体的な行動に結びつける</p></li><li><p>わかりやすいダッシュボードを作る</p></li><li><p>学習を早めにしょっちゅう伝える</p></li></ul><h3 id="イテレーションのメタパターンをリスクに適用する"><a href="#イテレーションのメタパターンをリスクに適用する" class="headerlink" title="イテレーションのメタパターンをリスクに適用する"></a>イテレーションのメタパターンをリスクに適用する</h3><blockquote><p>Your business model is not a dartboard</p></blockquote><blockquote><p>(ビジネスモデルはダーツのボードではありません)  </p><blockquote><p>『Running Lean』</p></blockquote></blockquote><ul><li>ステージ１：課題を理解する</li><li>ステージ２：ソリューションを決定する</li><li>ステージ３：定性的に検証する</li><li>ステージ４：定量的に検証する</li></ul><h4 id="製品リスク：正しい製品を作る"><a href="#製品リスク：正しい製品を作る" class="headerlink" title="製品リスク：正しい製品を作る"></a>製品リスク：正しい製品を作る</h4><p><img src="https://farm4.staticflickr.com/3753/13908966602_78f9d7dd82.jpg" alt="runnig-lean-006 by Katuyuki Kakigi, on Flickr"></p><ol><li>解決に値する課題かどうか確認する。</li><li>最小限のソリューション(MVP)を決定する。</li><li>MVPを構築して、小規模に検証する(UVPデモ)。</li><li>大規模に検証する。</li></ol><h4 id="顧客リスク：顧客への経路を作る"><a href="#顧客リスク：顧客への経路を作る" class="headerlink" title="顧客リスク：顧客への経路を作る"></a>顧客リスク：顧客への経路を作る</h4><p><img src="https://farm8.staticflickr.com/7227/13908967316_d8d54541c3.jpg" alt="runnig-lean-007 by Katuyuki Kakigi, on Flickr"></p><ol><li>不満を持っている人を特定する。</li><li>製品を今すぐにほしいと思うアーリーアダプターに範囲を狭める。</li><li>アウトバウンドチャネルから開始しても構わない。</li><li>ただし、少しずつ拡大可能なインバウンドチャネルも構築／開発する。早ければ早いほどよい。</li></ol><h4 id="市場リスク：実現可能なビジネスを作る"><a href="#市場リスク：実現可能なビジネスを作る" class="headerlink" title="市場リスク：実現可能なビジネスを作る"></a>市場リスク：実現可能なビジネスを作る</h4><p><img src="https://farm8.staticflickr.com/7099/13908967276_041ebbf184.jpg" alt="runnig-lean-008 by Katuyuki Kakigi, on Flickr"></p><ol><li>既存の代替品から競合他社を特定し、ソリューションの価格を設定する。</li><li>顧客の声を聞いて、価格をテストする（口約束）。</li><li>顧客の行動を見て、価格をテストする。</li><li>ビジネスモデルがうまくいくように、コスト構造を最適化する。</li></ol><h1 id="プランを体系的にテストする-1"><a href="#プランを体系的にテストする-1" class="headerlink" title="プランを体系的にテストする"></a><a name="5">プランを体系的にテストする</a></h1><h2 id="課題を理解する"><a href="#課題を理解する" class="headerlink" title="課題を理解する"></a>課題を理解する</h2><h3 id="顧客インタビューの準備"><a href="#顧客インタビューの準備" class="headerlink" title="顧客インタビューの準備"></a>顧客インタビューの準備</h3><ul><li>ビッチーではなく学習を中心に考える。</li><li>顧客に何が欲しいのかを聞いてはいけない。行動を観察する。</li><li>台本に合わせて会話をする。</li><li>網を広く投げる。</li><li>直接面会してインタビューする。</li><li>知り合いから始める。</li><li>誰かと一緒に行く。</li><li>中立的な場所を選ぶ。</li><li>十分な時間をもらう。</li><li>謝礼や贈り物をしないようにする。</li><li>インタビューを録音しないようにする。</li><li>インタビュー後すぐに文書化する。</li><li>３０〜６０人にインタビューする。</li><li>インタビューのスケジュール調整を委託する。</li></ul><h3 id="見込み客を見つける"><a href="#見込み客を見つける" class="headerlink" title="見込み客を見つける"></a>見込み客を見つける</h3><ul><li>近しい人から始める。</li><li>紹介をお願いする。</li><li>地元で探す。</li><li>予告ページで探す。</li><li>予告ページでメールアドレスを登録してもらう。</li><li>何らかの形でお返しをする。</li><li>電話・メール・LinkedInを使って依頼する。</li></ul><h3 id="課題インタビュー"><a href="#課題インタビュー" class="headerlink" title="課題インタビュー"></a>課題インタビュー</h3><h4 id="学習すべきこと"><a href="#学習すべきこと" class="headerlink" title="学習すべきこと"></a>学習すべきこと</h4><ul><li>製品リスク：何を解決するのか？（課題）</li><li>市場リスク：競合は誰なのか？（既存の代替品）</li><li>顧客リスク：誰が困っているのか？（顧客セグメント）</li></ul><h4 id="課題インタビューの実施"><a href="#課題インタビューの実施" class="headerlink" title="課題インタビューの実施"></a>課題インタビューの実施</h4><ol><li>歓迎</li><li>顧客情報の収集</li><li>ストーリーの伝達</li><li>課題の優先順位</li><li>顧客の世界観の探求</li><li>まとめ</li><li>結果の文書化</li></ol><h4 id="課題インタビューの終了条件"><a href="#課題インタビューの終了条件" class="headerlink" title="課題インタビューの終了条件"></a>課題インタビューの終了条件</h4><ul><li>アーリーアダプターとなる顧客が特定できた。</li><li>「絶対に必要」な課題が見つかった。</li><li>現在の顧客の解決方法がわかった。</li></ul><h2 id="ソリューションを決定する"><a href="#ソリューションを決定する" class="headerlink" title="ソリューションを決定する"></a>ソリューションを決定する</h2><h3 id="学習すべきこと-1"><a href="#学習すべきこと-1" class="headerlink" title="学習すべきこと"></a>学習すべきこと</h3><ul><li>顧客リスク：誰が困っているのか？（アーリーアダプター）</li><li>製品リスク：課題をどのように解決するのか？（ソリューション）</li><li>市場リスク：どのような価格モデルにするのか？（収益の流れ）</li></ul><h3 id="デモを構築する"><a href="#デモを構築する" class="headerlink" title="デモを構築する"></a>デモを構築する</h3><ul><li>デモは実現可能でなければならない。</li><li>デモは本物に見えなければならない。</li><li>デモは高速に反復する必要がある。</li><li>デモはムダを最小化にする。</li><li>デモは本物に見えるデータを使わなければならない。</li></ul><h3 id="ソリューションインタビュー"><a href="#ソリューションインタビュー" class="headerlink" title="ソリューションインタビュー"></a>ソリューションインタビュー</h3><h4 id="価格のテスト"><a href="#価格のテスト" class="headerlink" title="価格のテスト"></a>価格のテスト</h4><ul><li>価格のことは顧客に聞かず、ただ伝えるだけ。</li><li>登録の障壁を下げずに上げる。</li><li>ソリューションインタビューのAIDA</li><li>ピットどこが違うのか</li><li>テスト可能な仮説</li></ul><h4 id="ソリューションインタビューの実施"><a href="#ソリューションインタビューの実施" class="headerlink" title="ソリューションインタビューの実施"></a>ソリューションインタビューの実施</h4><ol><li>歓迎</li><li>顧客情報の収集</li><li>ストーリーの伝達</li><li>デモ</li><li>価格の検証</li><li>まとめ</li><li>結果の文書化</li></ol><h4 id="ソリューションインタビューの終了条件"><a href="#ソリューションインタビューの終了条件" class="headerlink" title="ソリューションインタビューの終了条件"></a>ソリューションインタビューの終了条件</h4><ul><li>アーリーアダプターの顧客情報が特定できた。</li><li>「絶対に必要」な課題がわかった。</li><li>課題を解決するのに必要な最小限の機能が定義できた。</li><li>顧客が支払ってくれる価格がわかった。</li><li>（概算で）うまくいきそうなビジネスが構築できた。</li></ul><h3 id="MVPを構築する"><a href="#MVPを構築する" class="headerlink" title="MVPを構築する"></a>MVPを構築する</h3><h4 id="バージョン1-0をリリース"><a href="#バージョン1-0をリリース" class="headerlink" title="バージョン1.0をリリース"></a>バージョン1.0をリリース</h4><ul><li>製品開発は学習の邪魔</li><li>MVPの縮小化</li><li>継続的デプロイを始める</li></ul><h4 id="アクティベーションの流れを定義する"><a href="#アクティベーションの流れを定義する" class="headerlink" title="アクティベーションの流れを定義する"></a>アクティベーションの流れを定義する</h4><ul><li>登録の障害は下げても学習の犠牲にしてはいけません。</li><li>手順を減らしても学習を犠牲にしてはいけません。</li><li>UVPを届けましょう。</li><li>うまくいかなかったときのことを考えておきましょう。</li></ul><h4 id="マーケティング用のサイトを構築する"><a href="#マーケティング用のサイトを構築する" class="headerlink" title="マーケティング用のサイトを構築する"></a>マーケティング用のサイトを構築する</h4><ul><li>マーケティング用のサイトの解剖<ul><li>概要ページ</li><li>サービス利用規約とプライバシーポリシーページ</li><li>製品ツアーページ(動画やスクリーンショット)</li></ul></li><li>ランディングページの分解<ul><li>独自の価値提案</li><li>ビジュアルの支援</li><li>明確な誘導</li><li>もっと詳しく知るための情報</li><li>社会的証明</li></ul></li></ul><h2 id="定性的に検証する"><a href="#定性的に検証する" class="headerlink" title="定性的に検証する"></a>定性的に検証する</h2><h3 id="ダッシュボードを構築する"><a href="#ダッシュボードを構築する" class="headerlink" title="ダッシュボードを構築する"></a>ダッシュボードを構築する</h3><h4 id="計測の準備"><a href="#計測の準備" class="headerlink" title="計測の準備"></a>計測の準備</h4><ul><li>行動につながる指標が必要</li><li>指標は人が重要</li><li>単純なファンネルレポートは十分ではない</li><li>コホートによろしく</li></ul><h4 id="コンバージョンダッシュボードの作り方"><a href="#コンバージョンダッシュボードの作り方" class="headerlink" title="コンバージョンダッシュボードの作り方"></a>コンバージョンダッシュボードの作り方</h4><h5 id="データの収集方法"><a href="#データの収集方法" class="headerlink" title="データの収集方法"></a>データの収集方法</h5><ul><li>指標とイベントを一致させる。</li><li>生のイベントを監視する。</li><li>すべてのログをとる。</li></ul><h5 id="コンバージョンダッシュボードの可視化方法"><a href="#コンバージョンダッシュボードの可視化方法" class="headerlink" title="コンバージョンダッシュボードの可視化方法"></a>コンバージョンダッシュボードの可視化方法</h5><ul><li>ファンネルを掘り下げる。</li><li>数字の理由を調べる。</li></ul><h5 id="定着の追跡方法"><a href="#定着の追跡方法" class="headerlink" title="定着の追跡方法"></a>定着の追跡方法</h5><ul><li>アクティブユーザーの定義する。</li><li>コンバージョンダッシュボードの定着を可視化する。</li><li>詳細なビューを提供する。</li></ul><h3 id="MVPインタビュー"><a href="#MVPインタビュー" class="headerlink" title="MVPインタビュー"></a>MVPインタビュー</h3><h4 id="学習すべきこと-2"><a href="#学習すべきこと-2" class="headerlink" title="学習すべきこと"></a>学習すべきこと</h4><ul><li>製品リスク：製品の魅力は何か？(独自の価値提案)</li><li>顧客リスク：十分な顧客はいるか？（チャネル）</li><li>市場リスク：価格は適正化？(収益の流れ)</li></ul><h4 id="テスト可能な仮説"><a href="#テスト可能な仮説" class="headerlink" title="テスト可能な仮説"></a>テスト可能な仮説</h4><h4 id="MVPインタビューの実施"><a href="#MVPインタビューの実施" class="headerlink" title="MVPインタビューの実施"></a>MVPインタビューの実施</h4><ol><li>歓迎</li><li>ランディングページの提示</li><li>価格ページの提示</li><li>登録とアクティベーション</li><li>まとめ</li><li>結果の文書化</li></ol><h3 id="UVPを実現する"><a href="#UVPを実現する" class="headerlink" title="UVPを実現する"></a>UVPを実現する</h3><h3 id="顧客ライフサイクルを検証する"><a href="#顧客ライフサイクルを検証する" class="headerlink" title="顧客ライフサイクルを検証する"></a>顧客ライフサイクルを検証する</h3><h4 id="フィードバックを楽にする"><a href="#フィードバックを楽にする" class="headerlink" title="フィードバックを楽にする"></a>フィードバックを楽にする</h4><blockquote><p>The fastest way to learn from customers is to talk to them.</p></blockquote><blockquote><p>(顧客から学習する近道は、顧客に話しかけることです)</p><blockquote><p>『Running Lean』</p></blockquote></blockquote><ul><li>気にかけていることが伝わる。</li><li>問い合わせが多すぎるという問題はない。</li><li>テクニカルサポートは継続的な学習のフィードバックループ。</li><li>テクニカルサポートは顧客開発。</li><li>テクニカルサポートはマーケティング。</li><li>投票ツールによるフィードバックは使わない。</li></ul><h4 id="試用期間中に問題を解決する"><a href="#試用期間中に問題を解決する" class="headerlink" title="試用期間中に問題を解決する"></a>試用期間中に問題を解決する</h4><h5 id="獲得とアクティベーション"><a href="#獲得とアクティベーション" class="headerlink" title="獲得とアクティベーション"></a>獲得とアクティベーション</h5><ul><li>優先事項：学習できるだけのトラフィックを稼ぐ。<ul><li>ファンネルを掘り下げる。</li><li>ユーザーに連絡する。</li><li>予期しないエラーをキャッチして通知する。</li></ul></li></ul><h5 id="定着"><a href="#定着" class="headerlink" title="定着"></a>定着</h5><ul><li>優先事項：試用期間中にユーザーに戻ってきてもらって、製品を使ってもらう  <ul><li>丁寧なリマインダーを送信する。</li><li>インタビュー相手に協力を求める。</li></ul></li></ul><h5 id="収益"><a href="#収益" class="headerlink" title="収益"></a>収益</h5><ul><li>優先事項：お金をはらってもらう<ul><li>決済システムを実装する。</li><li>支払った顧客に電話する。<ul><li>この製品をどのようにして知りましたか？（あなたが知らない場合）</li><li>この製品をなぜ購入しようと思いましたか？</li><li>何か改善できる点はありますか？</li></ul></li><li>「売り損ねた」見込み客に話を聞きましょう。</li></ul></li></ul><h5 id="紹介"><a href="#紹介" class="headerlink" title="紹介"></a>紹介</h5><ul><li>優先事項：推薦の声をもらう<ul><li>推薦の声をお願いする。</li></ul></li></ul><h4 id="ローンチの準備はできましたか？"><a href="#ローンチの準備はできましたか？" class="headerlink" title="ローンチの準備はできましたか？"></a>ローンチの準備はできましたか？</h4><ul><li>結果を頻繁にレビューする。</li><li>最も重要な課題から着手する。</li><li>可能な限り小さなことをやる。</li><li>確実に改善する。</li><li>コンバージョンダッシュボードを監視する。</li></ul><h4 id="ローンチ条件"><a href="#ローンチ条件" class="headerlink" title="ローンチ条件"></a>ローンチ条件</h4><ul><li>独自の価値提案(UVP)を明確に理解している。</li><li>本サービスに登録するつもりがある。</li><li>価格モデルを受け入れている。</li><li>アクティベーションの流れをうまく通り抜けている。</li><li>好意的な推薦の声を提供してくれる。</li></ul><h4 id="３・２・１・・・・ローンチ！"><a href="#３・２・１・・・・ローンチ！" class="headerlink" title="３・２・１・・・・ローンチ！"></a>３・２・１・・・・ローンチ！</h4><p>学習に「ちょうど十分」なトラフィックを獲得するのが目的。</p><h2 id="定量的に検証する"><a href="#定量的に検証する" class="headerlink" title="定量的に検証する"></a>定量的に検証する</h2><h3 id="機能を制限する"><a href="#機能を制限する" class="headerlink" title="機能を制限する"></a>機能を制限する</h3><h4 id="機能は押し付けずに引っ張ってもらう"><a href="#機能は押し付けずに引っ張ってもらう" class="headerlink" title="機能は押し付けずに引っ張ってもらう"></a>機能は押し付けずに引っ張ってもらう</h4><ul><li>追加機能は独自の価値提案（UVP）を薄める。<br>シンプルな製品ならシンプルに理解できる。</li><li>すぐにMVPに見切りをつけてはいけない。</li><li>機能には隠れたコストがある。</li><li>顧客は本当に欲しい物をわかっていない。</li></ul><h4 id="80-20ルールを実施する"><a href="#80-20ルールを実施する" class="headerlink" title="80/20ルールを実施する"></a>80/20ルールを実施する</h4><h4 id="機能の流れを制御する"><a href="#機能の流れを制御する" class="headerlink" title="機能の流れを制御する"></a>機能の流れを制御する</h4><p>かんばんボード（見える化ボード）を使う。<br>コンバージョンダッシュボードを指標の追跡に使うように、かんばんボードは機能の追跡に使う。どちらもマクロ的視点に焦点を当てている。</p><ol><li>バックログ<ul><li>既存機能の改善（例：登録の流れの改良）</li><li>顧客の機能要求</li><li>自分たちの機能要求（例：あとでやることにした「あればうれしい」機能）</li><li>MMF(市場価値最小限の機能：Minimum Marketable Feature)単位</li><li>MMFは小さな作業項目（タスク）で構成されている。</li><li>タスクのバッチとなる小さな機能・バグ修正・作業項目についてはタスクボードで管理する。  </li></ul></li><li>作業中<br>かんばんの大切な原則は、作業中の機能数を制限すること。</li><li>完了</li><li>検証による学習</li></ol><h4 id="機能要求を処理する"><a href="#機能要求を処理する" class="headerlink" title="機能要求を処理する"></a>機能要求を処理する</h4><ol><li>作業の必要性や優先順位を確認する。</li><li>それが小さな機能やバグ修正なのか、より大きなMMFなのかを判断する。<ul><li>小さな作業項目かつ緊急ならすぐ対応する。  </li><li>そうでなければタスクボードのバックログに追加する。</li><li>MMFならばカンバンボードのバックログに追加する。</li></ul></li></ol><h4 id="機能ライフサイクル"><a href="#機能ライフサイクル" class="headerlink" title="機能ライフサイクル"></a>機能ライフサイクル</h4><h5 id="かんばんボードで機能を追跡する"><a href="#かんばんボードで機能を追跡する" class="headerlink" title="かんばんボードで機能を追跡する"></a>かんばんボードで機能を追跡する</h5><ul><li>目標</li><li>仕掛品の上限</li><li>バッファレーン</li><li>機能はいつでも中止可能</li><li>継続的デプロイ</li><li>２段階検証</li></ul><h5 id="各手順の説明"><a href="#各手順の説明" class="headerlink" title="各手順の説明"></a>各手順の説明</h5><ul><li>課題を理解する<ol><li>バックログ<ul><li>顧客からの要望</li><li>内部からの要望</li></ul></li></ol></li><li>ソリューションを決定する<ol><li>モックアップ</li><li>デモ</li><li>コード</li></ol></li><li>定性的に検証する<ol><li>部分的展開</li><li>定性的検証</li></ol></li><li>定量的に検証する<ol><li>全面展開</li><li>定量的検証</li></ol></li></ul><h3 id="進捗を計測する"><a href="#進捗を計測する" class="headerlink" title="進捗を計測する"></a>進捗を計測する</h3><h4 id="製品／市場フィットとは"><a href="#製品／市場フィットとは" class="headerlink" title="製品／市場フィットとは"></a>製品／市場フィットとは</h4><blockquote><p>Product/Market fit means being in a good market with a product that can satisfy that market.<br>(製品／市場フィットとは、市場を満足できる製品がある状態のことだ。)<br>You can always feel when product/market fit isn’t happening. The customers aren’t quite getting value out of the product,word of mouth isn’t spreading, usage isn’t growing that fast,press reviews are kind of “blah,” the sales cycle takes too long, and lots of deals never close.<br>(製品／市場フィットがないとすぐわかる。製品の価値が顧客に伝わらない。口コミが広がらない。利用が加速しない。メディアの評判は「最低」。販売サイクルに時間がかかる。商談がまとまらない。)<br>And you can always feel product/market fit when it’s happening.The customers are buying the product just as fast as you can make it - or usage is growing just as fast as you can add more servers. Money from customers is piling up in your company checking account.You’re hiring sales and customer support staff as fast as you can.Reporters are calling because they’ve heard about your hot new thing and they want to talk to you about it.<br>(製品／市場フィットがあるとすぐわかる。製品を作ると顧客が買いに来る。サービスを追加すると利用が拡大する。銀行口座にお金がたまる。営業や顧客サポートのスタッフが雇える。記者から新製品のことを聞きたいと電話がかかってくる。)</p><blockquote><p>Marc Andreessen,”The Pmarca Guide to Startups”</p></blockquote></blockquote><h3 id="初期のトラクションを達成する"><a href="#初期のトラクションを達成する" class="headerlink" title="初期のトラクションを達成する"></a>初期のトラクションを達成する</h3><h4 id="ショーン／エリスのテスト"><a href="#ショーン／エリスのテスト" class="headerlink" title="ショーン／エリスのテスト"></a>ショーン／エリスのテスト</h4><p>４０％以上のユーザーが「非常に残念」と答えたのであれば、この「絶対に必要」な製品は今後も継続的に顧客を獲得できる。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【製品名】が使えなくなった時にどう思いますか？</span><br><span class="line">  1.非常に残念</span><br><span class="line">  2.少し残念</span><br><span class="line">  3.残念ではない（役に立たなかった）</span><br><span class="line">  4.すでに【製品名】をつかっていない</span><br></pre></td></tr></table></figure><p>アンケート調査は、学習より検証に効果的。</p><h4 id="「適切な」マクロ指標に集中する"><a href="#「適切な」マクロ指標に集中する" class="headerlink" title="「適切な」マクロ指標に集中する"></a>「適切な」マクロ指標に集中する</h4><p>アクティベーションの済んだユーザーが毎日４０％以上いれば、初期のトラクションがあるといえる。</p><h4 id="人が欲しがるものを作ったか"><a href="#人が欲しがるものを作ったか" class="headerlink" title="人が欲しがるものを作ったか"></a>人が欲しがるものを作ったか</h4><ol><li>コンバージョンダッシュボードを毎週レビューする。</li><li>目標とバックログの優先順位をつける。</li><li>大胆な仮説を作る。</li><li>機能を追加／削除する。</li><li>価値指標を監視する。</li><li>ショーン・エリスのテストを実施する。</li></ol><h5 id="初期トラクションの終了条件"><a href="#初期トラクションの終了条件" class="headerlink" title="初期トラクションの終了条件"></a>初期トラクションの終了条件</h5><ul><li>ユーザーの４０％が定着した。</li><li>ショーン・エリスのテストを通過した。</li></ul><h4 id="製品／市場フィットにおける市場"><a href="#製品／市場フィットにおける市場" class="headerlink" title="製品／市場フィットにおける市場"></a>製品／市場フィットにおける市場</h4><p>初期のトラクションを実証する前に、ビジネスの拡大に集中するのはムダ</p><h5 id="成長エンジンの特定"><a href="#成長エンジンの特定" class="headerlink" title="成長エンジンの特定"></a>成長エンジンの特定</h5><ul><li><p>粘着型：高い定着率<br>解約率とは、製品を使わなくなって一定期間がたった顧客の割合。<br>「顧客獲得率＞解約率」であれば、ビジネスが成長していると言える。</p></li><li><p>ウィルス型：高い紹介率<br>ウィルス係数とは、顧客１人あたりの紹介数を計測したもの<br>「ウィルス係数＞１」（顧客が最低１人以上紹介している）であれば、ビジネスが成長していると言える。</p></li><li><p>支出型：高い利益率<br>「顧客生涯価値（LTV:Life Time Value) &gt; 顧客獲得コスト(COCA:Cost of Customer Acquisition)」を続けているのであれば、ビジネスが成長していると言える。</p></li><li><p>成長エンジンを選択するガイドライン</p><ol><li>価値指標の検証から着手する。</li><li>顧客の製品に対する態度を理解する。</li><li>調整するエンジンを選択する。</li></ol></li></ul><h4 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h4><h5 id="ネットワーク効果のある製品のデザインパターン"><a href="#ネットワーク効果のある製品のデザインパターン" class="headerlink" title="ネットワーク効果のある製品のデザインパターン"></a>ネットワーク効果のある製品のデザインパターン</h5><ul><li>注目は換金可能な資産。</li><li>定着は王様。</li><li>成長エンジンはウィルス型。</li></ul><h5 id="マルチサイド（マーケットプレイス）製品のデザインパターン"><a href="#マルチサイド（マーケットプレイス）製品のデザインパターン" class="headerlink" title="マルチサイド（マーケットプレイス）製品のデザインパターン"></a>マルチサイド（マーケットプレイス）製品のデザインパターン</h5><ul><li>両サイドのキャンバスを作る。</li><li>アーリーアダプターのマーケットプレイスで価値を検証する。</li><li>仲介処理は自動化しない。</li><li>両サイドに適切な成長エンジンを選びましょう。</li></ul><h3 id="拡大する"><a href="#拡大する" class="headerlink" title="拡大する"></a>拡大する</h3><p><img src="https://farm3.staticflickr.com/2917/13923637052_b44a281816.jpg" alt="runnig-lean-010 by Katuyuki Kakigi, on Flickr"></p><blockquote><p>Every process works well until you add people.<br>The key is to build a continuous learning culture of experimenters versus specialist, where it’s everyone’s job to be accountable toward creating and capturing customer value.</p><p>（あらゆるプロセスは、人を増やすまではうまくいくのです。<br>したがって、各自が専門家になるのではなく、実験を通じた継続的な学習の文化を作ることが大切になります。つまり、顧客価値の創造や理解は、みんなの責任ということです。）</p><blockquote><p>『Running Lean』</p></blockquote></blockquote><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a><a name="6">参考リンク</a></h1><p><a href="http://www.venturenow.jp/column/ogawa/20110124009635.html" target="_blank" rel="noopener">外部から資金調達をしない「ブートストラッピング」という起業スタイル</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a name="7">参考文献</a></h1><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4873115914&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=1449305172&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=B006UKFFE0&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> マネジメント </category>
          
          <category> ビジネス </category>
          
      </categories>
      
      
        <tags>
            
            <tag> リーンスタートアップ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ビヘイビア駆動開発</title>
      <link href="/2014/04/09/2014-04-09-what-is-bdd/"/>
      <url>/2014/04/09/2014-04-09-what-is-bdd/</url>
      
        <content type="html"><![CDATA[<div style="position:relative;height:300px;width:640px;padding:1px;background:#333;"><a href="http://www.flickr.com/photos/landrovermena/7955060152/" target="_blank"><img src="http://farm9.static.flickr.com/8036/7955060152_eac700f748_z.jpg?zz=1" alt="The All-New Range Rover | Test & Development" style="position:absolute;clip:rect(5px 902px 305px 2px);margin:-5px 0 0 -2px;padding-bottom:5px;" /></a><span style="position:absolute;bottom:0;right:0;background:#333;color:#DDD;font-size:10px;padding:3px;">The All-New Range Rover | Test & Development / landrovermena</span></div><hr><blockquote><ul><li>十分といったら十分</li><li>ステークホルダーに価値をもたらす</li><li>すべては振る舞いから</li></ul></blockquote><a id="more"></a><h1 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h1><ul><li><a href="#1">ビヘイビア駆動開発(BDD)とは</a></li><li><a href="#2">実装例</a></li></ul><h1 id="詳細"><a href="#詳細" class="headerlink" title="詳細"></a>詳細</h1><h2 id="ビヘイビア駆動開発-BDD-とは"><a href="#ビヘイビア駆動開発-BDD-とは" class="headerlink" title="ビヘイビア駆動開発(BDD)とは"></a><a name="1">ビヘイビア駆動開発(BDD)とは</a></h2><h3 id="テスト駆動開発-TDD-からビヘイビア駆動開発-BDD-へ"><a href="#テスト駆動開発-TDD-からビヘイビア駆動開発-BDD-へ" class="headerlink" title="テスト駆動開発(TDD)からビヘイビア駆動開発(BDD)へ"></a>テスト駆動開発(TDD)からビヘイビア駆動開発(BDD)へ</h3><p>TDD・・・オブジェクトが何をするかではなく、オブジェクトが何であるか。構造に焦点を合わせる。</p><p><a href="https://www.flickr.com/photos/k2works/13635473944" target="_blank" rel="noopener" title="TDD by Katuyuki Kakigi, on Flickr"><img src="https://farm3.staticflickr.com/2938/13635473944_bb1b6b7d38_n.jpg" width="319" height="320" alt="TDD"></a></p><p>TDD概念図</p><p>BDD・・・オブジェクトが何をするか。構造ではなく振る舞いに焦点を合わせる。</p><p><a href="https://www.flickr.com/photos/k2works/13634941835" target="_blank" rel="noopener" title="BDD by Katuyuki Kakigi, on Flickr"><img src="https://farm8.staticflickr.com/7176/13634941835_7bcc39f7f4_n.jpg" width="320" height="310" alt="BDD"></a></p><p>BDD概念図</p><h3 id="BDDの概要"><a href="#BDDの概要" class="headerlink" title="BDDの概要"></a>BDDの概要</h3><blockquote><p>BDDとは、ステークホルダーの視点に立って振る舞いを説明することにより、アプリケーションを実装するための手法である。</p></blockquote><blockquote><p>『The RSpec Book』</p></blockquote><h3 id="BDDサイクル"><a href="#BDDサイクル" class="headerlink" title="BDDサイクル"></a>BDDサイクル</h3><ol><li>Cucmberで始める<ol><li>１つのシナリオに焦点を合わせる</li><li>失敗するステップ定義を書く</li><li>RSpecに進む<ol><li>失敗するサンプルを書く</li><li>サンプルを失敗させる</li><li>リファクタリング</li><li>ステップが成功するまで1-3を繰り返す</li></ol></li><li>リファクタリング</li><li>シナリオが成功するまで1-5を繰り返す</li></ol></li><li>シナリオが成功したら1に戻る</li></ol><h3 id="BDDの原則"><a href="#BDDの原則" class="headerlink" title="BDDの原則"></a>BDDの原則</h3><ul><li>十分といったら十分</li><li>ステークホルダーに価値をもたらす</li><li>すべては振る舞いから</li></ul><h3 id="プロジェクトのインセプション"><a href="#プロジェクトのインセプション" class="headerlink" title="プロジェクトのインセプション"></a>プロジェクトのインセプション</h3><ol><li>すべてのステークホルダーを集めて、プロジェクトのビジョンまたは目的を定める。</li><li>定めたことを理解するためそのビジョンを持つコアステークホルダーと協力し、結果または目標を洗い出す。洗い出す対象はSMARTであることが望ましい。</li><li>洗いだしたことを達成するソフトウエアで実行する必要があることを、フィーチャーセットまたはテーマ（レポートや顧客の登録など）として表現する。</li><li>最後にこれらのテーマを構成する特定のフィーチャやストーリーについて話し合う</li></ol><p>BDDは主にこの最後のレベルで適用される。また、ステークホルダーやビジネスアナリストといった用語は、個人ではなく役割を表す。</p><blockquote><p>SMARTな結果</p></blockquote><blockquote><p>SMARTは、ある種の特性を持つ結果または目標を表現するために使われる頭文字です。その特性とは、Specific(具体的)、Measurable(測定可能)、Achievable(達成可能)、Relevant(適切)、Timeboxed(期限付き)の５つです。</p></blockquote><blockquote><p>『The RSpec Book』</p></blockquote><h3 id="リリースサイクル"><a href="#リリースサイクル" class="headerlink" title="リリースサイクル"></a>リリースサイクル</h3><ol><li>ステークホルダーがビジネスアナリストと話し合い要件をフィーチャとして表現する。必要があればフィーチャを検証可能な小さなストーリーに分解する。</li><li>ステークホルダーとビジネスアナリストがテスト担当者と協力してストーリーの範囲を決定する。各ストーリーはどのように完結するかを意識する。</li><li>プログラマがストーリーの実装にとりかかる前の最後のタスクとして必要に応じてシナリオを自動化する。</li><li>開発者はRSpecと「Coding by Example」に基づいてシナリオを実際に動かす。<ol><li>必要な振る舞いを説明するサンプルコードを記述する</li><li>そのサンプルを動作させるためのコードを実装する</li><li>リファクタリングをおこなう</li></ol></li><li>このシナリオを動かすのに十分なソフトウエアを完成させ、他のシナリオが動くようになるまでこの作業を繰り返す。</li><li>一周して元に戻り、実際に動くシナリオをステークホルダーに見てもらいストーリーを完成させる。</li></ol><p>BDDのもっとも重要な特徴の１つはシナリオを自動化するのが簡単で、しかもステークホルダーにとって理解しやすいこと。<br>これらのシナリオを定義し、自動化するのがCucumberが担当する。</p><blockquote><p>ストーリーイン、フィーチャアウト</p></blockquote><blockquote><p>フィーチャは凝集された価値をステークホルダーに提供するものであり、ストーリーはほんの数日で実装できる機能を見てもらうためのものです。<br>したがって、ステークホルダーにとって意味があるのはフィーチャのほうであり、フィーチャを提供するチームにとって意味があるのはストーリーのほうです。</p></blockquote><blockquote><p>『The RSpec Book』</p></blockquote><p><a href="https://www.flickr.com/photos/k2works/13735080623" target="_blank" rel="noopener" title="BDD_01 by Katuyuki Kakigi, on Flickr"><img src="https://farm4.staticflickr.com/3743/13735080623_1f7a591b55.jpg" width="500" height="188" alt="BDD_01"></a></p><h3 id="ストーリーの構造"><a href="#ストーリーの構造" class="headerlink" title="ストーリーの構造"></a>ストーリーの構造</h3><ul><li>タイトル<br>どのストーリーについて説明するのかを明確にする。</li><li>ナラティブ<br>最低でもこのストーリーの<strong>ステークホルダー</strong>、ステークホルダーが望んでいる<strong>フィーチャ</strong>の説明、およびステークホルダーがそれを望んでいる理由を明らかにする。そしてこの振る舞いによりどのような<strong>利益</strong>を手にするのかを明らかにする。</li><li>受け入れ基準<br>BDDの受け入れ基準は個々の<strong>ステップ</strong>で構成されるいくつかの<strong>シナリオ</strong>として定義される。</li></ul><p>ナラティブの例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ステークホルダー&gt;として</span><br><span class="line">&lt;フィーチャ&gt;をしたい</span><br><span class="line">なぜなら&lt;利益&gt;だからだ</span><br></pre></td></tr></table></figure><ul><li>ビジネスアナリストはステークホルダーの使う言葉(ドメイン用語)をストーリーに使うことで全員が同じ用語を使うようにしなければならない</li><li>ドメイン用語はオブジェクト、メソッド、変数などコードベースにそのまま含まれる</li><li>ストーリーの「完了」を定義する受け入れい基準となるシナリオにおいて重要なのはステークホルダーが行うのとまったく同じ方法でアプリケーションとやりとりすること</li></ul><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><ul><li>BDDはTDDの枠組みを変化させ、本格的なアジャイル開発を理解しやすくする試みから発展した手法。  </li><li>BDDには３つの原則がある<ul><li>十分といったら十分</li><li>ステークホルダーに価値をもたらす</li><li>すべては振る舞いから</li></ul></li></ul><ul><li>BDDのストーリーとシナリオは、自動化しやすく、ステークホルダーが明確に理解できることに重点を置いてた上で、一連の作業モデルをサポートするように設計されている。</li></ul><h2 id="実装例"><a href="#実装例" class="headerlink" title="実装例"></a><a name="2">実装例</a></h2><p><a href="https://github.com/k2works/bdd_introduction" target="_blank" rel="noopener">ビヘイビア駆動開発入門</a>を参照</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4798121932&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> マネジメント </category>
          
          <category> エンジニアリング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> アジャイル開発 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>マネジメント</title>
      <link href="/2014/04/09/2014-04-09-what-is-management/"/>
      <url>/2014/04/09/2014-04-09-what-is-management/</url>
      
        <content type="html"><![CDATA[<div style="position:relative;height:300px;width:640px;padding:1px;background:#333;"><a href="http://www.flickr.com/photos/celestinechua/10591119275/" target="_blank"><img src="http://farm6.static.flickr.com/5533/10591119275_1c812c18ea_z.jpg?zz=1" alt="Price of greatness" style="position:absolute;clip:rect(5px 902px 305px 2px);margin:-5px 0 0 -2px;padding-bottom:5px;" /></a><span style="position:absolute;bottom:0;right:0;background:#333;color:#DDD;font-size:10px;padding:3px;">Price of greatness / Celestine Chua</span></div><hr><p>マネジメントとは</p><blockquote><p>今日の社会、経済、コミュニティの中心それは成果をあげるための社会的機関としての組織である<br>この組織に成果を挙げさせるための道具、機能、機関がマネジメントである<br>マネジメントが責任を追うのは、成果と仕事に関わることすべてである</p></blockquote><blockquote><p>『マネジメント 基本と原則』</p></blockquote><a id="more"></a><h2 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h2><ul><li><a href="#!">マネジメント</a></li><li><a href="#2">組織</a></li><li><a href="#3">成果</a></li><li><a href="#4">まとめ</a></li><li><a href="#5">参考文献</a></li></ul><h2 id="マネジメント"><a href="#マネジメント" class="headerlink" title="マネジメント"></a><a name="1">マネジメント</a></h2><blockquote><p>今やあらゆる先進社会が組織社会になった。主な社会的課題はすべて、マネジメントによって運営される。  </p></blockquote><blockquote><p>『マネジメント 基本と原則』</p></blockquote><p>組織社会のための社会理論・政治理論そして新たな多元的社会のための理論として要求がマネジメントの起源である。<br>マネジメントを構成する要素として組織と成果がある。</p><p><a href="https://www.flickr.com/photos/k2works/13735018804" target="_blank" rel="noopener" title="management_00 by Katuyuki Kakigi, on Flickr"><img src="https://farm8.staticflickr.com/7254/13735018804_20e77f4382.jpg" width="500" height="375" alt="management_00"></a></p><p>マネジメント概念図</p><h3 id="マネジメントとは"><a href="#マネジメントとは" class="headerlink" title="マネジメントとは"></a>マネジメントとは</h3><ul><li>マネジメントがなければ組織もない</li><li>マネジメントとは成果に対する責任に由来する客観的な機能である</li><li>マネジメントは企業だけのものではない</li></ul><h3 id="マネジメントが必要になった背景"><a href="#マネジメントが必要になった背景" class="headerlink" title="マネジメントが必要になった背景"></a>マネジメントが必要になった背景</h3><ol><li>すでに確立された事業の管理的な活動を意味していた→イノベーションのための組織をつくり、動かすことを学ばなければならない</li><li>企業以外の組織をマネジメントし、しかも成果をあげさせることである</li><li>知識の生産性を高めること</li><li>グローバル化</li></ol><h3 id="３つの役割"><a href="#３つの役割" class="headerlink" title="３つの役割"></a>３つの役割</h3><ol><li>マネジメントは組織に特有の使命、すなわちそれぞれの目的を果たすために存在する</li><li>仕事を通じて働く人たちを生かす</li><li>自らが社会に与える影響を処理するとともに、社会の問題について貢献する</li></ol><h3 id="時間という要素"><a href="#時間という要素" class="headerlink" title="時間という要素"></a>時間という要素</h3><p>  マネジメントは常に現在と未来、短期と長期を見ていかなければならない</p><ul><li>管理的活動・・・すでに存在し、すでに知られているものを管理する</li><li>企業的活動・・・成果の小さな分野、縮小しつつある分野から成果の大きな分野、しかも増大する分野へと資源を向けなければならない。明日を想像しなければならない。</li></ul><h2 id="組織"><a href="#組織" class="headerlink" title="組織"></a><a name="2">組織</a></h2><blockquote><p>組織の目的は、凡人をして非凡なことを行わせることにある。<br>天才に頼ることはできない。天才は稀である。あてにできない。<br>凡人から強みを引き出し、他の者の助けとすることができるか否かが、組織の良否を決定する。<br>同時に、組織の役割は人の弱みを無意味にすることである。<br>要するに、組織の良否は、そこに成果中心の精神があるか否かによって決まる。</p></blockquote><blockquote><p>『マネジメント 基本と原則』</p></blockquote><p>組織とは成果を目的とし責任によって構成された存在である。</p><p><a href="https://www.flickr.com/photos/k2works/13734617125" target="_blank" rel="noopener" title="organaization_00 by Katuyuki Kakigi, on Flickr"><img src="https://farm3.staticflickr.com/2813/13734617125_6bbf3a61f4_n.jpg" width="311" height="320" alt="organaization_00"></a></p><p>組織概念図</p><h3 id="企業"><a href="#企業" class="headerlink" title="企業"></a>企業</h3><p>企業の目的は顧客を創造することである。<br>その企業が持つ主要な機能として以下の２つがある。</p><ul><li>第一の機能：マーケティング・・・顧客を理解し製品とサービスを顧客に合わせ、おのずから売れるようにすること</li><li>第二の機能：イノベーション・・・人的資源や物的資源に対し、より大きな富を生み出す新しい能力をもたらすこと</li></ul><h4 id="事業"><a href="#事業" class="headerlink" title="事業"></a>事業</h4><p>事業とは企業の定義である。</p><blockquote><p>あらゆる組織において、共通のものの見方、理解、方向づけ、努力を実現するには、「われわれの事業は何か。何であるべきか」を定義することが不可欠である。</p></blockquote><blockquote><p>『マネジメント 基本と原則』</p></blockquote><h4 id="事業の定義"><a href="#事業の定義" class="headerlink" title="事業の定義"></a>事業の定義</h4><ol><li><p>われわれの事業は何か</p><ul><li>「顧客は誰か」</li><li>「顧客はどこにいるのか」</li><li>「顧客は何を買うか」</li></ul></li><li><p>われわれの事業は何になるか</p><ul><li>人口構造の変化</li><li>市場構造の変化</li><li>「今日の財やサービスで満たされていない欲求は何か」</li></ul></li><li><p>われわれの事業は何であるべきか</p><ul><li>社会、経済、市場の変化</li><li>自らによるイノベーション</li><li>他社によるイノベーション</li></ul></li><li><p>われわれの事業のうち何を捨てるか</p><ul><li>既存の製品</li><li>サービス</li><li>工程</li><li>市場</li><li>最終用途</li><li>流通チャネル</li></ul></li></ol><h4 id="事業の目的"><a href="#事業の目的" class="headerlink" title="事業の目的"></a>事業の目的</h4><ol><li>マーケティングの目標</li><li>イノベーションの目標</li><li>経営資源の目標</li><li>生産性の目標</li><li>社会的責任の目標</li><li>費用としての利益</li><li>目標設定に必要なバランス</li><li>実行</li></ol><h4 id="戦略計画とは何か"><a href="#戦略計画とは何か" class="headerlink" title="戦略計画とは何か"></a>戦略計画とは何か</h4><ul><li>リスクを伴う起業家的な意思決定</li><li>その実行に必要な活動を体系的に組織</li><li>それらの活動の成果をを期待したものと比較測定するという連続したプロセス</li></ul><h3 id="仕事と人間"><a href="#仕事と人間" class="headerlink" title="仕事と人間"></a>仕事と人間</h3><h4 id="仕事とは何か"><a href="#仕事とは何か" class="headerlink" title="仕事とは何か"></a>仕事とは何か</h4><blockquote><p>仕事とは、一般的かつ客観的な存在である。それは課題である。存在するものである。したがって仕事にはものに対するアプローチをそのまま適用できる</p></blockquote><blockquote><p>『マネジメント 基本と原則』</p></blockquote><p>仕事に対するアプローチ</p><ol><li>分析</li><li>プロセスへの統合</li><li>管理のための手段を組み込む</li></ol><h4 id="人こそ最大の資産"><a href="#人こそ最大の資産" class="headerlink" title="人こそ最大の資産"></a>人こそ最大の資産</h4><blockquote><p>「人こそ最大の資産である」という。「組織の違いは人の働きだけである」ともいう。事実、人以外の資源は全て同じように使われる。</p></blockquote><blockquote><p>『マネジメント 基本と原則』</p></blockquote><h4 id="マネージャー"><a href="#マネージャー" class="headerlink" title="マネージャー"></a>マネージャー</h4><p>マネージャーとは組織の成果に責任を持つ者。</p><h5 id="マネージャーの役割"><a href="#マネージャーの役割" class="headerlink" title="マネージャーの役割"></a>マネージャーの役割</h5><ul><li>部分の和より大きな全体</li><li>ただちに必要とされているものと遠い将来に必要とされるものを調和させていく</li></ul><h5 id="マネージャの仕事"><a href="#マネージャの仕事" class="headerlink" title="マネージャの仕事"></a>マネージャの仕事</h5><ol><li>目標を設定する</li><li>組織する</li><li>動機づけとコミュニケーションを図る</li><li>評価測定する</li><li>人材を開発する</li></ol><h5 id="マネージャの資質"><a href="#マネージャの資質" class="headerlink" title="マネージャの資質"></a>マネージャの資質</h5><blockquote><p>マネージャーの仕事は、体系的な分析の対象となる。マネージャーにできなければならないことは、そのほとんどが教わらなくとも学ぶくことができる。<br>しかし、学ぶことのできない資質、後天的に獲得することのできない資質、始めから身につけていなければならない資質が、一つだけある。才能ではない。<br>真摯さである。</p></blockquote><blockquote><p>『マネジメント 基本と原則』</p></blockquote><h3 id="社会的責任"><a href="#社会的責任" class="headerlink" title="社会的責任"></a>社会的責任</h3><p>あらゆる企業にとって、社会的責任は、自らの役割を徹底的に検討し、目標を設定し、成果を上げるべき重大な問題</p><h4 id="プロフェッショナルの責任"><a href="#プロフェッショナルの責任" class="headerlink" title="プロフェッショナルの責任"></a>プロフェッショナルの責任</h4><blockquote><p>言い換えるならば、プロたるものは、自立した存在として政治やイデオロギーの支配に従わないという意味において、私的である。<br>そしてこのプロの倫理の基本、すなわち公的責任の倫理の基本が、「知りながら害をなすな」である。</p></blockquote><blockquote><p>『マネジメント 基本と原則』</p></blockquote><h5 id="マネジメントの正当性の根拠"><a href="#マネジメントの正当性の根拠" class="headerlink" title="マネジメントの正当性の根拠"></a>マネジメントの正当性の根拠</h5><blockquote><p>組織とは、個としての人間一人ひとりに対して、また社会を構成する一人ひとりの人間に対して、何らかの貢献を行わせ、自己実現させるための手段である。</p></blockquote><blockquote><p>組織の基礎となる原理は、「私的な悪徳は社会のためになる」ではない、「個人の強みは社会のためになる」である。</p></blockquote><blockquote><p>『マネジメント 基本と原則』</p></blockquote><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a><a name="3">成果</a></h2><h3 id="マネジメントの技能"><a href="#マネジメントの技能" class="headerlink" title="マネジメントの技能"></a>マネジメントの技能</h3><h3 id="意思決定"><a href="#意思決定" class="headerlink" title="意思決定"></a>意思決定</h3><ul><li>問題を明確にする</li><li>意見の対立を促す</li><li>意見の相違を重視する</li><li>行動すべきか否か</li><li>意思決定の実行</li><li>フィードバックの仕組み</li></ul><h3 id="コミュニケーション"><a href="#コミュニケーション" class="headerlink" title="コミュニケーション"></a>コミュニケーション</h3><ol><li>知覚であり</li><li>期待であり</li><li>要求であり</li><li>情報ではない</li></ol><h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><h4 id="３つの特性"><a href="#３つの特性" class="headerlink" title="３つの特性"></a>３つの特性</h4><ol><li>管理手段は順客観的でも純中立的でもありえない</li><li>管理手段は成果に焦点を合わせなければならない</li><li>管理手段は、測定可能な事象のみならず、測定不能な事象に対しても適用しなければんらない</li></ol><h4 id="7つの要件"><a href="#7つの要件" class="headerlink" title="7つの要件"></a>7つの要件</h4><ol><li>管理手段は効率的でなければならない</li><li>管理手段は意味あるものでなければならない</li><li>管理手段は測定の対象に適していなければならない</li><li>管理手段の精度は、測定の対象に適していなければならない</li><li>管理手段は、時間間隔が測定の対象に適していなければならない</li><li>管理手段は単純でなければならない</li><li>管理手段は行動に焦点を合わせなければならない</li></ol><h4 id="真の管理とは"><a href="#真の管理とは" class="headerlink" title="真の管理とは"></a>真の管理とは</h4><blockquote><p>ここにこそ、組織の本当の管理、すなわち一人ひとりの人間の姿勢と行動の誘因となるべきものがある。<br>人はいかに賞され罰せられるかによって左右される。彼らにとって、賞罰こそ、組織の目的、価値観、そして自らの位置づけと役割を教えられるものである。</p></blockquote><blockquote><p>『マネジメント 基本と原則』</p></blockquote><h3 id="経営科学"><a href="#経営科学" class="headerlink" title="経営科学"></a>経営科学</h3><p>経営科学の目的はあくまでも診断を助けることにある</p><p>経営各科学を生産的にするための４つのこと</p><ol><li>仮説検証する</li><li>正しい問題を明らかにする</li><li>答えではなく代替案を示す</li><li>問題に対する公式ではなく理解に焦点を合わせる</li></ol><h3 id="マネジメントの組織"><a href="#マネジメントの組織" class="headerlink" title="マネジメントの組織"></a>マネジメントの組織</h3><h4 id="組織構造"><a href="#組織構造" class="headerlink" title="組織構造"></a>組織構造</h4><ul><li>機能別組織</li><li>分権組織</li></ul><h4 id="組織の基本単位"><a href="#組織の基本単位" class="headerlink" title="組織の基本単位"></a>組織の基本単位</h4><ol><li>何を組織の単位とするか</li><li>何を一緒にするか。何を分離するか</li><li>いかなる大きさと形にするか</li><li>いかなる位置づけを行い、いかなる関係をもたせるか</li></ol><h4 id="組織の条件"><a href="#組織の条件" class="headerlink" title="組織の条件"></a>組織の条件</h4><ol><li>明快さ</li><li>経済性</li><li>方向付けの容易さ</li><li>理解の容易さ</li><li>意思決定の容易さ</li><li>安定性と適応性</li><li>永続性と新陳代謝</li></ol><h4 id="５つの組織構成"><a href="#５つの組織構成" class="headerlink" title="５つの組織構成"></a>５つの組織構成</h4><ul><li>職能別組織</li><li>チーム型組織</li><li>連邦分権組織</li><li>擬似分権組織</li><li>システム型組織</li></ul><h4 id="組織についての結論"><a href="#組織についての結論" class="headerlink" title="組織についての結論"></a>組織についての結論</h4><blockquote><p>組織構造は目的達成のための手段である。それ自体目的ではない。構造の健全さは、組織の健康の前提である。<br>それがそのまま組織の健康を意味するわけではない。組織の健康を判定する基準は、構造の美しさ、明快さ、完全さではなく、成果である。</p></blockquote><blockquote><p>『マネジメント 基本と原則』</p></blockquote><h3 id="マネジメントの戦略"><a href="#マネジメントの戦略" class="headerlink" title="マネジメントの戦略"></a>マネジメントの戦略</h3><h4 id="トップマネジメント"><a href="#トップマネジメント" class="headerlink" title="トップマネジメント"></a>トップマネジメント</h4><p>トップマネジメントとは、方向づけを行い、ビジョンを明らかにし、基準を設定する機関である。<br>トップマネジメントとは、一人ではなくチームによる仕事である。</p><h5 id="役割"><a href="#役割" class="headerlink" title="役割"></a>役割</h5><ol><li>トップマネジメントには、事業の目的を考えるという役割</li><li>基準を設定する役割、すなわち組織全体の規範を定める役割</li><li>組織をつくりあげ、それを維持する役割</li><li>トップの座にある者だけの仕事として渉外の役割</li><li>行事や夕食会への出席など数限りない儀礼的な役割</li><li>重大な危機に際しては、自ら出勤するという役割、著しく悪化した問題に取り組むという役割</li></ol><h5 id="構造"><a href="#構造" class="headerlink" title="構造"></a>構造</h5><ol><li>トップマネジメントのメンバーは、それぞれの担当分野において最終的な決定権をもたなければならない。</li><li>トップマネジメントのメンバーは、自らの担当以外の分野について意思決定を行ってはならない。</li><li>トップマネジメントのメンバーは、仲良くする必要はない。尊敬し合う必要もない。ただし、攻撃し合ってはならない。</li><li>トップマネジメントは委員会ではない。チームである。チームにはキャプテンがいる。キャプテンは、ボスではなくリーダーである。</li><li>トップマネジメントのメンバーは、自らの担当分野では意思決定を行わなければならない。しかし、ある種の意思決定は、決定する前に、トップマネジメントのチーム内で検討しなければならない。</li><li>トップマネジメントの仕事は、意志の疎通に精力的に取り組むことを要求する。</li></ol><h4 id="マネジメントの戦略-1"><a href="#マネジメントの戦略-1" class="headerlink" title="マネジメントの戦略"></a>マネジメントの戦略</h4><ul><li>規模のマネジメント</li><li>多角化のマネジメント</li><li>グローバル化のマネジメント</li><li>成長のマネジメント</li><li>イノベーション</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a><a name="4">まとめ</a></h2><p>組織・成果を抜きにマネジメントを論じることはできない。<br>そして組織とは責任で構成された人の集まりである。<br>仕事とはアウトプットを出すための組織のプロセスである。<br>そのアウトプットとしての成果こそマネジメントの目的である。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a name="5">参考文献</a></h2><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4478410232&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4478012032&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> マネジメント </category>
          
      </categories>
      
      
        <tags>
            
            <tag> マネジメント </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>リーンスタートアップ</title>
      <link href="/2014/03/06/2014-03-06-what-is-lean-startup/"/>
      <url>/2014/03/06/2014-03-06-what-is-lean-startup/</url>
      
        <content type="html"><![CDATA[<p><span style="font-size:10px;"><a href="http://www.flickr.com/photos/deanmeyers/9431612014/" target="_blank"><img src="http://farm4.static.flickr.com/3820/9431612014_e3bfa83a29_z.jpg?zz=1" alt="Lean Startup Summer Bootcamp: On Pivots and Pitches" /></a><br />Lean Startup Summer Bootcamp: On Pivots and Pitches / deanmeyersnet</span></p><hr><blockquote><p>Only 5 percent of entrepreneurship is the big idea, the business model, the whiteboard strategizing, and the splitting up of the spoils. The other 95 percent is the gitty work that is measured by innovation accounting: product prioritization decisions, deciding which customers to target or listen to, and having the courage to subject a grand vision to constant testing and feedback.</p></blockquote><blockquote><p>(すごいアイデアにビジネスモデル、ホワイトボードによる戦略策定、戦果の分配は、起業というものの５％程度にすぎない。のこりの９５％は、製品に優先順位をつける、ターゲットとする顧客や耳を傾ける顧客を選ぶ、グランドビジョンを検証とフィードバックに繰り返しさらす勇気を持つなど、革新会計で計測を行う地道な作業で占めれられる。)<br>『The Lean Startup』</p></blockquote><a id="more"></a><h2 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h2><p><a href="http://www.flickr.com/photos/k2works/12965025535/" target="_blank" rel="noopener" title="lean-startup-001 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7331/12965025535_e1833e3249.jpg" width="500" height="274" alt="lean-startup-001"></a></p><ul><li><a href="#1">Vision(ビジョン)</a><ul><li>定義</li><li>メカニズム</li><li>プロセス</li></ul></li><li><a href="#2">Steer(舵取り)</a><ul><li>概要</li><li>構築・検証</li><li>計測</li><li>方向転換(あるいは辛抱)</li></ul></li><li><a href="#3">Accelerate(スピードアップ)</a><ul><li>概要</li><li>バッチサイズの縮小</li><li>３種の成長エンジン</li><li>順応性の高い組織</li><li>イノベーション</li></ul></li></ul><h2 id="Vision-ビジョン"><a href="#Vision-ビジョン" class="headerlink" title="Vision(ビジョン)"></a><a name="1">Vision(ビジョン)</a></h2><h3 id="定義"><a href="#定義" class="headerlink" title="定義"></a>定義</h3><p>スタートアップとは</p><blockquote><p>A startup is a human insititution desighned to create a new product or service under conditions of extreme uncertainty.</p></blockquote><blockquote><p>(スタートアップとは、とてつもなく不確実な状態で新しい製品やサービスを創りださなければならない人的組織である。)<br>『The Lean Startup』</p></blockquote><p>スタートアップの構築とは</p><blockquote><p>Building a startup is an exercise in institution building; thus, it necessarily involves management.</p></blockquote><blockquote><p>(スタートアップの構築とは組織の構築にほかならない。つまり、マネジメントを避けて通ることわけにはいかないのだ。)<br>『The Lean Startup』</p></blockquote><p>リーン・スタートアップとは</p><blockquote><p>The goal of a startup is to figure out the right thing to build-the thing customers want and will pay for-as quickly as possible.<br>(スタートアップの目標は、できるかぎり早く、作るべきモノ-顧客が欲しがり、お金を払ってくれるモノ-を突きとめることだ。)</p></blockquote><blockquote><p>In other words,the Lean Startup is a new way of looking at the development of innovative new products that emphasizes fast iteration and customer insight, a huge vision, and great ambition, all at the same time.<br>(つまり、リーン・スタートアップとは、サイクルタイムの短縮と顧客に対する洞察、大いなるビジョン、大望とさまざまなポイントに等しく気を配りながら、「検証による学び」を通して画期的な新製品を開発する方法なのである。)<br>『The Lean Startup』</p></blockquote><p>リーンスタートアップとはマネジメント原理</p><blockquote><p>I believe that entrepreneurship requires a managerial discipline to harness the entrepreneurial opportunity we have been given.</p></blockquote><blockquote><p>(アントレプレナーには、起業に伴うチャンスを現実のものとするマネジメント原理が必要であるー私はそう考えている。)<br>『The Lean Startup』</p></blockquote><p>ちなみにリーン・スタートアップという名前は、トヨタが開発したリーン生産方式にちなんだもの。<br><a href="http://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A8%E3%82%BF%E7%94%9F%E7%94%A3%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener">トヨタ生産方式</a></p><h3 id="メカニズム"><a href="#メカニズム" class="headerlink" title="メカニズム"></a>メカニズム</h3><p>リーンスタートアップを構成するのが成長のエンジン(engine of growth)と呼ばれる概念である。<br>成長エンジンは以下の要素で構成されている。</p><ul><li>スタートアップのビジョン(vision)・・・繁栄し、世界を変える事業を構築すること</li><li>戦略(strategy)・・・ビジジョンを実現するために採用</li><li>製品(product)・・・戦略から生み出される成果物</li></ul><p>新しい製品、新しい機能、新しいマーケティング方法などは、いずれも、この成長のエンジンを改良しようとする試みであり、それらの改善によって成長エンジンをチューニングすることにスタートアップは時間の大半を費やす。</p><p><a href="http://www.flickr.com/photos/k2works/12965167443/" target="_blank" rel="noopener" title="lean-startup-002 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2457/12965167443_300317e726_n.jpg" width="320" height="301" alt="lean-startup-002"></a></p><p>成長のエンジン(engine of growth)</p><p>なお、リーンスタートアップにおいて組織・製品・革新といった要素は以下のように定義されている。</p><ul><li>組織(institution)・・・従業員の採用、職務の調整、成果を出せる企業文化の醸成など、組織の構築に関するさまざまな活動</li><li>製品(product)・・・顧客となる人々にとっての価値を生み出すもの、全てを指す</li><li>イノベーション(inovation)や革新・・・たとえば科学的な新発見、既存技術の転用、隠れた価値を掘り起こす新たなビジネスモデル、あるいは、いままで提供されていなかった場所や提供が不十分であった場所に対する製品やサービスの提供など</li></ul><h3 id="プロセス"><a href="#プロセス" class="headerlink" title="プロセス"></a>プロセス</h3><p>従来のスタートアップ方式がロケットの発射計画になぞられるのに対してリーン・スタートアップ方式ではスタートアップをうまく操縦できる方法を教える。<br>実施プロセスにおいて従来のスタートアップ方式がさまざまな仮説に基づいて複雑な計画を立てるの対してリーン・スタートアップ方式では構築ー計測ー学習(Build-Measure-Learn)というフィードバックループをハンドルとして継続的に調整を行う。</p><p>リーン・スタートアップでは、スタートアップが行うことを「戦略を検証する実験」としてとらえなおす。<br>実験は科学的手法にのっとって行う。まず、何が起きるかを予想する仮説を組み立てる。次に予測と実測とを比較する。科学的実験が理論に基づくように、スタートアップの実験はビジョンに基づいて進める。</p><p>仮説は２つに分類される。なお、リーンな考え方における価値とは顧客にとってのメリットを提供するものを指し、それ以外はすべて無駄だと考える。</p><ul><li>価値仮説(value hypothesis)・・・顧客が使うようになったとき、製品やサービスが本当に価値を提供できるか否かを判断するもの</li><li>成長仮説(growth hypothesis)・・・新しい顧客が製品やサービスをどうとらえるかを判断するもの</li></ul><p>仮説を基にリーン・スタートアップでは検証による学び(validated learning)を単位として進歩を測定する。そして機能横断的なチームとして学びの中間目標(learning milestone)を達成するため構築ー計測ー学習(Build-Measure-Learn)のフィードバックループを回し成長のエンジンをチューニング(Optimize)し必要に応じて戦略の方向転換(Pivot)を実施する。<br><a href="http://www.flickr.com/photos/k2works/12965025425/" target="_blank" rel="noopener" title="lean-startup-004 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7389/12965025425_6c12a4f013.jpg" width="500" height="194" alt="lean-startup-004"></a></p><p>成長のエンジンのチューニング・方向転換（あるいは辛抱)</p><h2 id="Steer-舵取り"><a href="#Steer-舵取り" class="headerlink" title="Steer(舵取り)"></a><a name="2">Steer(舵取り)</a></h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>挑戦の要(leap-of-fatith)となる仮説のなかでも重要度が高いのが価値仮説と成長仮説。スタートアップの成長エンジンをコントロールする変数は、この仮説をもとにチューニングする。チューニングを実施する際に以下の２つの概念が重要になってくる。</p><ul><li>実用最小限の製品(minimum viable product)・・・MVPとは構築-計測-学習のループを回せるレベルの製品で、最小限の労力と時間で開発できるものをいう。</li><li>革新会計(inovation accounting)・・・このアプローチを活用するとエンジンのチューニングが成果を上げているか否かを定量的に測れるし学びの中間目標(learning milestone)も設定できる。</li></ul><p>フィードバックループは実際に行う順番に合わせて「構築-計測-学習」としているが、計画はこの逆順で考える。検証による学びを得るために計測しなければならないものを革新会計で確認し、実験と計測を行うにはどのような実用最小限の製品を作らなければならないかを考える。</p><p><a href="http://www.flickr.com/photos/k2works/12965447694/" target="_blank" rel="noopener" title="lean-startup-003 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2517/12965447694_45e1dce970_n.jpg" width="319" height="320" alt="lean-startup-003"></a></p><p>構築ー計測ー学習(Build-Measure-Learn)のフィードバックループ</p><h3 id="構築・検証"><a href="#構築・検証" class="headerlink" title="構築・検証"></a>構築・検証</h3><p>従来の製品開発は長い時間をかけてじっくり開発し、完璧な製品をめざすが、MVPは目的が学びのプロセスを始めることであってそれを終えることではない。プロトタイプやコンセプト検証と違い、MVPは製品デザインや技術的な問題を解決するためのものではない。基礎となる事業仮説を検証するためのものである。なお、MVPを作る際の問題として一般的なのは、法的問題、競合他社に対する恐れ、ブランディングのリスク、意欲に対する影響などがある。そしてMVPでどのような結果が出ても絶対に希望を捨てないと、あらかじめ心に決めておかなければならない。その結果に対して次の行動を決定するのに必要になるのが次の計測で解説する革新会計である。</p><h3 id="計測"><a href="#計測" class="headerlink" title="計測"></a>計測</h3><p>スタートアップは不確実性が高すぎて、精度のよい予測や目標が得られないため既存の会計概念が使えない。そこで新たな指標として検証による学びを実現できているかどうか、前進しているかどうかを確認できる体系的アプローチ（革新会計）が必要となる。</p><p>革新会計の機能として学びの中間目標３種（ベースラインの設定・エンジンのチューニング・方向転換するか辛抱するか）がある。毎回、繰り返されるのは「ベースラインの設定、エンジンのチューニング、方向転換か辛抱かの判断」というシンプルなリズムである。</p><p>ベースラインの設定としては以下のMVP作成アプローチがある。</p><ul><li>完全なプロトタイプを制作し、主力のマーケティングチャネルを通じて実際の顧客に販売する方法</li><li>ひとつの仮説にたいするフィードバックを目的にしたMVPをいくつも作るという方法</li><li>プロトタイプを作る前にマーケティング資料を作り、スモークテストで様子を見る方法</li></ul><p>エンジンのチューニングにおいて重要な事は『優れたデザインとは顧客の行動を改善するもの』であるということ。<br>方向転換するか辛抱するかの段階においてビジネスモデルの原動力が改善されなければ前進ではない。</p><p>評価基準には２種類の評価基準が存在する革新会計においては虚栄の評価基準(vanity metrics)を廃し行動につながる評価基準(actionable metrics)を採用することが重要になる。</p><ul><li>虚栄の評価基準(vanity metrics)</li><li>行動につながる評価基準(actionable metrics)</li></ul><p>測定の実行方法としてはコホートとスプリットテストの２つが有効である。コホート分析とは「この期間に我々の製品を利用した人のうち、我々が注目する各種の行動を取った人数は行動ごとに以下のとおりである」という形で論ずるものだからだ。コホート分析の場合、総売上や総顧客数のような総計あるいは累計値を見るのではなく、製品と新しく接する顧客グループの成績を個別に見る。この互いに独立したグループをコホートと呼ぶ。<br>スプリットテストというのは、異なるバージョンの製品を同時並行で顧客に提供する実験である。</p><p>進捗管理の方法としてかんばんも有効である。このやり方の特徴は、ユーザーストーリーは検証による学びが得られてはじめて完結だと考えること。このため製品開発をプロダクトバックログ、構築中、構築完了（技術的には機能が完成した状態）、検証中の４段階に分け、ユーザーストーリーをそれぞれに分類した。検証の定義は「ユーザーストーリーの機能を作ったことがよかったか否かを知ること」とした。検証は基本的にスプリットテストで顧客行動の変化を確認するが、顧客の面接調査やアンケートといった形で行う場合もある。</p><p>計測における３つの「しやすさ」の価値は以下の通り</p><ul><li>行動しやすさ(Actionable)・・・レポートが行動につながるためには、因果関係がはっきりしていなければならない。それ以外は虚栄の評価基準なのだ。</li><li>わかりやすさ(Accessible)・・・まず、レポートはできるかぎりシンプルにして全員が理解できるようにする。ここで大事なのなのが「評価尺度の実体は人である」という認識だ。</li><li>チェックしやすさ(Auditable)・・・顧客と話す形で検証ができなければならない。これ以外、レポートの内容が真実であるか否かを確認できる方法はないのだ。</li></ul><h3 id="方向転換-あるいは辛抱"><a href="#方向転換-あるいは辛抱" class="headerlink" title="方向転換(あるいは辛抱)"></a>方向転換(あるいは辛抱)</h3><p>成長のエンジンを加速させるためのフィードバックループを回す段階で戦略変更の必要性が発生してくる。この変更が「ピボット（方向転換）」である。製品、戦略、成長のエンジンに関する根本的な仮説を新たに策定し、それを検証できるコースに方向転換する。ピボットとは新しい戦略的仮説であり、新しくMVPで検証しなければならない。</p><blockquote><p>A pivot is not just an exhortation to change. Remember, it is a special kind of structured change designed to test a new fundamental hypothesis about the product, business model, and engine of growth.</p></blockquote><blockquote><p>(ピボットとは、単に変化を勧めるものではない。製品、ビジネスモデル、成長のエンジンに関する根本的な仮説を新たに策定し、それを検証できる構造の変化をピボットと呼ぶのだ。)<br>『The Lean Startup』</p></blockquote><p>スタートアップの滑走路は今後行えるピボットの数で測る。滑走路とはスタートアップに残された時間で、その時間が終わるまでに離陸できなければ失敗する。この時間は、普通、月の資本燃焼率つまり銀行残高のネットの減少率で銀行残高を割って算出する。キャッシュが心細くなってきたとき、滑走路を伸ばす方法はふたつある。コスト削減と追加資金の調達となる。</p><p>ピボットのさまざまなタイプ</p><ul><li>ズームイン型ピボット(zoom-in pivot)</li><li>ズームアウト型ピボット(zoom-out pivot)</li><li>顧客セグメント型ピボット(customer segment pivot)</li><li>顧客ニーズ型ピボット(customer need pivot)</li><li>プラットフォーム型ピボット(platform pivot)</li><li>事業構造型ピボット(business architecture pivot)</li><li>価値補足型ピボット(value capture pivot)</li><li>成長エンジン型ピボット(engine of growth pivot)</li><li>チャネル型ピボット(channel pivot)</li><li>技術型ピボット(technology pivot)</li></ul><h2 id="Accelerate-スピードアップ"><a href="#Accelerate-スピードアップ" class="headerlink" title="Accelerate(スピードアップ)"></a><a name="3">Accelerate(スピードアップ)</a></h2><h3 id="概要-1"><a href="#概要-1" class="headerlink" title="概要"></a>概要</h3><p>大きな不確実性と戦える組織構造をスタートアップの原動力であるスピードと敏捷性を損なわず構築するための方法。バッチサイズの縮小、３種の成長エンジン、順応性の高い組織そして成長した企業のイノベーションに関して。</p><p><a href="https://www.flickr.com/photos/k2works/13596110743" target="_blank" rel="noopener" title="lean-startup-005 by Katuyuki Kakigi, on Flickr"><img src="https://farm4.staticflickr.com/3807/13596110743_19142ba4be_n.jpg" width="320" height="299" alt="lean-startup-005"></a></p><p>スタートアップ概念図</p><h3 id="バッチサイズの縮小"><a href="#バッチサイズの縮小" class="headerlink" title="バッチサイズの縮小"></a>バッチサイズの縮小</h3><p>バッチサイズ縮小で得られる最大のメリットは、品質上の問題を早期に発見できることだ。そして継続的に欠陥をなくす取り組みとしてアンドン（部品に欠陥があるなどその場で解決できない問題に気づいたら、誰でも組立ライン全体を止めて助けを求められる仕組み）という考えがある。そのアンドンの考え方をソフトウエアに適用したのが継続的デプロイメント(continuous deployment)である。</p><p>プッシュではなくプルで仕事を進める。つまりポイントは顧客ではなく顧客に関する仮説(hypothesis about the customer)であり、それをプル信号として製品開発をはじめとするさまざまな仕事を動かす。これ以外の仕事はすべて無駄である。</p><h3 id="３種の成長エンジン"><a href="#３種の成長エンジン" class="headerlink" title="３種の成長エンジン"></a>３種の成長エンジン</h3><ul><li><p>粘着型成長エンジン(sticky engine of growth)</p><ul><li>粘着型成長エンジンのルールはシンプルで、新規顧客の獲得速度が解約速度を上回れば成長する。</li></ul></li><li><p>ウィルス型成長エンジン(viral engine of growth)</p><ul><li>ウィルス型成長エンジンも、定量的に測れるフィードバックループが原動力となっている。このウィルス型ループは、ウィルス係数からその回転スピードが求められる。</li></ul></li><li><p>支出型成長エンジン(paid engine of growth)</p><ul><li>支出型成長エンジンの回転速度を決めれるのは、生涯価値(LTV)と顧客獲得単価(CPA)の差（限界利益)</li><li>成長速度をあげるには顧客あたりの売上を増やすか新規顧客の獲得コストを減らすか</li></ul></li></ul><p>成長段階において過去の顧客の行動が新しい顧客を呼びこむ。代表的な行動としては以下のものがある。</p><ul><li>口コミ</li><li>製品の利用に伴う効果</li><li>有料広告を通じて</li><li>購入や利用のリピートを通じて</li></ul><h3 id="順応性の高い組織"><a href="#順応性の高い組織" class="headerlink" title="順応性の高い組織"></a>順応性の高い組織</h3><p>順応性の高い組織(adaptive organization)とは状況の変化に合わせてプロセスとパフォーマンスを自動的に調整する組織のこと。そのような組織をいかにして構築するかのアプローチとして５回のなぜがある。５回のなぜは、問題が一番大きな症状を直接的に防止することが目的である。</p><p>順応性の高い組織として成長したときリーン原則からオペレーショナルエクセレンスが得やすい点が、リーン生産方式の手法を応用する大きなメリットとなる。</p><h3 id="イノベーション"><a href="#イノベーション" class="headerlink" title="イノベーション"></a>イノベーション</h3><p>いわゆる大企業と呼ばれる組織においてイノベーションを起こすアプローチとして以下のものがある。</p><ul><li>実験のプラットフォームを作る</li><li>イノベーションのサンドボックスを用意する</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=0307887898&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=B004J4XGN6&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4822248976&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=B00F3UTIQY&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> マネジメント </category>
          
          <category> ビジネス </category>
          
      </categories>
      
      
        <tags>
            
            <tag> リーンスタートアップ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>アジャイルプロジェクトマネジメント Scrum</title>
      <link href="/2014/03/06/2014-03-06-agile-scrum/"/>
      <url>/2014/03/06/2014-03-06-agile-scrum/</url>
      
        <content type="html"><![CDATA[<div style="position:relative;height:300px;width:640px;padding:1px;background:#333;"><a href="http://www.flickr.com/photos/18091975@N00/3654141771/" target="_blank"><img src="http://farm4.static.flickr.com/3391/3654141771_22fe87c875_z.jpg?zz=1" alt="Scrum to England" style="position:absolute;clip:rect(30px 900px 330px 0px);margin:-30px 0 0 0px;padding-bottom:5px;" /></a><span style="position:absolute;bottom:0;right:0;background:#333;color:#DDD;font-size:10px;padding:3px;">Scrum to England / EoinGardiner</span></div><hr><p>Scrumとは、アジャイル開発手法の１つ。常に進む方向を調整しながら目的を達成できるプロダクトをつくるために、全員が一丸となって行うべき作業、会議、成果物を定めたもの。アジャイル開発における位置づけとしては主にマネジメント領域をカバーする。</p><a id="more"></a><p><a href="../agile-development-model">アジャイル開発</a></p><p><a href="http://www.flickr.com/photos/k2works/12964368824/" target="_blank" rel="noopener" title="agile_adaption_scrum_01 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7337/12964368824_1169557e59.jpg" width="500" height="320" alt="agile_adaption_scrum_01"></a></p><h2 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h2><ul><li><a href="#1">全体像</a></li><li><a href="#2">作業</a></li><li><a href="#3">会議</a></li><li><a href="#4">成果物</a></li><li><a href="#5">ロール</a></li><li><a href="#6">参考文献</a></li></ul><h2 id="全体像"><a href="#全体像" class="headerlink" title="全体像"></a><a name="1">全体像</a></h2><p><a href="http://www.flickr.com/photos/k2works/12964201004/" target="_blank" rel="noopener" title="agile-scrum-001 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2454/12964201004_6fe6bb616a.jpg" width="500" height="375" alt="agile-scrum-001"></a></p><h2 id="作業"><a href="#作業" class="headerlink" title="作業"></a><a name="2">作業</a></h2><h3 id="スプリント"><a href="#スプリント" class="headerlink" title="スプリント"></a>スプリント</h3><p><a href="http://www.flickr.com/photos/k2works/12963773205/" target="_blank" rel="noopener" title="agile-scrum-002 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7384/12963773205_5d45263e94.jpg" width="500" height="236" alt="agile-scrum-002"></a></p><p>Scrumでは最長1ヶ月までの固定の期間に区切って、くりかえし開発をおこなう。この固定の期間のことをスプリントと呼ぶ。<br>開発チームはこの期間の中で、計画、設計、開発、テストなどプロダクトのリリース判断に必要なすべてのことを行う<br>期間は延長しない。</p><h2 id="会議"><a href="#会議" class="headerlink" title="会議"></a><a name="3">会議</a></h2><h3 id="スプリント計画ミーティング"><a href="#スプリント計画ミーティング" class="headerlink" title="スプリント計画ミーティング"></a>スプリント計画ミーティング</h3><p><a href="http://www.flickr.com/photos/k2works/12964200884/" target="_blank" rel="noopener" title="agile-scrum-003 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7338/12964200884_7178154e39.jpg" width="391" height="500" alt="agile-scrum-003"></a></p><ul><li>スプリントで開発するためには計画が必要。</li><li>プロダクトーナーは何を欲しいのか（第一部）。</li><li>開発チームはどれくらいできそうか（第一部）。</li><li>開発チームはどうやってそれを実現するのか（第二部）。</li></ul><h3 id="デイリースクラム"><a href="#デイリースクラム" class="headerlink" title="デイリースクラム"></a>デイリースクラム</h3><p><a href="http://www.flickr.com/photos/k2works/12963917493/" target="_blank" rel="noopener" title="agile-scrum-004 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7445/12963917493_9fdfd3e824.jpg" width="281" height="185" alt="agile-scrum-004"></a></p><ul><li>開発チームの状況を毎日確認する。<ul><li>毎日15分程度</li><li>前回のデイリースクラムからやったこと</li><li>次回のデイリースクラムまでにやること</li><li>困っていること</li></ul></li></ul><h3 id="スプリントレビュー"><a href="#スプリントレビュー" class="headerlink" title="スプリントレビュー"></a>スプリントレビュー</h3><p><a href="http://www.flickr.com/photos/k2works/12963917553/" target="_blank" rel="noopener" title="agile-scrum-005 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2529/12963917553_a846b07960_s.jpg" width="75" height="75" alt="agile-scrum-005"></a></p><ul><li>開発チームの成果物をプロダクトオーナーが確認する。<ul><li>1ヶ月のスプリントであれば4時間、2週間スプリントであれば2時間程</li><li>開発チームが完了できなかったプロダクトバックログの項目について説明する。</li><li>プロダクトオーナーがプロダクトの状況やビジネスの環境について説明する。</li><li>プロダクトバックログに追加すべき項目の有無について議論する。</li><li>現状の進捗を踏まえて、リリース日や完了日を予測する。</li></ul></li></ul><h3 id="スプリントレトロスペクティブ"><a href="#スプリントレトロスペクティブ" class="headerlink" title="スプリントレトロスペクティブ"></a>スプリントレトロスペクティブ</h3><p><a href="http://www.flickr.com/photos/k2works/12963917413/" target="_blank" rel="noopener" title="agile-scrum-006 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7311/12963917413_0337452207_s.jpg" width="75" height="75" alt="agile-scrum-006"></a></p><ul><li>1ヶ月のスプリントであれば4時間、2週間スプリントであれば2時間程</li><li>プロセスやツールなどの観点で今回のスプリントを検査する。</li><li>うまくいったこと、今後改善すべき点を整理する。</li><li>今後のアクションプランをつくる。</li></ul><h2 id="成果物"><a href="#成果物" class="headerlink" title="成果物"></a><a name="4">成果物</a></h2><h3 id="プロダクトバックログ"><a href="#プロダクトバックログ" class="headerlink" title="プロダクトバックログ"></a>プロダクトバックログ</h3><p><a href="http://www.flickr.com/photos/k2works/12964200884/" target="_blank" rel="noopener" title="agile-scrum-003 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7338/12964200884_7178154e39.jpg" width="391" height="500" alt="agile-scrum-003"></a></p><ul><li>実現したい要求をリストにして並び替える。</li><li>常にメンテナンスして最新に保つ</li></ul><h3 id="スプリントバックログ"><a href="#スプリントバックログ" class="headerlink" title="スプリントバックログ"></a>スプリントバックログ</h3><p><a href="http://www.flickr.com/photos/k2works/12963917373/" target="_blank" rel="noopener" title="agile-scrum-007 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7326/12963917373_aedf01828a.jpg" width="500" height="367" alt="agile-scrum-007"></a></p><ul><li>プロダクトバックログを具体的なタスクに分割する。</li><li>タスクは後から増えることもある。</li></ul><h3 id="リリース判断可能なプロダクト"><a href="#リリース判断可能なプロダクト" class="headerlink" title="リリース判断可能なプロダクト"></a>リリース判断可能なプロダクト</h3><p><a href="http://www.flickr.com/photos/k2works/12963917153/" target="_blank" rel="noopener" title="agile-scrum-012 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7319/12963917153_6ba2f88afb_s.jpg" width="75" height="75" alt="agile-scrum-012"></a></p><ul><li>開発チームはリリース判断可能なプロダクトをつくる。</li></ul><h3 id="完了の定義"><a href="#完了の定義" class="headerlink" title="完了の定義"></a>完了の定義</h3><p><a href="http://www.flickr.com/photos/k2works/12963917323/" target="_blank" rel="noopener" title="agile-scrum-008 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2308/12963917323_32c895420c.jpg" width="500" height="157" alt="agile-scrum-008"></a></p><ul><li>完了の定義によって、何をもってリリース判断可能かを定める。</li></ul><h2 id="ロール"><a href="#ロール" class="headerlink" title="ロール"></a><a name="5">ロール</a></h2><h3 id="プロダクトオーナー"><a href="#プロダクトオーナー" class="headerlink" title="プロダクトオーナー"></a>プロダクトオーナー</h3><p><a href="http://www.flickr.com/photos/k2works/12963917303/" target="_blank" rel="noopener" title="agile-scrum-009 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7320/12963917303_1e1842437c_s.jpg" width="75" height="75" alt="agile-scrum-009"></a></p><ul><li>プロダクトの結果責任を取る。</li><li>プロダクトバックログの管理者で、並び順の最終決定権限を持つ。</li><li>プロジェクトに必ず1人必要。</li><li>開発チームを活用して、プロダクトの価値を最大化する。</li><li>開発チームに相談できるが、干渉はできない</li></ul><h3 id="開発チーム"><a href="#開発チーム" class="headerlink" title="開発チーム"></a>開発チーム</h3><p><a href="http://www.flickr.com/photos/k2works/12963772725/" target="_blank" rel="noopener" title="agile-scrum-010 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7297/12963772725_e27fa68bf7_s.jpg" width="75" height="75" alt="agile-scrum-010"></a></p><ul><li>リリース判断可能なプロダクトをつくる。</li><li>3人～9人で構成する。</li><li>全員揃えばプロダクトをつくれる。</li><li>上下関係はない。</li></ul><h3 id="スクラムマスター"><a href="#スクラムマスター" class="headerlink" title="スクラムマスター"></a>スクラムマスター</h3><p><a href="http://www.flickr.com/photos/k2works/12963917173/" target="_blank" rel="noopener" title="agile-scrum-011 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7360/12963917173_f69333dbba_s.jpg" width="75" height="75" alt="agile-scrum-011"></a></p><ul><li>このプロセスがうまくまわるようにする。</li><li>妨害を排除する。</li><li>支援と奉仕をする。</li><li>教育、ファシリテート、コーチ、推進役。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a name="6">参考文献</a></h2><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4798129712&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4274068560&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> マネジメント </category>
          
          <category> エンジニアリング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> アジャイル開発 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>アジャイル開発モデル</title>
      <link href="/2014/03/06/2014-03-06-agile-development-model/"/>
      <url>/2014/03/06/2014-03-06-agile-development-model/</url>
      
        <content type="html"><![CDATA[<div style="position:relative;height:300px;width:640px;padding:1px;background:#333;"><a href="http://www.flickr.com/photos/seattlemunicipalarchives/4818952324/" target="_blank"><img src="http://farm5.static.flickr.com/4120/4818952324_a2cce9be1b_z.jpg?zz=1" alt="Engineering Department employees, 1962" style="position:absolute;clip:rect(102px 899px 402px -1px);margin:-102px 0 0 1px;padding-bottom:5px;" /></a><span style="position:absolute;bottom:0;right:0;background:#333;color:#DDD;font-size:10px;padding:3px;">Engineering Department employees, 1962 / Seattle Municipal Archives</span></div><hr>アジャイル開発は２つの領域に分けられる。  ひとつめは主にプロジェクトの計画・運営に関わるマネジメント領域。  ふたつめは設計・開発に関わるエンジニアリング領域である。<a id="more"></a><h2 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h2><ul><li><a href="#1">概要</a></li><li><a href="#2">マネジメント</a></li><li><a href="#3">エンジニアリング</a></li><li><a href="#4">まとめ</a></li><li><a href="#5">参考リンク</a></li><li><a href="#6">参考文献</a></li></ul><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a><a name="1">概要</a></h2><h2 id="マネジメント"><a href="#マネジメント" class="headerlink" title="マネジメント"></a><a name="2">マネジメント</a></h2><h3 id="マネジメント領域概要"><a href="#マネジメント領域概要" class="headerlink" title="マネジメント領域概要"></a>マネジメント領域概要</h3><p><a href="http://www.flickr.com/photos/k2works/12945694205/" target="_blank" rel="noopener" title="agile_adaption_02 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7337/12945694205_57475f777f.jpg" width="500" height="308" alt="agile_adaption_02"></a></p><h4 id="方針"><a href="#方針" class="headerlink" title="方針"></a>方針</h4><h5 id="インセプションデッキ"><a href="#インセプションデッキ" class="headerlink" title="インセプションデッキ"></a>インセプションデッキ</h5><p><a href="http://www.flickr.com/photos/k2works/12962680524/" target="_blank" rel="noopener" title="inseption_deck_01 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7340/12962680524_52e6b611d1.jpg" width="500" height="290" alt="inseption_deck_01"></a></p><h5 id="全体像を捉える"><a href="#全体像を捉える" class="headerlink" title="全体像を捉える"></a>全体像を捉える</h5><ul><li><p>我々はなぜここにいるのか？</p></li><li><p>エレベーターピッチを作る</p></li><li><p>パッケージデザインを作る</p></li><li><p>やらないことリストを作る</p></li><li><p>「ご近所さん」を探せ</p></li></ul><h5 id="具現化させる"><a href="#具現化させる" class="headerlink" title="具現化させる"></a>具現化させる</h5><ul><li><p>解決策を描く</p></li><li><p>夜も眠れなくなるような問題は何だろう？</p></li><li><p>期間を見極める</p></li><li><p>何を諦めるのかはっきりさせる</p></li><li><p>何がどれだけ必要なのか</p></li></ul><h5 id="何を諦めるのかはっきりさせる"><a href="#何を諦めるのかはっきりさせる" class="headerlink" title="何を諦めるのかはっきりさせる"></a>何を諦めるのかはっきりさせる</h5><ul><li>時間</li><li>予算</li><li>品質</li><li>スコープ</li></ul><h5 id="何がどれだけ必要なのか"><a href="#何がどれだけ必要なのか" class="headerlink" title="何がどれだけ必要なのか"></a>何がどれだけ必要なのか</h5><ul><li><p>いつ完了するのか？</p></li><li><p>いくらかかるのか？</p></li></ul><h4 id="計画"><a href="#計画" class="headerlink" title="計画"></a>計画</h4><h5 id="アジャイルな計画づくりとは"><a href="#アジャイルな計画づくりとは" class="headerlink" title="アジャイルな計画づくりとは"></a>アジャイルな計画づくりとは</h5><blockquote><p>チームの開発速度を測定して、その速度をもとに、いつ頃すべて完了させられるのかプロジェクトの完了時期を見通せるようにすることでしかない</p></blockquote><blockquote><p>『アジャイルサムライ』</p></blockquote><h5 id="ユーザーストーリー"><a href="#ユーザーストーリー" class="headerlink" title="ユーザーストーリー"></a>ユーザーストーリー</h5><ul><li><p>顧客にとって何かしらの価値で書かれていること</p><ul><li><p>誰のためのストーリーで</p></li><li><p>何をしたいか</p></li><li><p>なぜそうしたいのか</p><pre><code>&lt;ユーザーの種類&gt;として&lt;達成したいゴール&gt;をしたいなぜなら&lt;理由&gt;だからだ</code></pre></li></ul></li><li><p>INVEST</p><ul><li>独立していること</li><li>交渉の余地がある</li><li>テストができる</li><li>小さい、見積もれる</li></ul></li></ul><h5 id="ストーリー収集ワークショップ"><a href="#ストーリー収集ワークショップ" class="headerlink" title="ストーリー収集ワークショップ"></a>ストーリー収集ワークショップ</h5><ol><li><p>大きくて見通しのよい部屋を用意する</p></li><li><p>図をたくさん書く</p></li><li><p>ユーザーストーリーをたくさん書く</p></li><li><p>その他もろもろをプレインストーミング</p></li><li><p>リストを磨きあげる</p></li></ol><h5 id="見積もり"><a href="#見積もり" class="headerlink" title="見積もり"></a>見積もり</h5><ul><li><p>相対図を見積もる</p></li><li><p>ポイントで見積もる</p></li><li><p>見積もり技法</p><ul><li>三角測量</li><li>プランニングポーカー</li></ul></li></ul><h5 id="計画の立て方"><a href="#計画の立て方" class="headerlink" title="計画の立て方"></a>計画の立て方</h5><ul><li><p>顧客にとって価値ある成果を届けられる計画</p></li><li><p>わかりやすくありのままを伝える誠実な計画</p></li><li><p>約束したことを守り続けられる計画</p></li><li><p>必要に応じて変更できる計画</p></li></ul><h5 id="初回の計画づくり"><a href="#初回の計画づくり" class="headerlink" title="初回の計画づくり"></a>初回の計画づくり</h5><ol><li><p>リリースを定義する</p></li><li><p>プロジェクト規模を見極める</p></li><li><p>優先順位をつける</p></li><li><p>チームのベロシティを見積もる</p></li><li><p>期日を仮決めする</p></li></ol><h4 id="運営"><a href="#運営" class="headerlink" title="運営"></a>運営</h4><p><a href="http://www.flickr.com/photos/k2works/12962343063/" target="_blank" rel="noopener" title="agile_operation_01 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7420/12962343063_5a93dab828.jpg" width="500" height="188" alt="agile_operation_01"></a></p><h5 id="価値ある成果を毎週届ける"><a href="#価値ある成果を毎週届ける" class="headerlink" title="価値ある成果を毎週届ける"></a>価値ある成果を毎週届ける</h5><ol><li><p>分析と設計：作業の段取りをする</p><ul><li>「必要な分だけを、必要なときに」分析する</li><li>それからペルソナを作ろう</li><li>ペーパープロトタイプでいろんなデザインをどんどん作ろう</li><li>受け入れテストを書いて、ストーリーの満足条件を定義しよう</li></ul></li><li><p>開発：作業する</p><ul><li>自動化されたテストを書く</li><li>設計を継続的に発見させていき、改善し続ける</li><li>ちゃんと動くソフトウエアであり続けるために、コードを継続的にインテグレーションする</li><li>顧客がシステムについて語る言葉に合わせてコードを書く</li></ul></li><li><p>テスト：作業の結果を確認する</p><ul><li>カンバン・・・仕掛り(WIP:Work In Progress)にできる作業の上限を設けていること</li><li>イテレーションのプレッシャーから開放される</li><li>１回のイテレーションに収まらない仕事にも取り組める</li><li>期待をマネジメントしやすい</li></ul></li></ol><h5 id="アジャイルな意思疎通の作戦"><a href="#アジャイルな意思疎通の作戦" class="headerlink" title="アジャイルな意思疎通の作戦"></a>アジャイルな意思疎通の作戦</h5><ul><li>今回のイテレーションの作業に備える(ストーリー計画ミーティング)</li><li>今回のイテレーションのフィードバックを得る(ショーケース)</li><li>次回のイテレーション計画を立てる(イテレーション計画ミーティング)</li><li>次回のイテレーションで改善できる余地を探す(ミニふりかえり)</li></ul><h5 id="現場の状況を目に見えるようにする"><a href="#現場の状況を目に見えるようにする" class="headerlink" title="現場の状況を目に見えるようにする"></a>現場の状況を目に見えるようにする</h5><ul><li>ストーリーボード</li><li>リリースボード</li><li>ベロシティとバーンダウンチャート</li><li>インセプションデッキ(壁のスペースに余裕があれば)</li><li>チームの約束(Working Agreements)</li><li>チームが大事にすること(Shared Values)</li></ul><h4 id="組織"><a href="#組織" class="headerlink" title="組織"></a>組織</h4><h5 id="アジャイルチーム"><a href="#アジャイルチーム" class="headerlink" title="アジャイルチーム"></a>アジャイルチーム</h5><ul><li><p>きっちり区別しない役割分担。継続的な開発工程。チームで成果責任を果たそうする態度</p></li><li><p>チームをアジャイルにするためのコツ</p><ul><li>同じ仕事場で働く</li><li>積極的に深く関わる顧客の存在</li><li>自己組織化</li><li>成果責任と権限移譲</li><li>職能横断型チーム</li></ul></li><li><p>顧客</p><ul><li>何を作るか決める</li><li>優先順位をつける</li><li>スコープについて厳しい決断を下す</li></ul></li><li><p>開発チーム</p><ul><li>アナリスト</li><li>プログラム</li><li>テスター</li><li>UXデザイナ</li><li>プロジェクトマネージャー  </li></ul></li></ul><h2 id="エンジニアリング"><a href="#エンジニアリング" class="headerlink" title="エンジニアリング"></a><a name="3">エンジニアリング</a></h2><h3 id="エンジニアリング領域概要"><a href="#エンジニアリング領域概要" class="headerlink" title="エンジニアリング領域概要"></a>エンジニアリング領域概要</h3><p><a href="http://www.flickr.com/photos/k2works/12946099604/" target="_blank" rel="noopener" title="agile_adaption_03 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2870/12946099604_9c44e46329.jpg" width="500" height="307" alt="agile_adaption_03"></a></p><h4 id="ユニットテスト"><a href="#ユニットテスト" class="headerlink" title="ユニットテスト"></a>ユニットテスト</h4><ul><li>メソッドレベルの粒度で書く</li><li>目的は変更の結果が期待通りになっていることをあきらかにすること</li><li>テスコードはプロダクトコードには含めない</li><li>メリット<ul><li>素早いフィードバックが得られる</li><li>極めて低コストにリグレッションテストを実行できる</li><li>デバック時間を大幅に削減できる</li><li>自身を持ってデプロイできる</li></ul></li></ul><h4 id="リファクタリング"><a href="#リファクタリング" class="headerlink" title="リファクタリング"></a>リファクタリング</h4><p>ソフトウエアの整合性を保ちながら、設計を少しずつ改善していける方法</p><ul><li>変数の名前変更</li><li>メソッドの名前変更</li><li>コードをシンプルに</li><li>メソッドの抽出</li><li>変数のインライン化</li></ul><h4 id="テスト駆動開発"><a href="#テスト駆動開発" class="headerlink" title="テスト駆動開発"></a>テスト駆動開発</h4><p>以下のサイクルを回しながら、開発をすすめていく方法</p><ol><li>レッド</li><li>グリーン</li><li>リファクタリング</li></ol><p>ルールその１:失敗するテストをひとつ書くまでは、新しいコードを一切書かない</p><p>ルールその２:「危なっかしい所」をすべてテストする</p><blockquote><p>プログラマはまず、あたかもテスト対象のプロダクトコードが既に存在しているかのように考える。そして、それを呼び出して使うのに必要な、最低限のコードをテストコードとして表現する。</p></blockquote><blockquote><p>『アジャイルサムライ』</p></blockquote><h4 id="継続的インテグレーション"><a href="#継続的インテグレーション" class="headerlink" title="継続的インテグレーション"></a>継続的インテグレーション</h4><ul><li>ソースコードリポジトリ</li><li>チェックイン手順</li><li>ビルドの自動化</li><li>作業単位を小さくしようとする姿勢</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a><a name="4">まとめ</a></h2><p>以上、２つの領域からアジャイル開発モデルを整理したがその目的は『毎週、価値のある成果を届ける』ことであり方法論はその目的を実現する手段にすぎない。目的を達成できなければいくら方法論をなぞったとしてそれはアジャイルでないし逆に方法論と違っていても目的を達成できればそれはアジャイルであるといえる。</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a><a name="5">参考リンク</a></h2><ul><li><p><a href="http://www.agilemanifesto.org/iso/ja/" target="_blank" rel="noopener">アジャイルソフトウエア開発宣言</a></p></li><li><p><a href="http://www.agilemanifesto.org/iso/ja/principles.html" target="_blank" rel="noopener">アジャイルソフトウェアの12の原則</a></p></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a name="6">参考文献</a></h2><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=1934356581&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4274068560&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> マネジメント </category>
          
          <category> エンジニアリング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> アジャイル開発 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>アジャイル開発</title>
      <link href="/2014/03/05/2014-03-05-what-is-agile-development/"/>
      <url>/2014/03/05/2014-03-05-what-is-agile-development/</url>
      
        <content type="html"><![CDATA[<div style="position:relative;height:300px;width:640px;padding:1px;background:#333;"><a href="http://www.flickr.com/photos/_fabio/1452974162/" target="_blank"><img src="http://farm2.static.flickr.com/1188/1452974162_0658ff4529_z.jpg?zz=1" alt="Software Development" style="position:absolute;clip:rect(0px 900px 300px 0px);margin:0px 0 0 0px;padding-bottom:5px;" /></a><span style="position:absolute;bottom:0;right:0;background:#333;color:#DDD;font-size:10px;padding:3px;">Software Development / Fabio Bruna</span></div><hr>>Deliver Something of Value Every Week<blockquote><p>(価値ある成果を毎週届ける)</p></blockquote><a id="more"></a><h2 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h2><ul><li><a href="#1">アジャイルとは</a></li><li><a href="#2">目的と価値</a></li><li><a href="#3">アジャイル開発適用領域</a></li><li><a href="#4">まとめ</a></li><li><a href="#5">参考リンク</a></li><li><a href="#6">参考文献</a></li></ul><h2 id="アジャイルとは"><a href="#アジャイルとは" class="headerlink" title="アジャイルとは"></a><a name="1">アジャイルとは</a></h2><h3 id="言葉の定義"><a href="#言葉の定義" class="headerlink" title="言葉の定義"></a>言葉の定義</h3><blockquote><p>agile<br>【形容詞】</p></blockquote><blockquote><p>1(動きが)機敏な，はしっこい; 〔…に〕機敏で，はしっこくて 〔in〕.</p></blockquote><blockquote><p>2頭の回転の早い，機敏な，明敏な.</p></blockquote><blockquote><p>『研究社 新英和中辞典』</p></blockquote><h3 id="ソフトウエアエンジニアリングにおける定義"><a href="#ソフトウエアエンジニアリングにおける定義" class="headerlink" title="ソフトウエアエンジニアリングにおける定義"></a>ソフトウエアエンジニアリングにおける定義</h3><blockquote><p>Agile is a way of developing software that reminds us that although computers run the code, it’s people who create and maintain it.</p></blockquote><blockquote><p>(「アジャイル」はソフトウエアの開発の進め方の一つだ。アジャイルなソフトウエア開発が私たちに言い聞かせていることは、コードを実行するのはコンピュータかもしれないが、そのコードを生み出し、保守するのは私たち人間なんだということだ。)</p></blockquote><blockquote><p>It’s a framework, attitude, and approach to software delivery that is lean, fast, and pragmatic. It’s no silver bullet, but it dramatically increase your chances of success while bringing out the best your team has to offer.</p></blockquote><blockquote><p>(「アジャイル」はフレームワークであり、心構えであり、ソフトウエアを無駄なく、早く届ける手法だ。しかも、現場で実際に使える。確かに「銀の弾丸」なんてない。けれども、チームの持てる力を最大限に引き出すことで、プロジェクトがうまくいく確率を格段に向上させるんだ。)</p></blockquote><blockquote><p>『アジャイルサムライ』</p></blockquote><h2 id="目的と価値"><a href="#目的と価値" class="headerlink" title="目的と価値"></a><a name="2">目的と価値</a></h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><blockquote><p>Deliver Something of Value Every Week</p></blockquote><blockquote><p>(価値ある成果を毎週届ける)</p></blockquote><blockquote><p>『アジャイルサムライ』</p></blockquote><blockquote><p>The professional goal of every software developer and every development team is to deliver the highest possible value to employers and customers</p></blockquote><blockquote><p>(プロの開発者のゴールは、可能な限り高品質の製品を雇い主や顧客に納品することである。)</p></blockquote><blockquote><p>『アジャイルソフトウエア開発の奥義』</p></blockquote><h3 id="価値"><a href="#価値" class="headerlink" title="価値"></a>価値</h3><blockquote><p>プロセスやツールよりも個人と対話を、</p></blockquote><blockquote><p>包括的なドキュメントよりも動くソフトウェアを、</p></blockquote><blockquote><p>契約交渉よりも顧客との協調を、</p></blockquote><blockquote><p>計画に従うことよりも変化へ</p></blockquote><blockquote><p>『アジャイルソフトウエア開発宣言』</p></blockquote><h3 id="12の原則"><a href="#12の原則" class="headerlink" title="12の原則"></a>12の原則</h3><pre><code>・顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供します。・要求の変更はたとえ開発の後期であっても歓迎します。変化を味方につけることによって、お客様の競争力を引き上げます。・動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。・ビジネス側の人と開発者は、プロジェクトを通して日々一緒に働かなければなりません。・意欲に満ちた人々を集めてプロジェクトを構成します。環境と支援を与え仕事が無事終わるまで彼らを信頼します。・情報を伝えるもっとも効率的で効果的な方法はフェイス・トゥ・フェイスで話をすることです。・動くソフトウェアこそが進捗の最も重要な尺度です。・アジャイル･プロセスは持続可能な開発を促進します。一定のペースを継続的に維持できるようにしなければなりません。・技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。・シンプルさ（ムダなく作れる量を最大限にすること）が本質です。・最良のアーキテクチャ・要求・設計は、自己組織的なチームから生み出されます。・チームがもっと効率を高めることができるかを定期的に振り返り、それに基づいて自分たちのやり方を最適に調整します。『アジャイルソフトウエア開発宣言』</code></pre><h2 id="アジャイル開発適用領域"><a href="#アジャイル開発適用領域" class="headerlink" title="アジャイル開発適用領域"></a><a name="3">アジャイル開発適用領域</a></h2><p><a href="http://www.flickr.com/photos/k2works/12945694345/" target="_blank" rel="noopener" title="agile_adaption_01 by k2works, on Flickr"><img src="https://farm4.staticflickr.com/3754/12945694345_8387f944cc.jpg" width="500" height="320" alt="agile_adaption_01"></a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a><a name="4">まとめ</a></h2><blockquote><p>The “agile way”(「アジャイルの道」)</p></blockquote><blockquote><p>・Are we delivering something of value every week?</p></blockquote><blockquote><p>(毎週、価値ある成果を届けられているか？)</p></blockquote><blockquote><p>・Are we striving to continuously improve?</p></blockquote><blockquote><p>(たゆまぬ改善のための努力を惜しまず続けているか？)</p></blockquote><blockquote><p>If you can answer yes to both those questions,you’re being agile</p></blockquote><blockquote><p>(この２つの問いへの答えが「イエス」なら、君はアジャイルだ。)</p></blockquote><blockquote><p>『アジャイルサムライ』</p></blockquote><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a><a name="5">参考リンク</a></h2><ul><li><p><a href="http://www.agilemanifesto.org/iso/ja/" target="_blank" rel="noopener">アジャイルソフトウエア開発宣言</a></p></li><li><p><a href="http://www.agilemanifesto.org/iso/ja/principles.html" target="_blank" rel="noopener">アジャイルソフトウェアの12の原則</a></p></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a name="6">参考文献</a></h2><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=1934356581&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4274068560&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=1292025948&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4797347783&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=B000OZ0N5S&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> マネジメント </category>
          
          <category> エンジニアリング </category>
          
      </categories>
      
      
        <tags>
            
            <tag> アジャイル開発 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ビジネス</title>
      <link href="/2013/11/28/2014-03-06-what-is-business/"/>
      <url>/2013/11/28/2014-03-06-what-is-business/</url>
      
        <content type="html"><![CDATA[<div style="position:relative;height:300px;width:640px;padding:1px;background:#333;"><a href="http://www.flickr.com/photos/daverugby83/7278557688/" target="_blank"><img src="http://farm8.static.flickr.com/7089/7278557688_a8d97977b7_z.jpg?zz=1" alt="merchant" style="position:absolute;clip:rect(30px 900px 330px 0px);margin:-30px 0 0 0px;padding-bottom:5px;" /></a><span style="position:absolute;bottom:0;right:0;background:#333;color:#DDD;font-size:10px;padding:3px;">merchant / Dave_B_</span></div><hr>> 売れるとはモノを必要としているヒトに届けてその価値に応じた対価を受け取るまでの一連のプロセスである。<a id="more"></a><h2 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h2><ul><li><a href="#1">売れるとは</a></li><li><a href="#2">基本モデル</a></li><li><a href="#3">経営戦略モデル</a></li><li><a href="#4">組織モデル</a></li><li><a href="#5">組織モデル</a></li><li><a href="#6">参考文献</a></li></ul><h2 id="売れるとは"><a href="#売れるとは" class="headerlink" title="売れるとは"></a><a name="1">売れるとは</a></h2><p><a href="http://www.flickr.com/photos/k2works/12965358525/" target="_blank" rel="noopener" title="business-001 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2200/12965358525_20bfcbd4e3.jpg" width="500" height="101" alt="business-001"></a></p><p>売れるとはモノを必要としているヒトに届けてその価値に応じた対価を受け取るまでの一連のプロセスである。</p><p><a href="http://www.flickr.com/photos/k2works/12965358485/" target="_blank" rel="noopener" title="business-002 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7386/12965358485_2175c4afb4.jpg" width="500" height="212" alt="business-002"></a></p><p>モノを必要とする人が増えればそのプロセスはより複雑になり規模は成長しいていく。</p><p><a href="http://www.flickr.com/photos/k2works/12965358475/" target="_blank" rel="noopener" title="business-003 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2829/12965358475_646d39a976.jpg" width="500" height="311" alt="business-003"></a></p><p>複雑かつ大規模となった時に売れるを維持発展させていくのに必要な要素は何か？<br>以下、その売れるを構成する要素を洗い出しモデル化してみたい。</p><h2 id="基本モデル"><a href="#基本モデル" class="headerlink" title="基本モデル"></a><a name="2">基本モデル</a></h2><p><a href="http://www.flickr.com/photos/k2works/12965358225/" target="_blank" rel="noopener" title="business-004 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2743/12965358225_a9d5454e8a.jpg" width="500" height="322" alt="business-004"></a></p><p>まず、複雑かつ大規模になった全体を大きく２つの要素に分割する。<br>ひとつ目はモノを調達して加工販売するまでのプロセスとしての業務の流れ。<br>ふたつ目はモノとそれを必要とするヒトの集合である製品・市場。  </p><p><a href="http://www.flickr.com/photos/k2works/12965498943/" target="_blank" rel="noopener" title="business-005 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2408/12965498943_e90cea3c50.jpg" width="500" height="336" alt="business-005"></a></p><p>このふたつの要素が交差する部分に売れるを構成する主要な要素があると考えられる。</p><p><a href="http://www.flickr.com/photos/k2works/12965358205/" target="_blank" rel="noopener" title="business-006 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7374/12965358205_ff46423716.jpg" width="500" height="336" alt="business-006"></a></p><p>ここでは主要な要素を以下の３要素とする。</p><ul><li>経営戦略</li><li>組織</li><li>マーケティング</li></ul><p><a href="http://www.flickr.com/photos/k2works/12965358105/" target="_blank" rel="noopener" title="business-007 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7447/12965358105_84a985baff.jpg" width="500" height="331" alt="business-007"></a><br><a href="http://www.flickr.com/photos/k2works/12965775834/" target="_blank" rel="noopener" title="business-008 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7388/12965775834_0bab04616d.jpg" width="500" height="331" alt="business-008"></a></p><p>上記３要素を各要素ごとに戦略・戦術・オペーレーションの観点から整理統合する。<br>なお、戦略・戦術・オペレーションの定義は以下の通り。</p><blockquote><p>戦略とは資源の配分<br>戦術とは具体的に実行可能な行動<br>オペレーションとは目的を実現するための戦略を最大限に効率化する戦術の組み合わせと一連のプロセス  </p></blockquote><p><a href="http://www.flickr.com/photos/k2works/12965498653/" target="_blank" rel="noopener" title="business-009 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7430/12965498653_4384e35227.jpg" width="500" height="329" alt="business-009"></a></p><p>経営活動プロセスであるオペレーションは支援活動と主活動の２つの要素で構成されている。<br>この２つの要素に加えてその実装となるシステムも要素として追加している。</p><h2 id="経営戦略モデル"><a href="#経営戦略モデル" class="headerlink" title="経営戦略モデル"></a><a name="3">経営戦略モデル</a></h2><p><a href="http://www.flickr.com/photos/k2works/12965775654/" target="_blank" rel="noopener" title="business-010 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7318/12965775654_7ec9065054.jpg" width="500" height="352" alt="business-010"></a></p><h2 id="組織モデル"><a href="#組織モデル" class="headerlink" title="組織モデル"></a><a name="4">組織モデル</a></h2><p><a href="http://www.flickr.com/photos/k2works/12965775574/" target="_blank" rel="noopener" title="business-011 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7394/12965775574_e221a3f878.jpg" width="500" height="365" alt="business-011"></a></p><h2 id="マーケティングモデル"><a href="#マーケティングモデル" class="headerlink" title="マーケティングモデル"></a><a name="5">マーケティングモデル</a></h2><p><a href="http://www.flickr.com/photos/k2works/12965357795/" target="_blank" rel="noopener" title="business-012 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2869/12965357795_4cb7a01f5d.jpg" width="500" height="374" alt="business-012"></a></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a name="6">参考文献</a></h2><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=B00BANJ84A&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=456966413X&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> ビジネス </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 経営戦略 </tag>
            
            <tag> 組織 </tag>
            
            <tag> マーケティング </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析</title>
      <link href="/2012/05/29/2014-03-05-what-is-analyze/"/>
      <url>/2012/05/29/2014-03-05-what-is-analyze/</url>
      
        <content type="html"><![CDATA[<div style="position:relative;height:300px;width:640px;padding:1px;background:#333;"><a href="http://www.flickr.com/photos/lendingmemo/11442295205/" target="_blank"><img src="http://farm4.static.flickr.com/3748/11442295205_57318c249e_z.jpg?zz=1" alt="Analysis" style="position:absolute;clip:rect(100px 900px 400px 0px);margin:-100px 0 0 0px;padding-bottom:5px;" /></a><span style="position:absolute;bottom:0;right:0;background:#333;color:#DDD;font-size:10px;padding:3px;">Analysis / LendingMemo</span></div><p>[Photo credit: <a href="http://www.lendingmemo.com/" target="_blank" rel="noopener">www.LendingMemo.com</a>]</p><hr>>「物事の実態・本質を正しく理解するための作業」の総称<br>> 意思決定のための「分析の技術」<a id="more"></a><p>そして分析は4つの基本要素から構成されている。</p><blockquote><p>分析の基本は「大きさを考える」、「分けて考える」、「比較して考える」、「時系列で考える」の四つである。<br><br>意思決定のための「分析の技術」</p></blockquote><p><a href="http://www.flickr.com/photos/k2works/12945981083/" target="_blank" rel="noopener" title="analyze_001 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7447/12945981083_c4aea603bf.jpg" width="500" height="368" alt="analyze_001"></a></p><p>上記を踏まえて分析をWhy型とIssue型の2種類と定義する。</p><ul><li>事象の「大きさ」を把握しさまざまな切り口で「分割」し分割対象を「比較」し「時系列」に並べ総合的に検討し事象の実態・本質を理解する一連の作業（Why型）</li><li>対象となる「課題」の「大きさ」を把握しさまざまな切り口で「分割」し分割対象を「比較」し「時系列」に並べ総合的に検討し「課題」の原因および解決策を立案する一連の作業（Issue型）</li></ul><p>以下、 基本要素である「大きさ」「分割」「比較」「時系列」を解説してゆく。</p><h2 id="大きさを考える"><a href="#大きさを考える" class="headerlink" title="大きさを考える"></a>大きさを考える</h2><p><a href="http://www.flickr.com/photos/k2works/12945868595/" target="_blank" rel="noopener" title="analyze_002 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2846/12945868595_c0ff571d40.jpg" width="500" height="368" alt="analyze_002"></a></p><p><strong>オーダー・オブ・マグニチュード</strong></p><blockquote><p>大きさを論ずるうえで鍵となる考え方に「大きさの程度」（オーダー・オブ・マグニチュード）という言葉がある。何事によらず、内部論理の緻密さや形式的な整合性を論ずる前に、全体としての大きさの程度、施策の利きの程度を大まかに把握して、まず重要度の判定をし、そのうえで重要度の順に応じて、あるいは大きなところのみ手をつける、と言う考え方である。<br><br>意思決定のための「分析の技術」</p></blockquote><p><strong>８０対２０の法則</strong></p><p>売れ筋の上位20品目が全売上高の約８０％を占めるので計画を立てたり施策を打ったりする際には、まず上位20品目に注目して検討する。あるいは、上位20品目とその他の80品目の取り扱いのルール（在庫・欠品管理等）を変えることが必要/有効であると言う考え方。2対6対２の法則（上位20品目、中位20品目、下位20品目）と言う考えもある。いずれにしても大きなところから考え、手をつけるという考え方のひとつ。</p><p><strong>感度分析</strong></p><p>「感度（Sensitivity)」とは、ある行為が、結果として全体に対してどれほどの影響を持つかという「程度」のことを指す。<br>何事によらず、ある目的を持っていくつかの選択肢を検討する際には、全体像を示し、そのなかでのそれぞれの選択肢の感度＝影響度の大きさを位置づけたうえで作業にとりかかろうという考え方のひとつ</p><p><strong>クリティカル・マス</strong></p><p>大きさを考えるうえでいま一つ覚えておくべき用語として、「クリティカル・マス（Critical Mass)」という概念がある。成果を上げるためにある一定量を超える資源投入が必要な場合、その必要量をクリティカル・マスと呼ぶ。クリティカル・マスに満たない不十分な努力や資源の投入は、結果が期待できない無駄な投資となる。</p><h2 id="分けて考える"><a href="#分けて考える" class="headerlink" title="分けて考える"></a>分けて考える</h2><p><a href="http://www.flickr.com/photos/k2works/12946273604/" target="_blank" rel="noopener" title="analyze_003 by k2works, on Flickr"><img src="https://farm3.staticflickr.com/2863/12946273604_5157167b12.jpg" width="500" height="368" alt="analyze_003"></a></p><p><strong>分けて考えるための基本原則</strong></p><blockquote><p>「分ける」際の鉄則は、「MECEに分ける」ことである。それが、具体的には困難な場合でも、なるべくMECEに考えよういう基本姿勢を崩してはならない。<br><br>意思決定のための「分析の技術」 P33</p></blockquote><p>MECE（ミースィー）とは</p><p>Mutually=要素が互いに</p><p>Exclusive=重複がなく（原意：排除し合っていて）</p><p>Collectively=集めると</p><p>Exhaustive=全体を尽くす</p><p>の四つの単語の頭文字をとった略語</p><p>一つのものを二つ以上に「分ける」際、分けられた要素を互いにダブりなく合計すればモレなくもとの一つに戻るという考え方</p><p>MECEにする際には以下の2点を意識する必要がある。</p><ul><li>四則演算のうち、足し算、引き算、掛け算をしっかり意識すること</li><li>切り口の 軸を明確にすること</li></ul><p><strong>足し算</strong></p><p>売上高を例にとると、一店一店の売上高の合計、あるいは全国市場の場合、各県別売上高の合計なのでそれら一つ一つの合計はMECEである。さらに対象を大きく地方別に分けるもしくは大都市圏、中小都市圏、群部のように分けることもできる。そのうちの大都市圏をさらに都心部と郊外部に分けていくこともできる。その分け方が、全体を尽くし（Collectively Exhaustive)かつ重複がない(Mutually Exclusive)かどうかが大切。</p><p><strong>掛け算</strong></p><p>合計の数字を掛け算の関係で表すことができないか考える。<br>店舗全体の売上高でいえば[売上高＝店舗数×一店舗あたり売上］と表現できる。 つまり総量を掛け算で表せる場合、掛け算の両方の因子は、互いに重複のない別次元のもの（Mutually　Exclusive)であり、かつ掛け算の結果がすべてを尽くしている（Collectively Exhaustive)という関係が成り立つ。</p><p><strong>切り口の軸を明確にする</strong></p><p>MECEに考えるうえで切り口の軸を明確に意識し、その軸の上で全体の１００％をカバーできるかを考えることが大切。この「分け方の軸・分ける際のルールをはっきりと自覚する」ことは、あらゆる「分ける」際の基本用件と言える。</p><p><strong>マネジメント・インプリケーションを考えて分ける</strong></p><p>MECEに分けたからといってその結果が有効な打ち手につながらなければ「分け方がよくない」ということになる。とくにIssue型の分析においては解決策として有効な「マネジメント・インプリケーション」の発見に役立つ「分け方の工夫」が必要になってくる。</p><p><strong>全体を把握して検討対象の位置づけを考える</strong></p><p>一つの事象を検討するにあたって、その検討対象自体が「どれほど重要で、どのような意義を待つのか」を、客観的に捕らえる必要がある。「全体像を考える」ということは、「分けて考える」ことの裏返しであり、本質的には同じもの、分析の基本である。</p><p><strong>多元の要素を考える</strong></p><p><strong>タテとヨコに分ける</strong></p><p>分けるための指標を一つにしないで、それら多元的要所のなかからもっとも重要かつ効果的と思われる二つの指標（分け方の基準軸）を同時に取り出して、その二つを組み合わせて複合的に分けて考える。要するにマトリクスにしてみるということ。</p><p><strong>多元要素の分析</strong></p><p>分けて考えるために必要な指標・軸が二軸以上の多元になった場合のアプローチとして</p><ol><li>一分野に絞込み、そのなかで二元の要素を考える</li><li>二元分析の上に三元目の指標を乗せる</li><li>割り算をする</li><li>多数の要素をより大きな二軸に集約して考える</li><li>多元回帰などの数学的処理法を用いる</li></ol><p><strong>一分野に絞込み、そのなかで二元の要素を考える</strong></p><p>まず、全体を粗分析で整理して、本格的な分析の対象とすべき分野を全体のなかでしっかりと位置づけたうえで、あらためてその分野を対象に二元分析その他の手法を駆使して深く掘り下げればよい。<br>要するにマクロで全体をとらえ重要分野を絞り、その中で要素に分けることによってミクロの視点で検討を進めていけるのである。マクロの視点からミクロの部分に絞って分析を進める手法を身につければ、原則的にはどのような複雑な問題も対処可能なはずである。</p><p><strong>二元分析の上に三元目の指標を乗せる</strong></p><p>すでにできている二元分析の図表の上に、三元目の指標をのせることで表現できる。</p><p><strong>多数の要素をより大きな二軸に集約して考える</strong></p><p>解析と総合判断を交え、結果として二元に集約して分析する。</p><h2 id="比較して考える"><a href="#比較して考える" class="headerlink" title="比較して考える"></a>比較して考える</h2><p><a href="http://www.flickr.com/photos/k2works/12945981003/" target="_blank" rel="noopener" title="analyze_004 by k2works, on Flickr"><img src="https://farm8.staticflickr.com/7431/12945981003_32bae4e3eb.jpg" width="500" height="368" alt="analyze_004"></a></p><blockquote><p>英語で「分析する」に相当する用語はAnalyze(分解する、解析する、批判的に調べる。名詞形はAnalysis)である。そしてこれと似た用語にAnalogy(類似、類推、比較）がある。語源がどのような関係にあるかは知らないが、われわれが現象を理解するための主要な手段として、「比較する」「比較して類似や差異を考えて推論する」ことは、「分ける」こととともにもっとも基本的な分析の手法である。<br><br>意思決定のための「分析の技術」 P56</p></blockquote><p><strong>比較のための基本姿勢</strong></p><p><strong>アップル・ツー・アップルを考える</strong></p><p>比較をする際のまず第一の要件は、「意味がある比較ができるか否か」である。同じリンゴ同士なら大きさ・色・形・味などを対等な条件で比較し、優劣をつけられようが、リンゴとミカンを比較しても意味がない。英語では、それはアップル・ツー・オレンジだから比較できない、と言う表現をする。</p><p>比較をする際には</p><ol><li>できるだけ同じ物を比較すること</li><li>異なるものを比較するときは、意味がありかつ比較できる指標を探すこと</li><li>似たもの同士を比較する場合も、同じ要素と異なる要素を正しく見分け、異なる部分の影響を勘案しつつ合理的な比較を心がけること</li></ol><p>の三点が肝心である。</p><p>要するに、比較をする際には、「目的に応じ」「適切な枠組みを工夫して」「できるだけアップル・ツー・アップル」で比較することが大切。</p><h2 id="変化-時系列を考える"><a href="#変化-時系列を考える" class="headerlink" title="変化/時系列を考える"></a>変化/時系列を考える</h2><p><a href="http://www.flickr.com/photos/k2works/12945980983/" target="_blank" rel="noopener" title="analyze_005 by k2works, on Flickr"><img src="https://farm4.staticflickr.com/3729/12945980983_8f686f172a.jpg" width="500" height="368" alt="analyze_005"></a></p><blockquote><p>現在の状況というものは、いきなりそこに現出したものではない。現在は過去のいろいろな経過を経て、生まれたものである。したがって、「現在」を正しく理解するためには、現在の状況だけをいくらくわしく分析しても不十分であり、なぜ現在の状況がそこにあるのかを「過去との関連」において見極めることが必要になる。<br><br>意思決定のための「分析の技術」 P88</p></blockquote><p><strong>戦略を自覚する</strong></p><p>現在がある以上、それをもたらした過去の「明示されていないが含蓄・包含されている」戦略（インプリシット・ストラテジー）が存在するはずである。その インプリシット・ストラテジーを自覚することが大事。その取り組みとしては業務の流れと製品・市場からなるマトリックスをつくり、それぞれのマスごとにどのような資源（人・設備・資金等）が配分され、どう活動されているかを見ていく。</p><p>また、全社の分野別資源投入の状況を把握・検討するだけではなく、この「歴史をさかのぼる」手法は、個々の商品・事業分野ごとのインプリシット・ストラテジーの検討に用いることもできる。</p><p><strong>大きな流れ/変化を読む</strong></p><p>2つの軸を時系列に並べ比較することで長期的なトレンドを見る。トレンドを見る際には、場合により、基点の見方、期間の定め方が正しい判断のためには決定的に重要となる場合があるので注意すること。<br>季節変動など一定の外的与件による変動要素があらかじめ想定できる場合には、その要素も加味・修正して読む必要がある。数字で見るよりはグラフ化して視覚に訴えるほうが直感・総合能力を生かす上ではるかに有効である。</p><p><strong>繰り返し現れる変化のパターンを読む</strong></p><p>過去の経験則に学ぶ／繰り返し現れるパターンを考える際には、その現象そのものはヒントにすぎず、その背景にどのような理由、根拠があるのか、そして今回も繰り返されるのかを検討する必要がある。<br>実体経済においても波動の繰り返しがあることは認められているがやはり今回も繰り返されるかその根拠を追求していく必要がある。その際、在庫水準や機械受注といった景気に先行する指標、百貨店売上高や有効求人倍率などの同時指標、家計消費支出や完全失業率などの遅行指標といった諸指標と実体経済の動きを総合的に判断することで「パターンの繰り返し、変動の法則性」といったものにより合理性を持たせることができる。</p><p><strong>変曲点に着目し、兆候を読み取る</strong></p><p>時系列の傾向・全体の流れを追いつつも、そこにどのような変化が起こりつつあるのかを敏感に読み取る工夫・努力が必要である。そのためには絶対量とその変化に注目すると同時に、変曲点、あるいは微分で考えた場合の変化率に着目し、その意味を常に考える/要因を説明をする習慣をつけておくことが大切。その説明のためには総体ではなく、その中味に立ち入って考えることが必要である。</p><p><strong>「比較する」、「分けて考える」と併用して総合判断をする</strong></p><p>比較して考える際、比較の対象は同じ種類のものであるから、自動的に「アップル・ツー・アップル」の原則にかなっていることになる。よって、時系列を考えることは、必然的に「比較して考える」考え方を含むものであるが、そこに「分けて考える」考え方を組み合わせることにより、より根幹の要素に迫り、総合的に考えることができれば、さらに有意義な分析ができる。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=k2works0c-22&o=9&p=8&l=as1&asins=4478372608&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
